<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据结构与算法(C版)</title>
    <url>/2023/02/21/C-DataStructure/</url>
    <content><![CDATA[<h1 id="数据结构与算法datastructureandalgorithms"><a class="markdownIt-Anchor" href="#数据结构与算法datastructureandalgorithms">#</a> 数据结构与算法 (DataStructureAndAlgorithms)</h1>
<h2 id="注该笔记使用c-开发环境为vs2022"><a class="markdownIt-Anchor" href="#注该笔记使用c-开发环境为vs2022">#</a> 注：该笔记使用 C、开发环境为 VS2022</h2>
<h1 id="算法-复杂度"><a class="markdownIt-Anchor" href="#算法-复杂度">#</a> 算法、复杂度：</h1>
<p><strong>算法 (Algorithm) 是为了解决某类问题而规定的一个有限长的操作序列。</strong></p>
<p>一个算法必须满足以下五个重要特性：</p>
<p>(1)<strong> 有穷性</strong>。一个算法必须总是在执行有穷步后结束，且每一步都必须在有穷时间内完成。</p>
<p>(2) <strong>确定性</strong>。对千每种情况下所应执行的操作，在算法中都有确切的规定，不会产生二义性， 使算法的执行者或阅读者都能明确其含义及如何执行。</p>
<p>(3) <strong>可行性</strong>。算法中的所有操作都可以通过已经实现的基本操作运算执行有限次来实现。</p>
<p>(4) <strong>输入</strong>。一个算法有零个或多个输入。当用函数描述算法时，输入往往是通过形参表示的， 在它们被调用时，从主调函数获得输入值。</p>
<p>(5) <strong>输出</strong></p>
<hr>
复杂度包括：时间复杂度与空间复杂度，通常我们更加看重一个算法的时间复杂度。
<p>拿算法中最经典的高斯算法为例：</p>
<p>求 1~n 的和，有常规的算法：循环实现，与高斯算法，下面是代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常规实现：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		sum += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高斯算法实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> sum = (<span class="number">1</span> + n) * n / <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以注意到，当使用常规算法时，需要执行的语句数会随着整数 n 的变化而变化，成线性相关，当 n 为一万时，那么 sum+=i; 这条语句需要执行的次数就是一万次。而使用高斯算法时，无论 n 的值是多少，sum = (1 + n) * n / 2; 都只会执行一次。</p>
<p>假设每条语句的执行时间都相同，设为 1，则使用常规算法消耗的时间大致可以认为是 n*1，高斯算法消耗的时间大概是 1。</p>
<p>我们通常使用大 O 表示法，来表示一个算法的复杂度，这里可以写为：常规算法 O (n)，高斯算法 O (1)</p>
<p>需要注意的是，若是算法中使用了两个循环 (非嵌套)，执行了 2n 条语句，我们仍然记为 O (n)</p>
<p>又或者使用了 2，3，4 条语句，只要这个算法的代码实现并不会随 n 变动，我们仍然记为 O (1)</p>
<p>因此，O (2n)，O (3n)，O (5)，这些形式都是错误的。通常有以下几种表达式来描述时间复杂度：</p>
<ul>
<li>O (1)：常量阶</li>
<li>O (log n)：对数阶</li>
<li>O (n)：线性阶</li>
<li>O (n log n)：线性对数阶</li>
<li>O(n<sup>2</sup>)：二次方阶</li>
<li>O(2<sup>n</sup>)：指数阶</li>
<li>O (!n)：阶乘阶</li>
</ul>
<p>对于一个算法，比如排序一组数据：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>对于这组数据，显然只需要排序一次便能够得到有序数组，但是这并不代表使用的排序算法就是 O (1) 阶的，我们要按照最差的情况来估计，如果是冒泡排序，我们要按照每一次都需要排序来估计，第一次到第 n 次需要的执行的次数分别为 n-1 到 1，所以总执行次数为 n * (n - 1) / 2 也就是 1/2 * n^2 + 1/2 * n - 1/2 次，我们仅取其最大的部分，则冒泡排序的时间复杂度为 O (n<sup>2</sup>) 阶。</p>
<p>冒泡排序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">maoPao</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrLen)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arrLen; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line">	maoPao(arr, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="顺序结构与链式结构"><a class="markdownIt-Anchor" href="#顺序结构与链式结构">#</a> 顺序结构与链式结构：</h1>
<p>存储结构大致可以分为两类：</p>
<ol>
<li><strong>顺序结构：<strong>在</strong>物理内存中连续</strong>，并且在<strong>逻辑顺序上也连续</strong>。</li>
<li><strong>链式结构：<strong>包含</strong>数据域</strong>与<strong>指针域</strong>，在<strong>物理内存中不一定连续</strong>，但在<strong>逻辑顺序上连续</strong>。</li>
</ol>
<p>其中，数据域用于存储数据，指针域用于存储后继元素的地址。</p>
<p>如图：</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304072124933.png" alt="顺序结构与链式结构图"></p>
<p>由图可以直观的看出二者的差别。</p>
<p>顺序结构与链式结构比较：</p>
<p>顺序结构的<strong>数据存储密度更高</strong>，占用空间更少，<strong>但是需要一段连续的空间</strong>。</p>
<p>链式结构由于需要使用指针域保存与其关联的节点的地址，所以<strong>数据存储密度相对低</strong>，占用空间更多，但是由于分布存储的特点，<strong>并不需要一段连续的空间</strong>。</p>
<p>顺序结构的插入与删除更加繁琐，时间复杂度为 O (n)，但是顺序结构的修改，时间复杂度为 O (1)</p>
<p>链式结构的插入与删除，时间复杂度为 O (1)，但是查找数据和修改数据，时间复杂度为 O (n)</p>
<h1 id="线性结构"><a class="markdownIt-Anchor" href="#线性结构">#</a> <mark>线性结构</mark></h1>
<h2 id="线性表"><a class="markdownIt-Anchor" href="#线性表">#</a> 线性表：</h2>
<p><strong>线性表（List）：零个或多个数据元素的有限序列。</strong></p>
<p>线性表的数据集合为 {a1,a2,…,an}，假设每个元素的类型均为 DataType。其中，除第一个元素 a1 外，每一个元素有且只有一个直接前驱元素，除了最后一个元素 an 外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。</p>
<p>在较复杂的线性表中，一个数据元素可以由若干个数据项组成。在这种情况下，常把数据元素称为<strong>记录</strong>，含有大量记录的线性表又称为<strong>文件</strong></p>
<h3 id="线性表-顺序表"><a class="markdownIt-Anchor" href="#线性表-顺序表">#</a> 线性表 - 顺序表</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> &#123;</span></span><br><span class="line">	ElementType data[MAX_SIZE];</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">	<span class="type">int</span> capacity;</span><br><span class="line">&#125;List;</span><br><span class="line"></span><br><span class="line">List* <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">	List* <span class="built_in">list</span> = (List*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List));</span><br><span class="line">	<span class="built_in">list</span>-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">list</span>-&gt;size = MAX_SIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">push_back</span><span class="params">(List* <span class="built_in">list</span>, ElementType value)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;capacity == <span class="built_in">list</span>-&gt;size) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;push error! list is full&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">list</span>-&gt;data[<span class="built_in">list</span>-&gt;capacity] = value;</span><br><span class="line">	<span class="built_in">list</span>-&gt;capacity++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">push_front</span><span class="params">(List* <span class="built_in">list</span>, ElementType value)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;capacity == <span class="built_in">list</span>-&gt;size) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;push error! list is full&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">list</span>-&gt;capacity; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		<span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">list</span>-&gt;data[<span class="number">0</span>] = value;</span><br><span class="line">	<span class="built_in">list</span>-&gt;capacity++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">insert</span><span class="params">(List* <span class="built_in">list</span>, ElementType value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">list</span>-&gt;size)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">list</span>-&gt;capacity; i &gt; index; i--)</span><br><span class="line">		<span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i - <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">list</span>-&gt;data[index] = value;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">pop_back</span><span class="params">(List* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;capacity == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="built_in">list</span>-&gt;data[<span class="built_in">list</span>-&gt;capacity] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="built_in">list</span>-&gt;capacity--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">pop_front</span><span class="params">(List* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;capacity == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;capacity - <span class="number">1</span>; i++)</span><br><span class="line">		<span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i + <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">list</span>-&gt;data[<span class="built_in">list</span>-&gt;capacity] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="built_in">list</span>-&gt;capacity--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">isEmpty</span><span class="params">(List* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;capacity == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(List* <span class="built_in">list</span>, ElementType key)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;capacity; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;data[i] == key)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">pop_by_index</span><span class="params">(List* <span class="built_in">list</span>, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;capacity == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; <span class="built_in">list</span>-&gt;capacity - <span class="number">1</span>; i++)</span><br><span class="line">		<span class="built_in">list</span>-&gt;data[i] = <span class="built_in">list</span>-&gt;data[i + <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">list</span>-&gt;capacity--;</span><br><span class="line">	<span class="built_in">list</span>-&gt;data[<span class="built_in">list</span>-&gt;capacity] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">DestoryList</span><span class="params">(List* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	<span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(List* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>-&gt;capacity; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">list</span>-&gt;data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	List* <span class="built_in">list</span> = initList();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">char</span> c = <span class="number">106</span>; c &gt; <span class="number">96</span>; c--) &#123;</span><br><span class="line">		push_front(<span class="built_in">list</span>, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">char</span> c = <span class="number">107</span>; c &lt; <span class="number">117</span>; c++) &#123;</span><br><span class="line">		push_back(<span class="built_in">list</span>, c);</span><br><span class="line">	&#125;</span><br><span class="line">	insert(<span class="built_in">list</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">	printList(<span class="built_in">list</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	pop_by_index(<span class="built_in">list</span>, find(<span class="built_in">list</span>, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">	pop_by_index(<span class="built_in">list</span>, find(<span class="built_in">list</span>, <span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">	push_front(<span class="built_in">list</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	pop_back(<span class="built_in">list</span>);</span><br><span class="line">	pop_front(<span class="built_in">list</span>);</span><br><span class="line">	printList(<span class="built_in">list</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线性表-单链表"><a class="markdownIt-Anchor" href="#线性表-单链表">#</a> 线性表 - 单链表</h3>
<p>单链表指指针域中<strong>仅仅保存单方向指向后继节点</strong>的指针的链式存储线性表。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	ElementType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Link, Node;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">initLink</span><span class="params">(Link* link)</span> &#123;</span><br><span class="line">	link-&gt;data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	link-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">push_front</span><span class="params">(Link* link, ElementType value)</span> &#123;</span><br><span class="line">	Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	newNode-&gt;data = value;</span><br><span class="line">	newNode-&gt;next = link-&gt;next;</span><br><span class="line">	link-&gt;next = newNode;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">insert</span><span class="params">(Link* link, ElementType value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">	Node* p = link;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;insert error!&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> ERROR;</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	newNode-&gt;data = value;</span><br><span class="line">	newNode-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = newNode;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">pop_front</span><span class="params">(Link* link)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (link-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pop error!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	Node* p = link-&gt;next;</span><br><span class="line">	link-&gt;next = link-&gt;next-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(Link* link, ElementType key)</span> &#123;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (Node* p = link-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;data == key) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">pop_by_index</span><span class="params">(Link* link, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;index error!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	Node* p = link;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;pop error!&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> ERROR;</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (p-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;pop error!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	Node* freeP = p-&gt;next;</span><br><span class="line">	p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(freeP);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Link* link)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (link-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sizeofLink</span><span class="params">(Link* link)</span> &#123;</span><br><span class="line">	<span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (Node* p = link-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">		size++;</span><br><span class="line">	<span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printLink</span><span class="params">(Link* link)</span> &#123;</span><br><span class="line">	Node* p = link-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">getElem</span><span class="params">(Link* link, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;index error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (Node* p = link-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">		<span class="keyword">if</span> (count == index) &#123;</span><br><span class="line">			<span class="keyword">return</span> p-&gt;data;</span><br><span class="line">		&#125;</span><br><span class="line">		count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;not found&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">clearLink</span><span class="params">(Link* link)</span> &#123;</span><br><span class="line">	Node* p = link-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		link-&gt;next = link-&gt;next-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(p);</span><br><span class="line">		p = link-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	link-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	Link* link = (Link*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Link));</span><br><span class="line">	initLink(link);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">122</span>; i &gt; <span class="number">96</span>; i--) &#123;</span><br><span class="line">		push_front(link, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pop_front(link);</span><br><span class="line">	pop_by_index(link, find(link, <span class="string">&#x27;g&#x27;</span>));</span><br><span class="line">	printLink(link);</span><br><span class="line"></span><br><span class="line">	insert(link, <span class="string">&#x27;g&#x27;</span>, find(link, <span class="string">&#x27;h&#x27;</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	printLink(link);</span><br><span class="line"></span><br><span class="line">	clearLink(link);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	printLink(link);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线性表-双链表"><a class="markdownIt-Anchor" href="#线性表-双链表">#</a> 线性表 - 双链表</h3>
<h2 id="栈"><a class="markdownIt-Anchor" href="#栈">#</a> 栈：</h2>
<h3 id="栈-顺序栈"><a class="markdownIt-Anchor" href="#栈-顺序栈">#</a> 栈 - 顺序栈</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> SElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	SElementType* base;<span class="comment">//栈底</span></span><br><span class="line">	SElementType* top;<span class="comment">//栈顶</span></span><br><span class="line">	<span class="type">int</span> stack_capacity;<span class="comment">//栈已存储元素数</span></span><br><span class="line">	<span class="type">int</span> stack_size;<span class="comment">//栈总容量</span></span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line">Stack* <span class="title function_">InitStack</span><span class="params">()</span> &#123;</span><br><span class="line">	Stack* <span class="built_in">stack</span> = (Stack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Stack));</span><br><span class="line">	<span class="built_in">stack</span>-&gt;base = (SElementType*)<span class="built_in">malloc</span>(MAX_SIZE * <span class="keyword">sizeof</span>(SElementType));</span><br><span class="line">	<span class="built_in">stack</span>-&gt;top = <span class="built_in">stack</span>-&gt;base;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;stack_size = MAX_SIZE;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;stack_capacity = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Push</span><span class="params">(Stack* <span class="built_in">stack</span>, SElementType value)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;stack_size == <span class="built_in">stack</span>-&gt;top - <span class="built_in">stack</span>-&gt;base)<span class="comment">//栈满</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	*(<span class="built_in">stack</span>-&gt;top) = value;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;top++;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;stack_capacity++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Pop</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="built_in">stack</span>-&gt;base)<span class="comment">//栈空</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;top--;</span><br><span class="line">	<span class="built_in">stack</span>-&gt;stack_capacity--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SElementType <span class="title function_">GetTop</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="built_in">stack</span>-&gt;base) &#123;<span class="comment">//栈空</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Get Error!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> *(<span class="built_in">stack</span>-&gt;top - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">DestoryStack</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">	<span class="built_in">free</span>(<span class="built_in">stack</span>-&gt;base);</span><br><span class="line">	<span class="built_in">stack</span>-&gt;base = <span class="built_in">stack</span>-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">free</span>(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">stack</span>-&gt;top == <span class="built_in">stack</span>-&gt;base)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintStack</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(<span class="built_in">stack</span>))<span class="comment">//栈空</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span> (SElementType* sp = <span class="built_in">stack</span>-&gt;top - <span class="number">1</span>; sp != <span class="built_in">stack</span>-&gt;base; sp--) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *sp);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	Stack* <span class="built_in">stack</span> = InitStack();</span><br><span class="line">	PrintStack(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">10</span>; c &gt; <span class="number">-1</span>; c--) &#123;</span><br><span class="line">		Push(<span class="built_in">stack</span>, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!isEmpty(<span class="built_in">stack</span>)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, GetTop(<span class="built_in">stack</span>));</span><br><span class="line">		Pop(<span class="built_in">stack</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    DestoryStack(<span class="built_in">stack</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="栈-链栈"><a class="markdownIt-Anchor" href="#栈-链栈">#</a> 栈 - 链栈</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我觉得链栈，就像是只提供头插法和头删法的单链表，是不是我哪里理解错了？？</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElementType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode;<span class="comment">//节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	StackNode* next;</span><br><span class="line">&#125;LinkStack;<span class="comment">//头节点，当作top用</span></span><br><span class="line"></span><br><span class="line">LinkStack* <span class="title function_">InitStack</span><span class="params">()</span> &#123;</span><br><span class="line">	LinkStack* ls = (LinkStack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkStack));</span><br><span class="line">	ls-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> ls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Push</span><span class="params">(LinkStack* ls, ElementType value)</span> &#123;</span><br><span class="line">	StackNode* newNode = (StackNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">	newNode-&gt;data = value;</span><br><span class="line">	newNode-&gt;next = ls-&gt;next;</span><br><span class="line">	ls-&gt;next = newNode;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Pop</span><span class="params">(LinkStack* ls)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (ls-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	StackNode* freeP = ls-&gt;next;</span><br><span class="line">	ls-&gt;next = ls-&gt;next-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(freeP);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ElementType <span class="title function_">GetTop</span><span class="params">(LinkStack* ls)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (ls-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Get Error!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ls-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">IsEmpty</span><span class="params">(LinkStack* ls)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (ls-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">DestoryStack</span><span class="params">(LinkStack* ls)</span> &#123;</span><br><span class="line">	StackNode* freeP = ls-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (freeP != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		ls-&gt;next = ls-&gt;next-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(freeP);</span><br><span class="line">		freeP = ls-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(ls);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	LinkStack* ls = InitStack();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		Push(ls, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (GetTop(ls) != <span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, GetTop(ls));</span><br><span class="line">		Pop(ls);</span><br><span class="line">	&#125;</span><br><span class="line">	DestoryStack(ls);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列"><a class="markdownIt-Anchor" href="#队列">#</a> 队列：</h2>
<h3 id="队列-顺序结构"><a class="markdownIt-Anchor" href="#队列-顺序结构">#</a> 队列 - 顺序结构</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现循环队列</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Element;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 50</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	Element data[MAX_SIZE];</span><br><span class="line">	<span class="type">int</span> front;</span><br><span class="line">	<span class="type">int</span> rear;</span><br><span class="line">&#125;Queue;</span><br><span class="line"></span><br><span class="line">Queue* <span class="title function_">InitQueue</span><span class="params">()</span> &#123;</span><br><span class="line">	Queue* q = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">	q-&gt;front = <span class="number">0</span>;</span><br><span class="line">	q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">SizeofQueue</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> (q-&gt;rear - q-&gt;front + MAX_SIZE) % MAX_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Push</span><span class="params">(Queue* q, Element value)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MAX_SIZE == q-&gt;front)<span class="comment">//如果队满</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	q-&gt;data[q-&gt;rear] = value;</span><br><span class="line">	q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Pop</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear)<span class="comment">//队空</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MAX_SIZE;</span><br><span class="line">    <span class="comment">//使用循环队列，仅需要将头指针后移便可弹出元素，这样就将弹出操作从O(n)变为了O(1)</span></span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Element <span class="title function_">GetHead</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (q-&gt;rear == q-&gt;front) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Get Error!&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> q-&gt;data[q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">ClearQueue</span><span class="params">(Queue* q)</span> &#123;</span><br><span class="line">	q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	Queue* q = InitQueue();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">char</span> c = <span class="number">97</span>; c &lt; <span class="number">124</span>; c++) &#123;</span><br><span class="line">		Push(q, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, GetHead(q));</span><br><span class="line">		Pop(q);</span><br><span class="line">	&#125;</span><br><span class="line">	ClearQueue(q);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="队列-链式结构"><a class="markdownIt-Anchor" href="#队列-链式结构">#</a> 队列 - 链式结构</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Element;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	Element data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;QNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	QNode* front;<span class="comment">//队首指针</span></span><br><span class="line">	QNode* rear;<span class="comment">//队尾指针</span></span><br><span class="line">	<span class="type">int</span> capacity;<span class="comment">//队列内元素数</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line">LinkQueue* <span class="title function_">InitQueue</span><span class="params">()</span> &#123;</span><br><span class="line">	LinkQueue* lq = (LinkQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">	lq-&gt;front = lq-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">	lq-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> lq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Push</span><span class="params">(LinkQueue* lq, Element value)</span> &#123;</span><br><span class="line">	QNode* qNode = (QNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">	qNode-&gt;data = value;</span><br><span class="line">	qNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (lq-&gt;capacity == <span class="number">0</span>) &#123;</span><br><span class="line">		lq-&gt;front = qNode;</span><br><span class="line">		lq-&gt;rear = qNode;</span><br><span class="line">		lq-&gt;capacity++;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	lq-&gt;rear-&gt;next = qNode;</span><br><span class="line">	lq-&gt;rear = qNode;</span><br><span class="line">	lq-&gt;capacity++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">Pop</span><span class="params">(LinkQueue* lq)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (lq-&gt;capacity == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	QNode* freeNode = lq-&gt;front;</span><br><span class="line">	lq-&gt;front = lq-&gt;front-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(freeNode);</span><br><span class="line">	lq-&gt;capacity--;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Element <span class="title function_">GetHead</span><span class="params">(LinkQueue* lq)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (lq-&gt;capacity == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Get Error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> lq-&gt;front-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">DestoryQueue</span><span class="params">(LinkQueue* lq)</span> &#123;</span><br><span class="line">	QNode* freeNode = lq-&gt;front;</span><br><span class="line">	<span class="keyword">while</span> (freeNode != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		lq-&gt;front = lq-&gt;front-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(freeNode);</span><br><span class="line">		freeNode = lq-&gt;front;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(lq);</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	LinkQueue* lq = InitQueue();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">char</span> c = <span class="number">97</span>; c &lt; <span class="number">123</span>; c++) &#123;</span><br><span class="line">		Push(lq, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, GetHead(lq));</span><br><span class="line">		Pop(lq);</span><br><span class="line">	&#125;</span><br><span class="line">	DestoryQueue(lq);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="非线性结构"><a class="markdownIt-Anchor" href="#非线性结构">#</a> <mark>非线性结构</mark></h1>
<h2 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树">#</a> 二叉树</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NODATA 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElementType data;<span class="comment">//数据域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BinaryNode</span>* <span class="title">lchild</span>;</span><span class="comment">//左子节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BinaryNode</span>* <span class="title">rchild</span>;</span><span class="comment">//右子节点</span></span><br><span class="line">&#125;BinaryTree, BinaryNode;</span><br><span class="line"></span><br><span class="line">BinaryNode* <span class="title function_">CreateNode</span><span class="params">()</span> &#123;</span><br><span class="line">	BinaryNode* bn = (BinaryNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinaryNode));</span><br><span class="line">	bn-&gt;data = NODATA;</span><br><span class="line">	bn-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	bn-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> bn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">InitTree</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	bt-&gt;data = NODATA;</span><br><span class="line">	bt-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	bt-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">DestoryTree</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (bt) &#123;<span class="comment">//遍历后序释放</span></span><br><span class="line">		DestoryTree(bt-&gt;lchild);</span><br><span class="line">		DestoryTree(bt-&gt;rchild);</span><br><span class="line">		<span class="built_in">free</span>(bt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">IsEmpty</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (bt-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; bt-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">NodeCount</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> (NodeCount(bt-&gt;lchild) + NodeCount(bt-&gt;rchild) + <span class="number">1</span>);<span class="comment">//返回左子树节点数+右子树节点数+根节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Depth</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (bt == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> m = Depth(bt-&gt;lchild);</span><br><span class="line">	<span class="type">int</span> n = Depth(bt-&gt;rchild);</span><br><span class="line">	<span class="keyword">if</span> (m &gt; n)</span><br><span class="line">		<span class="keyword">return</span> (m + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> (n + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序二叉树插入</span></span><br><span class="line">Status <span class="title function_">InsertTree</span><span class="params">(BinaryTree* bt, ElementType value)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (bt-&gt;data == NODATA) &#123;<span class="comment">//递归终止条件</span></span><br><span class="line">		bt-&gt;data = value;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (bt-&gt;data &gt; value) &#123;<span class="comment">//插入元素小于根元素</span></span><br><span class="line">		<span class="keyword">if</span> (bt-&gt;lchild == <span class="literal">NULL</span>)<span class="comment">//如果无左结点</span></span><br><span class="line">			bt-&gt;lchild = CreateNode();<span class="comment">//创建左结点</span></span><br><span class="line">		InsertTree(bt-&gt;lchild, value);<span class="comment">//左插</span></span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;data &lt; value) &#123;<span class="comment">//如果元素大于根结点</span></span><br><span class="line">		<span class="keyword">if</span> (bt-&gt;rchild == <span class="literal">NULL</span>)<span class="comment">//如果无左结点</span></span><br><span class="line">			bt-&gt;rchild = CreateNode();<span class="comment">//创建右结点</span></span><br><span class="line">		InsertTree(bt-&gt;rchild, value);<span class="comment">//右插</span></span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ERROR;<span class="comment">//元素等于根结点，返回ERROR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">Status <span class="title function_">PushTree</span><span class="params">(BinaryTree* bt, ElementType value)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (bt-&gt;data == NODATA) &#123;</span><br><span class="line">		bt-&gt;data = value;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> l_depth = Depth(bt-&gt;lchild);</span><br><span class="line">	<span class="type">int</span> r_depth = Depth(bt-&gt;rchild);</span><br><span class="line">	<span class="keyword">if</span> (l_depth &lt;= r_depth) &#123;</span><br><span class="line">		<span class="keyword">if</span> (bt-&gt;lchild == <span class="literal">NULL</span>)</span><br><span class="line">			bt-&gt;lchild = CreateNode();</span><br><span class="line">		PushTree(bt-&gt;lchild, value);</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (bt-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">			bt-&gt;rchild = CreateNode();</span><br><span class="line">		PushTree(bt-&gt;rchild, value);</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历部分：</span></span><br><span class="line"><span class="comment">//先序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreorderTraversal</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	<span class="comment">//递归方式遍历</span></span><br><span class="line">	<span class="keyword">if</span> (bt) &#123;<span class="comment">//节点非空</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, bt-&gt;data);<span class="comment">//访问根</span></span><br><span class="line">		PreorderTraversal(bt-&gt;lchild);<span class="comment">//先序遍历左子树</span></span><br><span class="line">		PreorderTraversal(bt-&gt;rchild);<span class="comment">//先序遍历右子树</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InorderTraversal</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	<span class="comment">//递归方式遍历</span></span><br><span class="line">	<span class="keyword">if</span> (bt) &#123;<span class="comment">//节点非空</span></span><br><span class="line">		InorderTraversal(bt-&gt;lchild);<span class="comment">//中序遍历左子树</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, bt-&gt;data);<span class="comment">//访问根</span></span><br><span class="line">		InorderTraversal(bt-&gt;rchild);<span class="comment">//中序遍历右子树</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostorderTraversal</span><span class="params">(BinaryTree* bt)</span> &#123;</span><br><span class="line">	<span class="comment">//递归方式遍历</span></span><br><span class="line">	<span class="keyword">if</span> (bt) &#123;<span class="comment">//节点非空</span></span><br><span class="line">		PostorderTraversal(bt-&gt;lchild);<span class="comment">//后序遍历左子树</span></span><br><span class="line">		PostorderTraversal(bt-&gt;rchild);<span class="comment">//后序遍历右子树</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, bt-&gt;data);<span class="comment">//访问根</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	srand((<span class="type">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	BinaryTree* binary_tree = (BinaryTree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinaryTree));</span><br><span class="line">	InitTree(binary_tree);</span><br><span class="line">	InsertTree(binary_tree, <span class="number">5</span>);</span><br><span class="line">	InsertTree(binary_tree, <span class="number">9</span>);</span><br><span class="line">	InsertTree(binary_tree, <span class="number">2</span>);</span><br><span class="line">	InsertTree(binary_tree, <span class="number">15</span>);</span><br><span class="line">	InsertTree(binary_tree, <span class="number">3</span>);</span><br><span class="line">	<span class="comment">//PushTree(binary_tree, 5);</span></span><br><span class="line">	<span class="comment">//PushTree(binary_tree, 9);</span></span><br><span class="line">	<span class="comment">//PushTree(binary_tree, 2);</span></span><br><span class="line">	<span class="comment">//PushTree(binary_tree, 15); </span></span><br><span class="line">	<span class="comment">//PushTree(binary_tree, 3);</span></span><br><span class="line">	<span class="comment">//PreorderTraversal(binary_tree);</span></span><br><span class="line">	InorderTraversal(binary_tree);</span><br><span class="line">	<span class="comment">//PostorderTraversal(binary_tree);</span></span><br><span class="line">	<span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">	DestoryTree(binary_tree);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="算法"><a class="markdownIt-Anchor" href="#算法">#</a> <mark>算法</mark></h1>
<h2 id="查找"><a class="markdownIt-Anchor" href="#查找">#</a> 查找</h2>
<h3 id="顺序查找"><a class="markdownIt-Anchor" href="#顺序查找">#</a> 顺序查找</h3>
<p>顺序查找是一种十分简单的查找方式，即从第一个数据开始，逐个比对，若查找到目标数据，则返回已查到。若直到结束都未找到，则返回未查找到。</p>
<p>代码逻辑十分简单，这里不再给出代码。</p>
<p>顺序查找的时间复杂度与要找到的数组 (数据库) 长度成线性相关，因此其时间复杂度为 O (n)。</p>
<h3 id="二分查找"><a class="markdownIt-Anchor" href="#二分查找">#</a> 二分查找</h3>
<p>即高中数学中的二分法。</p>
<p>二分查找仅能适用于顺序结构存储的有序数组。</p>
<p>对于有序数组：{21, 24, 64, 74, 83, 215, 456, 982, 7645, 26264};</p>
<p>设置左指针 left=0 指向第一个数 21，右指针 right=10 指向数组尾。</p>
<p>然后取中间值 mid=(left + right) / 2;</p>
<p>如果 arr [mid] 和要查找的目标值相等，则直接返回下标 mid。</p>
<p>如果 arr [mid] 的值大于目标值，那么说明目标值仅可能存在于 arr [mid] 左半侧的数组中 (即小于 arr [mid] 的序列中)。</p>
<p>如果 arr [mid] 的值小于目标值，则说明目标值仅可能存在于 arr [mid] 右半侧的数组中。</p>
<p>这时只需要对于左半侧 (或右半侧) 的数组重复执行上述操作即可。</p>
<p>直到 left 小于 right 时，说明并未查找到目标值，则返回 - 1。</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BinarySearch</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">//其中arr是待查找数组，left是指向左侧的左指针，right是指向右侧的右指针，target是查找目标值</span></span><br><span class="line">    <span class="comment">//取中间值mid</span></span><br><span class="line">	<span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//如果左指针超过右指针，说明target未找到，返回-1</span></span><br><span class="line">	<span class="keyword">if</span> (left &gt; right)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//如果target等于arr[mid]，返回其下标mid</span></span><br><span class="line">	<span class="keyword">if</span> (target == arr[mid])</span><br><span class="line">		<span class="keyword">return</span> mid;</span><br><span class="line">    <span class="comment">//否则递归调用</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (target &lt; arr[mid])</span><br><span class="line">		BinarySearch(arr, left, mid - <span class="number">1</span>, target);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (target &gt; arr[mid])</span><br><span class="line">		BinarySearch(arr, mid + <span class="number">1</span>, right, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过简单的数学知识可以得出，二分查找的时间复杂度为 O (log<sub>2</sub>n)</p>
<h2 id="排序算法"><a class="markdownIt-Anchor" href="#排序算法">#</a> 排序算法</h2>
<h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序">#</a> 冒泡排序</h3>
<p>现有待排序数组：arr [10] = { 64, 215, 21, 7645, 24, 456, 74, 83, 26264, 982 };</p>
<p>每次将 arr [i] 和 arr [i + 1] 进行比较，即前一项和后一项比较，如果前者比后者大，则交换其位置 (升序)，即：</p>
<ol>
<li>64 &lt; 215，不交换</li>
<li>215 &gt; 21，交换为 {64,21,215,7645, 24, 456, 74, 83, 26264, 982};</li>
<li>215 &lt; 7645，不交换</li>
<li>7645 &gt; 24，交换为 {64,21,215,24, 7645, 456, 74, 83, 26264, 982};</li>
</ol>
<p>逐个比较直到最后一个数，这时数组会变成 {64,21,215,24,456,75,83,7645,982,26264};</p>
<p>可以发现，最大的数已经被排到了最后一位，这时不再管最后一个数，将剩余的 9 (n-1) 个数重复上述步骤。</p>
<p>每次都会将第 i 个最大的数排到第 (n - i + 1) 位，当 i=n 时，排序结束。</p>
<p>这样的排序方式，每次都将一个最大 (或最小) 的数排到后面，像是冒泡泡一样，故被称为冒泡排序。</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> arrLen)</span>&#123;</span><br><span class="line">    <span class="comment">//其中arr是数组首地址，arrLen是数组长度</span></span><br><span class="line">    <span class="comment">//使用i控制每次排序的数组长度，令i=arrLen - 1是为了防止j+1越界访问</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arrLen - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">//用j控制遍历数组，并将arr[j]和arr[j + 1]比较</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>冒泡排序每次要遍历的长度为 n,n-1,n-2,n-3…1。</p>
<p>通过等差数列求和公式，可以得出执行次数为 (n+1)*n/2，故冒泡排序是一个时间复杂度为 O (n<sup>2</sup>) 的排序算法。</p>
<h3 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序">#</a> 选择排序</h3>
<p>选择排序是冒泡排序的进阶版本。</p>
<p>可以发现，在冒泡排序中存在着大量的无效交换，如果使用一个下标指针 max，用于记录每次遍历时的最大值，仅在遍历结束时直接将最后一位与最大值进行交换，即可大量减少交换执行的次数。</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> arrLen)</span> &#123;</span><br><span class="line">    <span class="comment">//其中arr是数组首地址，arrLen是数组长度</span></span><br><span class="line">    <span class="comment">//声明max用于记录最大值的下标</span></span><br><span class="line">	<span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//用i作为每次遍历的最后一位</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arrLen - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">//使用j遍历数组</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">//如果有大于arr[max]的值，记录其下标j</span></span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[max])</span><br><span class="line">				max = j;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//将最后一位与arr[max]进行交换</span></span><br><span class="line">		<span class="type">int</span> temp = arr[i];</span><br><span class="line">		arr[i] = arr[max];</span><br><span class="line">		arr[max] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从代码可以看出，相较于冒泡排序，选择排序在比较方面并未做出优化，仅优化了交换的代码。</p>
<p>因此选择排序也是一个时间复杂度为 O (n<sup>2</sup>) 的排序算法。</p>
<h3 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序">#</a> 插入排序</h3>
<p>插入排序类似于打牌时，整理手牌的过程。</p>
<p>始终维持一个已经排序好的数组，然后从未排序好的数组中抽一个数，将其插入到已排序数组中的合适位置。</p>
<p>插入时又可以将插入方式分为直接插入 (即从头开始逐个比对，查找合适的位置)，和二分插入 (使用二分查找的方式找到一个合适的位置进行插入)。</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接插入排序，二分插入的代码不再给出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrLen)</span> &#123;</span><br><span class="line">	<span class="comment">//用index记录要操作的数的下标，currentValue记录要操作的数的值</span></span><br><span class="line">	<span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> currentValue;</span><br><span class="line">	<span class="comment">//将arr[0]作为一个有序数组存在，所以i从1开始</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">		<span class="comment">//记录操作的值和操作值的下标</span></span><br><span class="line">		currentValue = arr[i];</span><br><span class="line">		index = i;</span><br><span class="line">		<span class="comment">//保证index &gt; 0，如果arr[index - 1]大于当前值，那么把当前值向前排</span></span><br><span class="line">		<span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; arr[index - <span class="number">1</span>] &gt; currentValue) &#123;</span><br><span class="line">			<span class="comment">//将有序数组向后移动</span></span><br><span class="line">			arr[index] = arr[index - <span class="number">1</span>];</span><br><span class="line">			<span class="comment">//下标前移</span></span><br><span class="line">			index--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//退出循环时，index所指向的位置即当前值应该插入的位置</span></span><br><span class="line">		arr[index] = currentValue;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>插入排序最好的情况是仅有比对，而自身并不移动，最差的情况是从最后一位比对到第一位，并全部都要后移。</p>
<p>时间复杂度为 O (n<sup>2</sup>)。</p>
<h3 id="谢尔排序希尔排序"><a class="markdownIt-Anchor" href="#谢尔排序希尔排序">#</a> 谢尔排序 (希尔排序)</h3>
<p>谢尔排序又名 &quot;缩小增量排序&quot;，是插入排序的一种。</p>
<p>当待排序的记录个数较少 (比较次数少)，并且待排序的序列基本有序时 (移动次数少)，直接插入排序的效率较高。</p>
<p>希尔排序基于以上两点，从 “减少记录个数” 和 “序列基本有序” 两个方面对直接插入排序进行了改进。</p>
<p>现有待排序数组：arr [10] = { 64, 215, 21, 7645, 24, 456, 74, 83, 26264, 982 };</p>
<p>首先设增量 n 为 4，那么把所有间隔为 4 的数字分为一组，可以得到 4 个数组：</p>
<ol>
<li>{ 64, 24, 26264 };</li>
<li>{ 215, 456, 982 };</li>
<li>{ 21, 74 };</li>
<li>{ 7645, 83 };</li>
</ol>
<p>然后分别对其进行直接插入排序，最后得到的结果为：</p>
<p>{ 24, 215, 21, 83, 64, 456, 74, 7645, 26264, 982 };</p>
<p>可以发现，相较于一开始的序列，这个序列更有序一些，可以达到减少移动次数的目的。</p>
<p>而对于 4 个数组进行排序时，每个数组的记录个数比原数组也更少，可以达到减少记录个数的目的。</p>
<p>然后将增量 n 减少为 2，那么把所有间隔为 2 的数字分为一组，可以得到 2 个数组：</p>
<ol>
<li>{ 24, 21, 64, 74, 26264 };</li>
<li>{ 215, 83, 456, 7645, 982 };</li>
</ol>
<p>然后对其进行直接插入排序。重复这一步骤，直到 n 缩小为 1 时，序列已经基本有序，在执行直接插入排序时便会更快一些。</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GapInsertSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrLen, <span class="type">int</span> start, <span class="type">int</span> gap)</span> &#123;</span><br><span class="line">	<span class="comment">//谢尔排序的辅助函数，用于插入排序被划分出的小数组，其中gap为增量n</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = start + gap; i &lt; arrLen; i += gap) &#123;</span><br><span class="line">		<span class="comment">//因为要对间隔为gap的数组进行插入排序，所以每个操作数相隔gap</span></span><br><span class="line">		<span class="comment">//即在分隔出来的数组中，start是0，gap是1，每次操作后i++即为i+=gap</span></span><br><span class="line">		<span class="type">int</span> currentValue = arr[i];</span><br><span class="line">		<span class="type">int</span> index = i;</span><br><span class="line">		<span class="comment">//index &gt;= gap保证下标不越界，效果等同于index &gt; 0</span></span><br><span class="line">		<span class="comment">//arr[index - gap] &gt; currentValue用于比较和查找当前值的插入位置</span></span><br><span class="line">		<span class="keyword">while</span> (index &gt;= gap &amp;&amp; arr[index - gap] &gt; currentValue) &#123;</span><br><span class="line">			<span class="comment">//移动数组</span></span><br><span class="line">			arr[index] = arr[index - gap];</span><br><span class="line">			index = index - gap;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//退出循环时，index所指向的位置即当前值应该插入的位置</span></span><br><span class="line">		arr[index] = currentValue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShellSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrLen)</span> &#123;</span><br><span class="line">	<span class="type">int</span> n = arrLen / <span class="number">2</span>;<span class="comment">//将增量设置为数组长度/2</span></span><br><span class="line">	<span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;<span class="comment">//增量减小致0时结束排序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> start = <span class="number">0</span>; start &lt; n; start++)</span><br><span class="line">			GapInsertSort(arr, arrLen, start, n);<span class="comment">//使用该函数排序被分割出的数组</span></span><br><span class="line">		n /= <span class="number">2</span>;<span class="comment">//将增量除以2</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，谢尔排序的时间复杂度并不稳定，它不仅与数组长度 arrLen 相关，还与分隔子数组时选择的增量 n 相关。</p>
<p>关于增量序列的选择问题，涉及到数学上的一些相关问题，目前还未得到解决。因此，现金并不存在一种最好的增量序列。</p>
<p>有人在大量的实验基础上推出：当 n 在某个特定范围内，谢尔排序所需的比较和移动次数约为 n<sup>1.3</sup>，当 n 趋于正无穷时，比较和移动次数可以减少到 n (log<sub>2</sub>n)<sup>2</sup></p>
<h3 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序">#</a> 快速排序</h3>
<p>快速排序，我也将其称为中值排序。</p>
<p>现有待排序数组：arr [10] = { 64, 215, 21, 7645, 24, 456, 74, 83, 26264, 982 };</p>
<p>首先选取一个数作为中值，这里选择 arr [0]，也就是 64 作为中值</p>
<p>然后设置左标指向序列最左侧，右标指向序列最右侧，然后执行如下操作：</p>
<ol>
<li>将左标右移，并在移动的过程中将其指向的数与选定的中值比较，遇到大于中值的数时停止。</li>
<li>将右标左移，并在移动的过程中将其指向的数与选定的中值比较，遇到小于中值的数时停止。</li>
<li>将左标与右标所指向的值进行交换，随后重复 1，2。</li>
<li>当左标超过右标时，此刻右标所指的位置，即中值应该存储的位置，将中值与其交换。</li>
</ol>
<p>这样就将中值放在了 &quot;中间&quot; 的位置，而中值左侧都是小于中值的数，右侧都是大于中值的数。</p>
<p>以中值为界限，将其分为两个数组重复上述操作，直到数组不能再分裂。</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">GetMidIndex</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">	<span class="type">int</span> midValue = arr[left];<span class="comment">//选则数组的首个元素作为中值</span></span><br><span class="line">	<span class="type">int</span> startIndex = left;<span class="comment">//记录中值当前下标，便于交换时使用</span></span><br><span class="line">	left++;<span class="comment">//左标，中值不需要和自己比较，所以把中值先排除掉</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">//1.将左标右移，并在移动的过程中将其指向的数与选定的中值比较，遇到大于中值的数时停止。</span></span><br><span class="line">		<span class="keyword">while</span> (left &lt;= right &amp;&amp; arr[left] &lt;= midValue) left++;</span><br><span class="line">		<span class="comment">//2.将右标左移，并在移动的过程中将其指向的数与选定的中值比较，遇到小于中值的数时停止。</span></span><br><span class="line">		<span class="keyword">while</span> (right &gt;= left &amp;&amp; arr[right] &gt;= midValue) right--;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//3.如果左标大于右标，结束循环，否则将左标与右标所指向的值进行交换，然后重复1,2。</span></span><br><span class="line">		<span class="keyword">if</span> (right &lt; left) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> temp = arr[left];</span><br><span class="line">			arr[left] = arr[right];</span><br><span class="line">			arr[right] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4.循环结束时，左标超过右标，此刻右标所指的位置，即中值应该存储的位置，将中值与其交换。</span></span><br><span class="line">	arr[startIndex] = arr[right];</span><br><span class="line">	arr[right] = midValue;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//返回中值下标</span></span><br><span class="line">	<span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">		<span class="comment">//选取中值进行排序，然后获取到中值的下标</span></span><br><span class="line">		<span class="type">int</span> mid_index = GetMidIndex(arr, left, right);</span><br><span class="line">		<span class="comment">//以中值为界限，分裂，递归调用快速排序处理左侧数组</span></span><br><span class="line">		QuickSort(arr, left, mid_index - <span class="number">1</span>);</span><br><span class="line">		<span class="comment">//以中值为界限，分裂，递归调用快速排序处理右侧数组</span></span><br><span class="line">		QuickSort(arr, mid_index + <span class="number">1</span>, right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现，如果每次选取的首个元素都是真正的中值，能够正好将数组等分为两个等长的数组，是最好的情况，此时类似于二分查找。给选取中值查找合适位置的时间复杂度为 O (n)，快速排序的时间复杂度为 O (n log<sub>2</sub>n)。</p>
<p>最差的情况下，假如每次选取的首个元素，实际上是数组中的最大值 (或最小值)，每次都将数组划分为左侧长度为 0，右侧长度为 n-1 (或者右侧长度为 0，左侧长度为 n-1) 的数组，那么快速排序的时间复杂度将退化为 O (n<sup>2</sup>)，而且因为算法中使用到递归调用，实际的时间消耗甚至超越冒泡排序。</p>
<p>平均情况下，快速排序是一个时间复杂度为 O (n log<sub>2</sub>n) 的排序算法。但它并不稳定。</p>
<h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序">#</a> 堆排序</h3>
<p>堆排序是一种树形选择排序，排序过程中，可以将待排序数组看作是一个完全二叉树的顺序存储结构。</p>
<p>对于二叉树模型，如果根节点的数据大于两个子节点的数据，那么将其称之为大顶堆 (大根堆)。</p>
<p>反之，如果根节点的数据小于两个子节点的数据，那么将其称之为小顶堆 (小根堆)。如图：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306181543770.png" alt="image-20230618154322648"></p>
<p>对于完全二叉树，有如下性质 (下标按照层次序列)：</p>
<ol>
<li>下标为 i 的节点的根节点下标：(i -  1) / 2</li>
<li>下标为 i 的节点的左子节点下标：i * 2 + 1</li>
<li>下标为 i 的节点的右子节点下标：i * 2 + 2</li>
</ol>
<p>现有待排序数组：arr [10] = { 64, 215, 21, 7645, 24, 456, 74, 83, 26264, 982 };</p>
<p>首先将其构造成完全二叉树：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306181554791.png" alt="image-20230618155446737"></p>
<p>然后将其调整为大顶堆：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306181633758.png" alt="image-20230618155849501"></p>
<p>此时最大值 26264 已经被交换至根节点，将其输出，然后将 24 交换到根节点处。</p>
<p>然后排除掉已经输出了的 26264。</p>
<p>之所以将 24 交换上去，是为了保证输出 26264 后的数组仍然可以组成完全二叉树。</p>
<p>所以交换至根节点的元素选择，需要保证从下到上，从右到左，这样才能不破坏完全二叉树。</p>
<p>重复构成大顶堆 (或小顶堆)，然后输出，交换，直到结束。</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HeapAdjust</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrLen, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">	<span class="comment">//其中arr为数组，arrLen为数组长度，index为待维护的值的下标</span></span><br><span class="line">	<span class="type">int</span> max_index = index;<span class="comment">//假设当前维护值就是最大值</span></span><br><span class="line">	<span class="type">int</span> l_child = index * <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//其左子节点的下标</span></span><br><span class="line">	<span class="type">int</span> r_child = index * <span class="number">2</span> + <span class="number">2</span>;<span class="comment">//其右子节点的下标</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//如果左子节点的值更大，则将max下标指向左子节点</span></span><br><span class="line">	<span class="comment">//如果右子节点的值更大，则将max下标指向右子节点</span></span><br><span class="line">	<span class="keyword">if</span> (l_child &lt; arrLen &amp;&amp; arr[max_index] &lt; arr[l_child])</span><br><span class="line">		max_index = l_child;</span><br><span class="line">	<span class="keyword">if</span> (r_child &lt; arrLen &amp;&amp; arr[max_index] &lt; arr[r_child])</span><br><span class="line">		max_index = r_child;</span><br><span class="line">	<span class="keyword">if</span> (max_index != index) &#123;</span><br><span class="line">		<span class="comment">//如果max_index已经改变，说明根节点的值并非最大值，需要进行交换</span></span><br><span class="line">		<span class="type">int</span> temp = arr[index];</span><br><span class="line">		arr[index] = arr[max_index];</span><br><span class="line">		arr[max_index] = temp;</span><br><span class="line">		<span class="comment">//为了保证交换后，下面的子堆也符合大顶堆的性质，需要进行递归调用</span></span><br><span class="line">		HeapAdjust(arr, arrLen, max_index);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> arrLen)</span> &#123;</span><br><span class="line">	<span class="comment">//建堆</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arrLen / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		HeapAdjust(arr, arrLen, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//排序</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arrLen - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="comment">//大顶堆的堆顶与最后一个元素进行交换</span></span><br><span class="line">		<span class="type">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">		arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">		arr[i] = temp;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//交换后维护堆，保证仍然是大顶堆</span></span><br><span class="line">		HeapAdjust(arr, i, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>堆排序的时间复杂度为 O (n log<sub>2</sub>n)，其中：</p>
<ol>
<li>建堆复杂度为 O (n)</li>
<li>维护堆 (HeapAdjust) 复杂度为 O (log<sub>2</sub>n)</li>
<li>堆排序对 n 个数进行维护</li>
</ol>
<p>堆排序的并不是一个稳定的排序算法</p>
<h3 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序">#</a> 归并排序</h3>
<p>归并排序就是将两个或两个以上的有序表合并成一个有序表的过程。将两个有序表合并成一个有序表的过程称为 2 路归并，2 路归并最为简单和常用。</p>
<p>现有待排序数组：arr [10] = { 64, 215, 21, 7645, 24, 456, 74, 83, 26264, 982 };</p>
<p>我们将其分为逐个的单独元素 {64};{215};{21};{7645};{24};{456};{74};{83};{26264};{982}; 此时，划分的每个数组已经排序完毕，因为仅有 1 个数时无需排序。</p>
<p>然后已经排序好的数组两两合并，再次排序：{64, 215};{21, 7645};{24, 456};{74, 83};{982, 26264};</p>
<p>重复上述操作：{21, 64, 215, 7645};{24, 74, 83, 456};{982, 26264};</p>
<p>继续归并：{21, 24, 64, 74, 83, 456, 7645};{982, 26264};</p>
<p>最后得到结果：{21, 24, 64, 74, 83, 456, 982, 7645, 26264};</p>
<p>使用 C 语言实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Merge</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> mid, <span class="type">int</span> arrLen)</span> &#123;</span><br><span class="line">	<span class="comment">//归并函数</span></span><br><span class="line">	<span class="type">int</span>* temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * arrLen);<span class="comment">//因为要用到动态数组，所以申请内存</span></span><br><span class="line">	<span class="type">int</span> i = left;<span class="comment">//左序列指针</span></span><br><span class="line">	<span class="type">int</span> j = mid + <span class="number">1</span>;<span class="comment">//右序列指针</span></span><br><span class="line">	<span class="type">int</span> k = <span class="number">0</span>;<span class="comment">//临时数组指针</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">		<span class="comment">//拉链式交错把左右半部从小归到大归并到temp中</span></span><br><span class="line">		<span class="keyword">if</span> (arr[i] &lt;= arr[j])</span><br><span class="line">			temp[k++] = arr[i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			temp[k++] = arr[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//归并左半部剩余的部分</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt;= mid) </span><br><span class="line">		temp[k++] = arr[i++];</span><br><span class="line">	<span class="comment">//归并右半部剩余的部分</span></span><br><span class="line">	<span class="keyword">while</span> (j &lt;= right) </span><br><span class="line">		temp[k++] = arr[j++];</span><br><span class="line">	<span class="comment">//temp指针归0</span></span><br><span class="line">	k = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//将temp排序后的结果填入到arr中</span></span><br><span class="line">	<span class="keyword">while</span> (left &lt;= right)</span><br><span class="line">		arr[left++] = temp[k++];</span><br><span class="line">	<span class="built_in">free</span>(temp);<span class="comment">//释放内存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (left &lt; right)&#123;</span><br><span class="line">		<span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">		<span class="comment">//分裂左子数组</span></span><br><span class="line">		MergeSort(arr, left, mid);</span><br><span class="line">		<span class="comment">//分裂右子数组</span></span><br><span class="line">		MergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">		<span class="comment">//将结果归并</span></span><br><span class="line">		Merge(arr, left, right, mid, right - left + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>归并排序的时间复杂度为 O (n log<sub>2</sub>n)</p>
<h3 id="各种排序算法的比较"><a class="markdownIt-Anchor" href="#各种排序算法的比较">#</a> 各种排序算法的比较</h3>
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">最好情况</th>
<th style="text-align:center">最坏情况</th>
<th style="text-align:center">平均情况</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">冒泡排序</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">选择排序</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">直接插入排序</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">二分插入排序</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">稳定</td>
</tr>
<tr>
<td style="text-align:center">谢尔排序</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">O(n<sup>1.3</sup>)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">快速排序</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(n<sup>2</sup>)</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">堆排序</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">不稳定</td>
</tr>
<tr>
<td style="text-align:center">归并排序</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(nlog<sub>2</sub>n)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">稳定</td>
</tr>
</tbody>
</table>
<p>其中冒泡排序，可以在排序时添加变量 exchange，用于记录遍历过程中是否发生交换，如果某次遍历中并未发生一次交换，说明数组已经有序，可以提前结束排序。最好情况下初始数组便是有序的，则只需一次遍历就可以结束，故最好情况时间复杂度是 O (n)。</p>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>DataStructure</tag>
        <tag>Algorithms</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言基础</title>
    <url>/2023/02/20/C-Foundation/</url>
    <content><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言</h1>
<p>C 是我第一门系统性学习的高级语言，学习中笔记比较混乱，现在对编程有了更深的理解，所以我决定重置 C 语言的笔记，尽量写成一个零基础可以看着入门的笔记。</p>
<p>本笔记开发环境为 Visual Studio 2022</p>
<h2 id="开发环境部署"><a class="markdownIt-Anchor" href="#开发环境部署">#</a> <strong>开发环境部署：</strong></h2>
<p>开发时所使用的工具被称为<strong> IDE (Integrated Development Environment)</strong>，集成开发环境。</p>
<p>之所以叫集成开发环境，是因为其一般集成了，代码编辑，测试运行等多项功能。</p>
<p>搜索并安装<strong> Visual Studio 2022 社区版</strong>（<a href="https://visualstudio.microsoft.com/zh-hans/vs/">官网</a>），获取到 Visual Studio Installer</p>
<p>点击勾选 (使用 C++ 的桌面开发)，点击安装</p>
<h1 id="c语言简介"><a class="markdownIt-Anchor" href="#c语言简介">#</a> C 语言简介</h1>
<p>C 语言是一种高级语言，相较于 C 语言，还有更贴近底层的汇编语言，与底层的机器语言。</p>
<p>C 语言是由丹尼斯・麦卡利斯泰尔・里奇 (Dennis MacAlistair Ritchie) 在贝尔电话实验室工作时设计的。</p>
<p>C 语言是一门面向过程式的计算机程序设计语言。</p>
<h1 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world">#</a> Hello World</h1>
<p>打开安装好的 VS2022，点击创建新项目</p>
<p>选择空项目，语言为 C++。项目名称自定，位置自定，点击创建。</p>
<p>在右侧找到解决方案资源管理器，右键点击源文件 -&gt; 添加 -&gt; 新建项。</p>
<p>修改文件名为 FirstProgram.c</p>
<p>在左侧窗口中写入如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按下 F5，或者点击窗口上方的本地 Windows 调试器运行第一个程序。</p>
<p><mark><strong>！！注意！！</strong></mark></p>
<p><mark><strong>代码中所有的符号，都需要使用英文输入法输入！(以后所有代码都是！)</strong></mark></p>
<h2 id="注释"><a class="markdownIt-Anchor" href="#注释">#</a> 注释</h2>
<p>注释，即对代码的注解，以第一个程序为例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释1</span></span><br><span class="line"><span class="comment">多行注释2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);<span class="comment">//在控制窗口打印字符串&quot;Hello World&quot;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注释有利于别人阅读代码，也有利于自己长时间之后复读自己的代码。</p>
<p>IDE 会忽略被注释的内容，并不将其作为代码处理。</p>
<p><strong>C 语言中的注释有两种：</strong></p>
<p>第一种为双斜杠的单行注释，如 printf 后的注释内容</p>
<p>第二种为 /**/ 的多行注释，如上面代码的多行注释</p>
<h1 id="位bit与字节byte"><a class="markdownIt-Anchor" href="#位bit与字节byte">#</a> 位 (bit) 与字节 (byte)</h1>
<p>在日常使用计算机的时候，我们通常会看到一些数据单位，如 kb,MB,GB 等</p>
<p>其中 kb 指的是 kilo byte (千字节)，mb 指的是 mega byte (兆字节)。诸如此类的还有 TB,PB,EB 等。</p>
<p>计算机是电子产品，对其来说，只存在开路 (0) 与闭路 (1)</p>
<p>我们将一个最基础的单位 (0 或 1) 称为位 (bit)，将 8 个位合在一起称为一个字节 (byte)。</p>
<p>当我需要将整数 8 存入计算机时，8 会被转换为二进制数 1000 被存入到内存中。</p>
<p>这在 C 语言中，通常会占用 4 个字节，也就是 32 位。</p>
<h1 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> <mark>数据类型</mark></h1>
<h2 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型">#</a> 基本数据类型：</h2>
<p>基本数据类型包括：</p>
<p><strong>数值类型：</strong></p>
<ul>
<li>整型</li>
<li>浮点型</li>
</ul>
<p><strong>字符类型 (char)</strong></p>
<p>其中整型包括：短整型 (short)、整型 (int)、长整型 (long)</p>
<p>其中浮点型包括：单精度型 (float)、双精度型 (double)</p>
<p><strong>整型，即为整数。  浮点型，即为小数。</strong></p>
<p><strong>短整型、整型与长整型的差距在于其存储时，占用的字节数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">字节数</th>
<th style="text-align:center">存储数值的范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">-2^15, 2^15-1</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-2^31, 2^31-1</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-2^63, 2^63-1</td>
</tr>
</tbody>
</table>
<p>这是大致的内存占用情况，需要注意的是，这些数据类型在不同的系统上，会占用不同的字节数，而非固定。</p>
<p>通过类型占用的字节数，可以计算出其存储数值范围。</p>
<p>例如：int 是 4 个字节，也就是 32 位，因为其存储的是二进制数，所以理论上范围应该是 [-2^32，2^32 - 1] 但第一位要用于存储其符号，也就是数值是正还是负，所以占用了一个位，则其范围变为 [-2^31，2^31 - 1]，正数范围需要减一是为了存储 0</p>
<p><strong>单精度浮点型与双精度浮点型的区别：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">存储数值的范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-3.4*10^38, 3.4*10^38</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-1.7*10^308, 1.7*10^308</td>
</tr>
</tbody>
</table>
<p>其中单精度浮点数可以存储到小数点后 6 位数字，而双精度浮点数可以存储到小数点后 15 位数字。</p>
<p>打印时，默认保留 6 位小数</p>
<h2 id="布尔类型"><a class="markdownIt-Anchor" href="#布尔类型">#</a> 布尔类型</h2>
<p>需要注意，C 语言并没有布尔类型，但是程序中经常会用到布尔类型，因此我在这里单独拿出来使用</p>
<p>在 C89 标准时，C 语言没有布尔类型，在后来的 C99 标准时，才引入了布尔类型。</p>
<hr>
<p>布尔类型是只有两种值的数据类型，包含真 (True) 与假 (False)</p>
<p>在 C 语言中，通常使用 0 作为布尔类型的 False，非 0 作为布尔类型的 True</p>
<h2 id="构造类型"><a class="markdownIt-Anchor" href="#构造类型">#</a> 构造类型</h2>
<p>构造类型包括：</p>
<ul>
<li>数组 (array)</li>
<li>结构体 (struct)</li>
<li>共用体 (union)</li>
<li>枚举类型 (enum)</li>
</ul>
<p>这四种类型会在后面讲到。</p>
<h2 id="指针类型"><a class="markdownIt-Anchor" href="#指针类型">#</a> 指针类型</h2>
<p>指针类型通常占用 4 个字节，存储十六进制数，用于保存地址值，具体会在指针的部分讲到。</p>
<h2 id="空类型"><a class="markdownIt-Anchor" href="#空类型">#</a> 空类型</h2>
<p>型如其名，空 (void)</p>
<h1 id="变量"><a class="markdownIt-Anchor" href="#变量">#</a> <mark>变量</mark></h1>
<h2 id="声明变量与赋值"><a class="markdownIt-Anchor" href="#声明变量与赋值">#</a> 声明变量与赋值：</h2>
<p>创建一个新的源文件，并将先前的第一个程序全部注释掉：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> var1;<span class="comment">//声明一个整型变量</span></span><br><span class="line">    var1 = <span class="number">0</span>;<span class="comment">//给var1赋值</span></span><br><span class="line">    <span class="type">float</span> var2 = <span class="number">0.123f</span>;<span class="comment">//声明并初始化一个单精度浮点型变量</span></span><br><span class="line">    <span class="type">double</span> var3 = <span class="number">0.123456</span>;<span class="comment">//声明并初始化一个双精度浮点型变量</span></span><br><span class="line">    <span class="type">char</span> var4 = <span class="string">&#x27;c&#x27;</span>;<span class="comment">//声明并初始化一个字符型变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%f,%lf,%c&quot;</span>, var1, var2, var3, var4);<span class="comment">//使用占位符%d,%f,%lf与%c输出相应变量。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明变量，即创建一个变量，然后使用 = 为其赋值。</p>
<p><strong>注意：赋值行为是将等号右边的数值分配给等号左边的变量，不能写反！</strong></p>
<p>第一次给变量赋值的行为，被叫做<strong>初始化</strong>，声明与初始化可以写在同一行，如 var2 与 var3</p>
<p><strong>注意 2：请不要在未初始化的情况下调用变量，会导致程序错误！</strong></p>
<p>IDE 会默认浮点数为双精度浮点数，在浮点数后面添加 f (或 F)，标志其为单精度浮点数 (也可以不加)。</p>
<p>打印时，使用占位符进行占位，占位符与后面的变量需要一一对应。其中 % d 为整型的占位符，% f 为单精度浮点型的占位符，% lf 为双精度浮点型的占位符。</p>
<h2 id="变量名"><a class="markdownIt-Anchor" href="#变量名">#</a> 变量名：</h2>
<p>变量命名时需要遵循一定的规则：</p>
<ul>
<li>变量名只能包含字母、数字、下划线和 $</li>
<li>变量名只能以字母、下划线或者 $ 开头</li>
<li>变量名不能使用关键字</li>
<li>变量名严格区分大小写</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="type">int</span> <span class="number">123</span>abc;<span class="comment">//这是一个不符合语法的变量声明，会导致报错！</span></span><br><span class="line"><span class="type">int</span> <span class="type">int</span>;<span class="comment">//这是一个非法声明！</span></span><br><span class="line"><span class="type">int</span> 变量;<span class="comment">//非法声明！</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> var;<span class="comment">//合法声明</span></span><br><span class="line"><span class="type">int</span> _var;<span class="comment">//合法声明</span></span><br><span class="line"><span class="type">int</span> $var;<span class="comment">//合法声明</span></span><br><span class="line"><span class="type">int</span> VAR;<span class="comment">//合法声明，但需要注意，VAR不等于var</span></span><br></pre></td></tr></table></figure>
<p><strong>关键字：C 语言使用到的单词，例如：int,float,void 等，在起变量名或者函数名时需要避开。</strong></p>
<p>关键字并不需要记忆，在 VS2022 中，当使用到关键字时，会被特殊的颜色标出。</p>
<hr>
<p>除了必要的语法外，我们在日常编程中也有一些默认规则。</p>
<ul>
<li>变量名要做到见名知意</li>
<li>变量名遵循驼峰法，或者下划线法</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="type">int</span> var;<span class="comment">//var是variable(变量)的缩写</span></span><br><span class="line"><span class="type">int</span> count;<span class="comment">//count(计数)，通常用于计数</span></span><br><span class="line"><span class="type">int</span> sum;<span class="comment">//sum(和)，通常用于求和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的变量名，看到名字便知道其作用。</span></span><br><span class="line"><span class="comment">//需要使用两个及以上的单词去描述变量时，通常使用驼峰法或下划线法命名</span></span><br><span class="line"><span class="comment">//驼峰法即：单词的首字母大写，如：</span></span><br><span class="line"><span class="type">int</span> studentId;<span class="comment">//学号</span></span><br><span class="line"><span class="type">char</span> studentAddress;<span class="comment">//学生家庭地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下划线法即：使用下划线分割单词，如：</span></span><br><span class="line"><span class="type">int</span> student_name;<span class="comment">//学生姓名</span></span><br><span class="line"><span class="type">int</span> student_class;<span class="comment">//学生班级</span></span><br></pre></td></tr></table></figure>
<p>驼峰法与下划线法的选择看个人喜好。</p>
<h1 id="运算符"><a class="markdownIt-Anchor" href="#运算符">#</a> <mark>运算符</mark></h1>
<p>需要注意，运算符区分优先级，大致为：</p>
<p>数值运算符 &gt; 比较运算符 &gt; 逻辑运算符 (不绝对)</p>
<p>其中逻辑运算符中！&gt; &amp;&amp; &gt; ||</p>
<p>具体优先级可以自行搜索</p>
<h2 id="数值运算符"><a class="markdownIt-Anchor" href="#数值运算符">#</a> 数值运算符</h2>
<p>C 语言中提供一些数值运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">赋值运算符，将等号右侧的值赋给等号左边的变量</td>
<td style="text-align:center">var = 10</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加运算符</td>
<td style="text-align:center">var = 1 + 2</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减运算符</td>
<td style="text-align:center">var = 2 - 1</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">乘运算符</td>
<td style="text-align:center">var = 5 * 10</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">除运算符</td>
<td style="text-align:center">var = 10 / 5</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">求余数运算符</td>
<td style="text-align:center">var = 11 % 5 (var 的值为 1)</td>
</tr>
<tr>
<td style="text-align:center">+=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var + 10</td>
<td style="text-align:center">var += 10</td>
</tr>
<tr>
<td style="text-align:center">-=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var - 10</td>
<td style="text-align:center">var -= 10</td>
</tr>
<tr>
<td style="text-align:center">*=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var * 10</td>
<td style="text-align:center">var *= 10</td>
</tr>
<tr>
<td style="text-align:center">/=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var / 10</td>
<td style="text-align:center">var /= 10</td>
</tr>
<tr>
<td style="text-align:center">%=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var % 10</td>
<td style="text-align:center">var %= 10</td>
</tr>
<tr>
<td style="text-align:center">++</td>
<td style="text-align:center">自增运算，相当于 var = var + 1</td>
<td style="text-align:center">var++(或者 ++var)</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">自减运算，相当于 var = var - 1</td>
<td style="text-align:center">var–(或者–var)</td>
</tr>
</tbody>
</table>
<p><strong>注意：var++ 与 ++var 使用方式并不相同，var-- 与 --var 同样</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> var = <span class="number">1</span>;<span class="comment">//声明并初始化整型变量var</span></span><br><span class="line">    </span><br><span class="line">    var += <span class="number">10</span>;<span class="comment">//加运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var -= <span class="number">10</span>;<span class="comment">//减运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var *= <span class="number">10</span>;<span class="comment">//乘运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var /= <span class="number">10</span>;<span class="comment">//除运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var = <span class="number">11</span>;<span class="comment">//求余运算示例</span></span><br><span class="line">    var %= <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var++);<span class="comment">//后++示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ++var);<span class="comment">//前++示例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上述代码，可以发现打印结果为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span>	<span class="comment">//加法示例打印，var为1，var+=10即为var=var+10，所以结果为11</span></span><br><span class="line"><span class="number">1</span>	<span class="comment">//减法示例打印，var此时为11，var-=10即为var=var-10，所以结果为1</span></span><br><span class="line"><span class="number">10</span>  <span class="comment">//乘法示例打印，var此时为1，var*=10即为var=var*10，所以结果为10</span></span><br><span class="line"><span class="number">1</span>   <span class="comment">//除法示例打印，var此时为10，var/=10即为var=var/10，所以结果为1</span></span><br><span class="line"><span class="number">1</span>   <span class="comment">//求余示例打印，计算前给var赋值为11，所以var此时为11，var%=10即为var=var%10，所以结果为1</span></span><br><span class="line"><span class="number">1</span>   <span class="comment">//后++示例</span></span><br><span class="line"><span class="number">3</span>   <span class="comment">//前++示例</span></span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是后 ++ 与前 ++ 的区分：</strong></p>
<p><strong>使用后 ++ 时，是首先使用变量 var，再进行自增，所以当 var=1 时，使用 var++ 进行打印，首先使用 var 打印出 1，然后对其进行自增，则 var=2.</strong></p>
<p><strong>使用前 ++ 时，是首先自增，再使用变量 var，所以当 var=2 时，使用 ++var 进行打印，首先自增，使 var 变为 3，然后对 var 进行打印，打印出数字 3.</strong></p>
<h2 id="比较运算符"><a class="markdownIt-Anchor" href="#比较运算符">#</a> 比较运算符</h2>
<p>C 语言中提供一些比较运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">判断左值是否小于右值，返回布尔类型</td>
<td style="text-align:center">number1 &lt; number2</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">判断左值是否大于右值，返回布尔类型</td>
<td style="text-align:center">number1 &gt; number2</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">判断左值是否小于或等于右值，返回布尔类型</td>
<td style="text-align:center">number1 &lt;= number2</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">判断左值是否大于或等于右值，返回布尔类型</td>
<td style="text-align:center">number1 &gt;= number2</td>
</tr>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">判断左值是否等于右值，返回布尔类型</td>
<td style="text-align:center">number1 == number2</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">判断左值是否不等于右值，返回布尔类型</td>
<td style="text-align:center">number1 != number2</td>
</tr>
</tbody>
</table>
<p><strong>注意：C 语言自带的数据类型中，并没有真正的布尔类型，只是使用零和非零模拟出的布尔类型</strong></p>
<h2 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符">#</a> 逻辑运算符</h2>
<p>C 语言中提供一些逻辑运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">逻辑与，判断左值与右值是否都为真，返回布尔类型</td>
<td style="text-align:center">a &amp;&amp; b</td>
</tr>
<tr>
<td style="text-align:center">||</td>
<td style="text-align:center">逻辑或，判断左值或右值是否为真，返回布尔类型</td>
<td style="text-align:center">a || b</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">逻辑非，取其相反值，返回布尔类型 (若 a 为 True，则！a 为 False)</td>
<td style="text-align:center">!a</td>
</tr>
</tbody>
</table>
<p>逻辑与，逻辑或，逻辑非的运算结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">&amp;&amp; 运算</th>
<th style="text-align:center">b = True</th>
<th style="text-align:center">b = False</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a = True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">a = False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
</tbody>
</table>
<p><strong>逻辑与：全真才真，一假皆假。</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">|| 运算</th>
<th style="text-align:center">b = True</th>
<th style="text-align:center">b = False</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a = True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
</tr>
<tr>
<td style="text-align:center">a = False</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
</tr>
</tbody>
</table>
<p><strong>逻辑或：一真即真，全假才假。</strong></p>
<p><strong>短路现象：</strong></p>
<p>对于 a&amp;&amp;b，当 a 为假的时候，我们便可以立即断定 a&amp;&amp;b 就是假的，那么程序将不会再判断 b，这种现象被称为短路现象。</p>
<p>同样的，对于 a||b，当 a 为真，则 a||b 就一定是真的，程序也不会再判断 b。</p>
<h2 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符">#</a> 位运算符</h2>
<p>C 语言中提供一些位运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">对左值与右值进行与运算</td>
<td style="text-align:center">a &amp; b</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">对左值与右值进行或运算</td>
<td style="text-align:center">a | b</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">对左值与右值进行位运算</td>
<td style="text-align:center">a ^ b</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">对左值进行左移运算，左移位数取决于右值</td>
<td style="text-align:center">1 &lt;&lt; 5</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">对左值进行右移运算，右移位数取决于右值</td>
<td style="text-align:center">32 &gt;&gt; 3</td>
</tr>
</tbody>
</table>
<p>使用如下代码进行测试：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">5</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &amp; b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a | b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a ^ b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">1</span> &lt;&lt; <span class="number">5</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">32</span> &gt;&gt; <span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会发现，最终输出的结果分别是 1，5，4，32 和 4  接下来我会对位运算做详细解释。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为会有对齐操作，为了避免转换为网页时缩进错序，所以使用代码块进行解释</span></span><br><span class="line"><span class="comment">//a的值是1，其对应的二进制数可以写为001，b的值是5，其对应的二进制数可以写为101</span></span><br><span class="line"><span class="comment">//当a和b进行与运算时，我们首先将其对齐，如下</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//然后逐个按位比较，如果都是1，那么结果取1，否则取0，于是得到结果</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//转化为十进制数后，值是1，所以第一个printf的输出值为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//而或运算则是：如果都是0，那么结果取0，否则取1。</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//按照或运算的规则，可以得到最后的结果为101，转化为十进制则是5，所以第二个printf的输出值为5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//异或运算则是：如果相同则取0，不同则取1</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//按照异或运算的规则，可以得到最后的结果为100，转化为十进制则是4，所以第三个printf的输出值为4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左移运算：将二进制数左移x位，移动后在后面补0</span></span><br><span class="line"><span class="comment">//譬如对于1，其二进制为1，将其左移5位，然后在后面补0，那么结果就是10 0000，转化为十进制数则是32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//右移运算：将二进制数右移x位，移出部分删去</span></span><br><span class="line"><span class="comment">//譬如对于32，其二进制为10 0000，将其右移3位，那么就变为100，转化为十进制则是4</span></span><br></pre></td></tr></table></figure>
<h1 id="数据类型转换"><a class="markdownIt-Anchor" href="#数据类型转换">#</a> 数据类型转换</h1>
<p>将低精度值赋值给高精度值时，数据会自动转换类型，示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//声明并初始化字符型变量c</span></span><br><span class="line">    <span class="type">int</span> number1 = <span class="number">10</span>;<span class="comment">//声明并初始化整型变量number1</span></span><br><span class="line">    <span class="type">float</span> number2 = <span class="number">10.10</span>;<span class="comment">//声明并初始化单精度浮点型变量number2</span></span><br><span class="line">    <span class="type">double</span> number3 = <span class="number">100.100</span>;<span class="comment">//声明并初始化双精度浮点型变量number3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当把高精度的数值，赋给低精度的变量时，会导致警告，例如：</span></span><br><span class="line">    number1 = number2;</span><br><span class="line">    <span class="comment">//因为整型并不存在小数部分，所以将浮点型赋值给整型时，会导致小数部分的数据丢失，因此会被警告</span></span><br><span class="line">    <span class="comment">//将高精度数值赋值给低精度变量时，可以强制转换其数据类型，例如：</span></span><br><span class="line">    number1 = (<span class="type">int</span>)number2;<span class="comment">//在前面使用(数据类型)，来强制转换变量的数据类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//而当低精度的数值，赋给高精度的变量时，则会自动转换其数据类型，例如：</span></span><br><span class="line">    number2 = number1;<span class="comment">//并不需要强制转换</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//基本数据类型中，可以自动转换的数据类型级别，大致如下：</span></span><br><span class="line">    <span class="comment">//double &gt; float &gt; unsigned long &gt; long &gt; unsigned int &gt; int &gt; short</span></span><br><span class="line">    number3 = number2 = number1 = c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, number3);<span class="comment">//打印结果应为97.000000</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当浮点型被转换为整型时，并不会采取四舍五入的方式，而是截断。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">即var = 1.1得到的结果为var = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var = 1.6得到的结果也为var = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> var1 = <span class="number">1.1</span>;</span><br><span class="line">    <span class="type">int</span> var2 = <span class="number">1.6</span>;</span><br><span class="line">    <span class="type">float</span> var3 = <span class="number">3</span> / <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%f&quot;</span>, var1, var2, var3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到结果为 1，1，0.000000</p>
<p>其中 var1 与 var2 已经解释过了，而其中为 float 类型的 var3 结果却是 0.000000</p>
<p>这是因为参与计算的数值均为整型，即 3 / 5，运算出来的返回结果也只能是整型，得到的结果是被截断过后的整型 0，最后打印出的结果是 0.000000</p>
<p>若要返回结果为浮点型，则需要使用浮点型数值参与运算，比如改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> var3 = <span class="number">3.0</span> / <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h1 id="分支语句语句"><a class="markdownIt-Anchor" href="#分支语句语句">#</a> <mark>分支语句语句</mark></h1>
<h2 id="if-else-if-else语句"><a class="markdownIt-Anchor" href="#if-else-if-else语句">#</a> if、else if、else 语句</h2>
<p>在生活中，我们经常会遇到分支情况，例如：</p>
<p>如果沙县小吃比大盘鸡更便宜，我今天就去吃沙县小吃，否则的话就去吃大盘鸡。</p>
<p>我们注意到，在这句话里出现了两条分支：</p>
<ol>
<li>去吃沙县小吃</li>
<li>去吃大盘鸡</li>
</ol>
<p>而我们根据：哪个更便宜？这个条件对我们要做的选择进行判断。</p>
<p>在编程中，我们也可以实现类似的分支情况，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> sha_xian = <span class="number">20</span>, da_pan_ji = <span class="number">58</span>;</span><br><span class="line">	<span class="keyword">if</span> (sha_xian &lt; da_pan_ji) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今晚吃沙县&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今晚吃大盘鸡&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这部分代码，相信许多人只是读一遍，便能够理解，接下来我要详细介绍 if 语句的细节，首先是语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔类型) &#123;需要执行的代码块&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个 if 语句的语法，如果 if 后的代码块仅仅只有 1 句 (1 个分号为 1 句)，那么可以不写大括号，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔类型)</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;只有一句代码时，可以不写大括号&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>当括号内的布尔类型为真时，执行这条 if 语句，为假时，则不会执行。</p>
<p>可以使用上面提到的比较运算符来获得布尔类型，如上面的沙县、大盘鸡比较代码。</p>
<p>需要注意的是，if 语句可以单独使用，而 else 语句不可以，else 语句必须要有对应的 if 语句。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这样写是正确的</span></span><br><span class="line"><span class="keyword">if</span> (布尔类型)&#123;需要执行的代码块&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;需要执行的代码块&#125;</span><br><span class="line"><span class="comment">//---------------------------------</span></span><br><span class="line"><span class="comment">//这样写是错误的</span></span><br><span class="line"><span class="keyword">else</span> &#123;代码块&#125;</span><br></pre></td></tr></table></figure>
<p>当 if 内的布尔类型为假时，程序便会不执行 if 语句，直接进入 else 语句</p>
<p>如果 else 后面的语句仅仅只有 1 句，也可以不写大括号</p>
<p>else 语句的匹配规则遵循就近原则：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔类型) &#123;代码块&#125;<span class="comment">//这个if语句没有else</span></span><br><span class="line"><span class="keyword">if</span> (布尔类型) &#123;代码块&#125;<span class="comment">//下面的else语句会匹配离它最近的这个if语句</span></span><br><span class="line"><span class="keyword">else</span> &#123;代码块&#125;</span><br></pre></td></tr></table></figure>
<p>回到上面的沙县与大盘鸡案例，我们可以想到，其价格的比较结果并非一定只有两种，还会有相同的情况：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> sha_xian = <span class="number">20</span>, da_pan_ji = <span class="number">58</span>;</span><br><span class="line">	<span class="keyword">if</span> (sha_xian &lt; da_pan_ji) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今晚吃沙县&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sha_xian == da_pan_ji) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;吃哪个都可以&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今晚吃大盘鸡&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在 if 的下面添加 else if 语句来判断这种情况，else if 语句的作用类似于 if 语句，但是不能单独使用</p>
<p><strong>else if 可以存在不止一句</strong></p>
<p>同样的，当 else if 语句后面只有一条语句时，可以不写大括号。</p>
<h2 id="switch语句"><a class="markdownIt-Anchor" href="#switch语句">#</a> switch 语句</h2>
<p>在生活中，除了如同 if、else 这种分支，还存在多分支的情况，例如：</p>
<ul>
<li>如果今天是周一，我就去学 C 语言</li>
<li>如果今天是周二，我就去学 C++</li>
<li>如果今天是周三，我就去学 Java</li>
<li>如果今天是周四，我就去学 Python</li>
<li>如果今天是周五，我就去学 C#</li>
<li>如果今天是周六，我就出去玩</li>
<li>如果今天是周日，我就睡懒觉</li>
</ul>
<p>当然，这种多分支的情况可以使用多个 else if 去实现，但是当分支过多，if 语句的效率通常不如 switch 语句。</p>
<p>首先介绍一下 switch 语句的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">	执行代码块;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">	执行代码块;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">	执行代码块;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    执行代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch 后面的括号中的变量可以是整型或者字符型。</p>
<p>当变量的值等于值 1 时，便会执行 case 值 1: 后面的代码块。</p>
<p>需要注意的时，case 语句后面的是冒号而不是分号。</p>
<p>当 case 语句后的代码块被执行完后，如果有 break 语句，则会终止 switch，如果没有 break 语句，则会继续向下执行。</p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(key)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上面的这个 switch 语句来说，如果 key 的值为 1，则最后的打印结果会是 123</p>
<p>如果 key 的值为 2，则最后的打印结果会是 23，这种现象被称为穿透效果</p>
<p>default 语句并非必要，可以不写</p>
<p>default 语句类似于 if 语句中的 else，当所有情况都不被匹配到时，会被执行。</p>
<p>如果 default 上面的语句并没有写 break；那么 default 也会被穿透。</p>
<hr>
<p>接着我们回到上面的问题，如果使用 switch 语句实现，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> date = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (date) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周一，我去学C语言&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周二，我去学C++&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周三，我去学Java&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周四，我去学Python&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周五，我去学C#&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周六，我出去玩&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周日，我睡懒觉&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天周几都不是，什么都不干&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们通过另一个案例来感受一下穿透效果：</p>
<p>小明的爸爸许诺给小明：</p>
<ul>
<li>如果小明的期末成绩高于 60 分，便给他 100 元钱</li>
<li>如果高于 80 分，便给他买手机、和给他 100 元钱</li>
<li>如果高于 100 分，便给他买电脑、手机，而且给他 100 元钱</li>
</ul>
<p>使用 switch 实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> score = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">switch</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;给小明买电脑\n&quot;</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;给小明买手机\n&quot;</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;给小明100元钱\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这个代码，我们很轻松的实现了小明爸爸的许诺这个案例。</p>
<h1 id="printf与scanf"><a class="markdownIt-Anchor" href="#printf与scanf">#</a> printf 与 scanf</h1>
<p>printf 与 scanf 是 C 语言的输出和输入函数，其中 printf 已经被我们使用过很多次了，我这里将详细的介绍这两个函数。</p>
<h2 id="转义符"><a class="markdownIt-Anchor" href="#转义符">#</a> 转义符</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在这里顺便介绍一下转义符，即\</span></span><br><span class="line"><span class="comment">//反斜杠在编程语言中作为转义符存在，转义符，即转变含义的符号。</span></span><br><span class="line"><span class="comment">//例如，\n表示转换字母n的含义为next line 下一行，即换行符</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n\n&quot;</span>);<span class="comment">//换三行，效果相当于敲三次回车</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用markdown写东西时，转义符也会被识别，所以我在这里以注释的形式介绍转义符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//同时，转义符还可以将原本有特殊含义的字符转换，例如：</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印双引号\&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">//在C语言中，双引号包住的内容是字符串，当使用printf进行打印时，如果写成&quot;打印双引号&quot;\n&quot;</span></span><br><span class="line"><span class="comment">//则会被识别为&quot;打印双引号&quot;为一组内容\n&quot;为另一组内容，此时右边的部分仅有1个双引号，并不能匹配，会导致报错</span></span><br><span class="line"><span class="comment">//这时需要使用转义符，转变其含义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当需要printf转义符\时，可以使用 转义符 将 转义符 进行转义，即写成\\，这样会打印\</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//常用的转义：\n 换行，\t 制表符，\0 空字符</span></span><br></pre></td></tr></table></figure>
<h2 id="printf函数"><a class="markdownIt-Anchor" href="#printf函数">#</a> printf 函数</h2>
<p>printf 函数是 C 语言的输出函数，其语法是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打印内容(占位符)&quot;</span>, 顶替占位符);</span><br></pre></td></tr></table></figure>
<p>printf 是我们已经很熟悉的一个函数，它的全称是 print function，打印函数，f 是 function 的缩写。</p>
<p>可以在 printf 的双引号里面写下占位符，从而打印变量。其中比较常用的占位符有：</p>
<table>
<thead>
<tr>
<th style="text-align:center">%d</th>
<th style="text-align:center">%f</th>
<th style="text-align:center">%c</th>
<th style="text-align:center">%i</th>
<th style="text-align:center">%s</th>
<th style="text-align:center">%%</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">整型</td>
<td style="text-align:center">浮点型</td>
<td style="text-align:center">字符型</td>
<td style="text-align:center">十进制、八进制、十六进制数</td>
<td style="text-align:center">字符串</td>
<td style="text-align:center">输出 %</td>
</tr>
</tbody>
</table>
<p>浮点型占位符 % f 的细节：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%6.3f&quot;</span>, floatNumber);</span><br></pre></td></tr></table></figure>
<p>在上面这条 printf 语句中，<strong>小数点前的 6 表示输出位宽为 6 的浮点型，小数点后面保留 3 位小数。</strong></p>
<p>位宽即输出内容所占据的格数，如果 floatNumber 的值为 3.14，那么输出的结果会是：空格 3.140</p>
<p>为了避免看不出效果，我这里将空格直接写出来，其中空格占 1 位，小数点占 1 位，四个数字占 4 位，总共为 6</p>
<p><strong>当输出内容不足位宽时，便会使用空格补足，如果输出内容超过位宽限制，那么会全部输出，不再受位宽限制</strong></p>
<p>浮点型输出时默认保留六位小数。</p>
<h2 id="scanf函数"><a class="markdownIt-Anchor" href="#scanf函数">#</a> scanf 函数</h2>
<p>scanf 函数 (scan function  扫描函数) 是 C 语言的输入函数，其语法是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;占位符&quot;</span>, &amp;对应变量)</span><br></pre></td></tr></table></figure>
<p>需要注意的是，C 语言的 scanf 函数有严格的格式控制，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>, &amp;intNumber1, &amp;intNumber2);</span><br></pre></td></tr></table></figure>
<p>则在控制台输入的时候，必须以 1,2 的形式输入，中间的逗号不能缺少！</p>
<p>变量前面的 &amp; 不能少！该符号为取地址符，地址的具体意义会在指针部分讲到。</p>
<p>占位符与 printf 相似，区别点在于 scanf 使用 % lf 来接收精度更高的数值到 double 变量</p>
<p>通常使用 printf 函数输出提示输入语句来配合 scanf 函数使用，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;intNumber);</span><br></pre></td></tr></table></figure>
<p><strong>注意：scanf 在 VS2022 中被认为是一个可能导致危险漏洞的函数，因此不被允许使用，而下面的许多案例用到了 scanf 函数，因此需要做一些设置：点击项目，点击 (项目名) 属性，点击 C/C++，将其中的 SDL 检查从是改为否</strong></p>
<h1 id="常量-define与const"><a class="markdownIt-Anchor" href="#常量-define与const">#</a> 常量、define 与 const</h1>
<p>常量，与变量对应，是一个固定的，不可以改变的值，常量又被叫做字面量。</p>
<p>常量可以是任意的基本数据类型，比如整型常量、浮点常量、或字符串字面值、也有枚举常量。</p>
<p>常量可以直接在代码中使用，也可以通过定义常量来使用。</p>
<p>在代码中，前缀为 0x 或 0X 的数表示为十六进制数，例如：0x15AF2C</p>
<p>前缀为 0 的数表示为八进制数，例如：0457233</p>
<hr>
<p>可以通过 #define 定义常量，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDTH 5</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> area;</span><br><span class="line">    area = LENGTH * WIDTH;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;value of area: %d&quot;</span>, area);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义常量时，通常使用全大写字母的方式命名</p>
<p>需要注意的是，使用 #define 定义常量时，后面不要加分号！</p>
<p>我们通常通过这种常量定义方式，来给常量起名，以至于其在代码中更容易被读懂，或者是便于后期修改数据。</p>
<hr>
<p>除了 #define，还可以使用 const 关键字声明指定类型的常量：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> CONSTANT = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//语法为：const type constant_name = value;</span></span><br></pre></td></tr></table></figure>
<p>需要注意，使用 const 声明与初始化需要在一个语句内完成，不能如变量一样先声明再初始化。</p>
<h1 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句">#</a> <mark>循环语句</mark></h1>
<h2 id="while语句"><a class="markdownIt-Anchor" href="#while语句">#</a> while 语句</h2>
<p>生活中也经常会遇到需要循环的情况，例如小明上课睡觉被老师抓到，被老师处罚：大喊一百遍我错了。</p>
<p>如果单纯的使用 printf 来实现这个例子，那么需要写一百条。</p>
<p>而使用循环，能够很简单的实现这种需要机械性重复的行为，以下是代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> times = <span class="number">0</span>;<span class="comment">//声明并初始化控制变量</span></span><br><span class="line">	<span class="keyword">while</span> (times &lt; <span class="number">100</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;我错了！&quot;</span>);<span class="comment">//打印</span></span><br><span class="line">		times++;<span class="comment">//控制变量自增</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先介绍一下 while 语句的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一部分，声明并初始化控制变量</span></span><br><span class="line"><span class="type">int</span> var_name = var;</span><br><span class="line"><span class="comment">//第二部分，while循环的控制条件</span></span><br><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">	<span class="comment">//第三部分，需要被循环的代码块</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环代码块&quot;</span>);</span><br><span class="line">	<span class="comment">//第四部分，控制变量迭代</span></span><br><span class="line">    var_name++;<span class="comment">//通常为自增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先在 while 语句的外部，定义一个变量，案例中我使用了 times 作为控制变量。</p>
<p>当 while 后面的括号里所写的表达式结果为真时，便会开始执行 while 语句下需要循环的代码块。</p>
<p>在每次循环结束时 (也可以是开始时)，令控制变量自增 1，这样当循环被执行 100 次时，控制变量便自增了 100，循环就会因为不满足条件而被终止。如果循环内不写控制变量迭代的相关代码，很可能会导致死循环。</p>
<p>如果 while 下的代码块仅有一条语句，那么大括号是可以省略的。</p>
<p>我们通过另一个案例来进一步理解 while 循环：打印 1-100 之间的所有奇数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> number = <span class="number">0</span>;<span class="comment">//声明并初始化控制变量</span></span><br><span class="line">	<span class="keyword">while</span> (number &lt; <span class="number">100</span>) &#123;<span class="comment">//循环条件</span></span><br><span class="line">		number++;<span class="comment">//控制变量迭代</span></span><br><span class="line">		<span class="keyword">if</span> (number % <span class="number">2</span> != <span class="number">0</span>)<span class="comment">//while中嵌套if</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d是奇数\n&quot;</span>, number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dowhile语句"><a class="markdownIt-Anchor" href="#dowhile语句">#</a> do…while 语句</h2>
<p>do…while 语句与 while 语句高度相似，其语法为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一部分，声明并初始化控制变量</span></span><br><span class="line"><span class="type">int</span> var_name = var;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//第二部分，需要被循环的代码块</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环代码块&quot;</span>);</span><br><span class="line"><span class="comment">//第三部分，控制变量迭代</span></span><br><span class="line">    var_name++;<span class="comment">//通常为自增</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件);<span class="comment">//第四部分，while循环的控制条件</span></span><br></pre></td></tr></table></figure>
<p>其与 while 语句的差别在于：无论是否满足 while 的条件，都会首先进行一次循环代码执行。</p>
<h2 id="for语句"><a class="markdownIt-Anchor" href="#for语句">#</a> for 语句</h2>
<p>在 C 语言中，除了 while 循环，还有另一种循环语句，for 循环。</p>
<p>for 循环的语法如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (声明并初始化控制变量; 条件 ; 控制变量迭代)&#123;<span class="comment">//请注意，中间使用的是分号</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;循环代码块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与 while 类似，for 也有控制变量的概念，但不同的是，for 循环将控制变量的定义与迭代放到了同一行下。</p>
<p>for 语句下的循环代码块若仅有一句，可以省略大括号。</p>
<p>使用 for 循环实现打印 1-100 之间所有的偶数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d是偶数\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for 循环的执行顺序是：</p>
<ol>
<li>首先执行声明并初始化控制变量的部分，即第一个分号前的部分</li>
<li>然后进行条件判断，若符合，则进入循环</li>
<li>循环结束时，执行控制变量迭代的部分</li>
<li>控制变量迭代后，再次判断条件是否成立，若成立，则进入循环</li>
</ol>
<h2 id="循环练习打印九九乘法表"><a class="markdownIt-Anchor" href="#循环练习打印九九乘法表">#</a> 循环练习，打印九九乘法表</h2>
<p>打印九九乘法表是大部分初学循环的人锻炼循环语句的方法。</p>
<p>while 实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//使用i控制行</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">		<span class="type">int</span> j = <span class="number">1</span>;<span class="comment">//使用j控制列</span></span><br><span class="line">		<span class="comment">//将其写进循环，使得每次进入循环时将j的值重置为1</span></span><br><span class="line">		<span class="keyword">while</span> (j &lt; i + <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d * %d = %d\t&quot;</span>, j, i, i * j);</span><br><span class="line">			j++;<span class="comment">//控制变量迭代</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//每打印完1行，进行换行，以使其美观</span></span><br><span class="line">		i++;<span class="comment">//控制变量迭代</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for 实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//使用i控制行</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i + <span class="number">1</span>; j++)<span class="comment">//使用j控制列</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d * %d = %d\t&quot;</span>, j, i, i * j);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">//每打印完1行，进行换行，以使其美观</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a class="markdownIt-Anchor" href="#函数">#</a> <mark>函数</mark></h1>
<p>我们在中学时期，学习过一次线性函数：y=kx+b</p>
<p>可以发现，对于函数 y=kx+b，当你给它一个 x 值的时候，它总会返回给你一个 y 的值</p>
<p>而它返回的 y 值，是通过将 x 值乘 k 再加 b 获得的</p>
<p>如果将其转换为代码的形式，则可以写出如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B 8</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> x)</span>;<span class="comment">//声明一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> y = function(a);<span class="comment">//调用函数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, y);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> x)</span> &#123;<span class="comment">//函数内部的具体实现</span></span><br><span class="line">	<span class="type">int</span> y = K * x + B;<span class="comment">//函数内部的代码块</span></span><br><span class="line">	<span class="keyword">return</span> y;<span class="comment">//函数的返回值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，我需要解释一下函数声明、实现的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">函数返回值的类型 函数名(函数要用到的参数)&#123;</span><br><span class="line">    函数内部的代码块;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如上面代码块中的 function，便是一个函数，其返回值的类型是整型，函数名叫 function，需要用的一个整型参数 x</p>
<p><strong>函数与变量一样，在使用之前需要先对其声明，然后才能使用。</strong></p>
<p><strong>可以通过函数名对一个函数进行调用。</strong></p>
<p>我们总是会写的 int main () 也是一个函数，被称为主函数，它的返回值类型是整型，函数名是 main，不需要任何参数。</p>
<p><strong>主函数是一个程序的入口，程序总是会从 main 函数开始执行。一个项目下，只能有一个 main 函数</strong></p>
<hr>
<p>函数的主要作用，在于将一些可能会被反复使用的代码封装起来，以便于多次对其调用。</p>
<p>举一个例子来进一步说明函数的作用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用C语言模拟一家咖啡店</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">coffee</span><span class="params">()</span>;<span class="comment">//声明一个函数，该函数返回值类型为空，函数名为coffee，调用时不需要任何参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tea</span><span class="params">()</span> &#123;<span class="comment">//函数也可以在声明的同时，进行定义(实现)</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;煮沸水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;泡茶\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒茶\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;上茶\n&quot;</span>);</span><br><span class="line">	<span class="comment">//函数返回值类型为空的函数可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;第1位客人来了，他需要茶。\n&quot;</span>);</span><br><span class="line">	tea();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;第2位客人来了，他需要咖啡。\n&quot;</span>);</span><br><span class="line">	coffee();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;第3位客人来了，他需要咖啡。\n&quot;</span>);</span><br><span class="line">	coffee();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;第4位客人来了，他需要咖啡。\n&quot;</span>);</span><br><span class="line">	coffee();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;第5位客人来了，他需要茶。\n&quot;</span>);</span><br><span class="line">	tea();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">coffee</span><span class="params">()</span> &#123;<span class="comment">//实现coffee函数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;煮沸水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;泡咖啡\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒咖啡\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;上咖啡\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;<span class="comment">//也可以使用空return结束函数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;这条语句不会被执行，因为函数已经return了，就被结束掉了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="封装-头文件与源文件"><a class="markdownIt-Anchor" href="#封装-头文件与源文件">#</a> 封装、头文件与源文件</h1>
<p>对于许多编程人员来说，不要重复造轮子，是一句耳熟能详的名言。</p>
<p>而其中的原理，正是封装、头文件与源文件的应用。</p>
<p>我们可以注意到，当创建项目后，在解决方案下会有一个或者多个项目，而项目下会有源文件文件夹与头文件文件夹</p>
<p>右键点击头文件，添加，新建项，创建第一个头文件：FirstHeader.h</p>
<p>在头文件中，可以写下要封装的函数的声明，使用上面函数的咖啡店案例，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FirstHeader.h</span></span><br><span class="line"><span class="comment">//防止再次编译</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//包含stdio.h(Standard Input Output.Header)头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明咖啡函数与茶函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">coffee</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tea</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>
<p>然后右键源文件，添加，新建项，创建与其对应的源文件：FirstHeader.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FirstHeader.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;FirstHeader.h&quot;</span><span class="comment">//包含FirstHeader.c头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">coffee</span><span class="params">()</span> &#123;<span class="comment">//实现coffee函数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;煮沸水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;泡咖啡\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒咖啡\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;上咖啡\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tea</span><span class="params">()</span> &#123;<span class="comment">//实现tea函数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;煮沸水\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;泡茶\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;倒茶\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;上茶\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以进一步拆分函数，增强其独立性。当需要使用到这两个函数时，只需要在其他的文件中包含其头文件即可。</p>
<p>需要注意，个人编写的头文件包含时需要使用双引号：&quot;&quot;(双引号也可以包含内置的文件)</p>
<p>而平常所写的 &lt;&gt; 仅会检索内置的头文件，使用方式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;FirstHeader.h&quot;</span><span class="comment">//包含对应的头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	coffee();<span class="comment">//调用函数</span></span><br><span class="line">	tea();<span class="comment">//调用函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>头文件与源文件的名字可以不相同，但通常我们会做成同名，以便于别人在阅读代码时通过头文件寻找源文件。</p>
<h1 id="局部变量与全局变量"><a class="markdownIt-Anchor" href="#局部变量与全局变量">#</a> 局部变量与全局变量</h1>
<p>我们可以发现，当一个函数要调用一些主函数中已经定义了的变量数据时，就需要使用参数将其传递。</p>
<p>那么是否可以在一个函数中直接调用主函数的变量呢？</p>
<p>我们首先在主函数中定义变量：int test = 0;</p>
<p>然后使用另一个函数，在不传递参数的情况下，直接调用 test 去修改值，可以发现，这样是行不通的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">testFunction</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> test = <span class="number">0</span>;</span><br><span class="line">    testFunction();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testFunction</span><span class="params">()</span>&#123;</span><br><span class="line">    test = <span class="number">1</span>;<span class="comment">//会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>这是因为，在函数中定义的变量，属于局部变量，它的作用域仅在该函数 (仅在该函数中有效)。</strong></p>
<p><strong>不仅仅是函数，对于分支语句 (if、switch) 和循环语句 (for、while) 都是如此。</strong></p>
<p><strong>在语句内定义的变量，作用域仅在该语句中，当脱离了语句 (语句结束)，变量就被销毁了。</strong></p>
<p>如果想要定义一个变量，使得任何函数都可以访问和修改，那就需要定义全局变量。</p>
<p>全局变量的定义很简单，只要定义在函数外就可以了，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> test = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testFunction</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	test = <span class="number">1</span>;</span><br><span class="line">    testFunction();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testFunction</span><span class="params">()</span>&#123;</span><br><span class="line">    test = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="指针"><a class="markdownIt-Anchor" href="#指针">#</a> <mark>指针</mark></h1>
<h2 id="初识"><a class="markdownIt-Anchor" href="#初识">#</a> 初识</h2>
<p>指针是 C 语言中一个十分重要的概念。</p>
<p>指针的长度为 4 个字节，内部存储的是一个十六进制数。</p>
<p>在数据类型的后面添加一个星号，以创建对应的类型指针，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> * int_pointer;<span class="comment">//声明一个整型指针</span></span><br><span class="line"><span class="type">float</span> * float_pointer;<span class="comment">//声明一个浮点型指针</span></span><br></pre></td></tr></table></figure>
<p><strong>指针存储的十六进制数，是内存中对应的位置，也被称为地址</strong></p>
<p>我们在 scanf 中见到过 &amp; 符号，这个符号用于取出一个变量的地址，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">0</span>;<span class="comment">//声明并初始化一个整型</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个整型指针</span></span><br></pre></td></tr></table></figure>
<p><strong>地址是一个十分形象的名字，正如我们每个人都有自己的家庭地址，地址记录了一个变量在内存中存储的位置。</strong></p>
<p>指针的初始化通常使用 NULL 来进行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> * int_pointer = <span class="literal">NULL</span>;<span class="comment">//声明并初始化一个空指针</span></span><br></pre></td></tr></table></figure>
<p>当你创建了一个指针，但暂时不知道需要让它指向谁时，可以赋给其 NULL (空指针) 来避免错误调用未初始化的指针。</p>
<p>可以通过解引用符号 (星号)，来调用一个指针所指向的地址中保存的值，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">0</span>;<span class="comment">//声明并初始化一个整型</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个整型指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *int_pointer);<span class="comment">//调用指针指向地址中保存的值</span></span><br><span class="line"><span class="comment">//也可以打印指针本身</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, int_pointer);<span class="comment">//打印的结果是一个十六进制数</span></span><br></pre></td></tr></table></figure>
<p>指针也可以做基本的运算，例如使用指针做自增运算：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">0</span>;<span class="comment">//声明并初始化一个整型</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个整型指针</span></span><br><span class="line">int_pointer++;<span class="comment">//指针自增</span></span><br></pre></td></tr></table></figure>
<p>指针自增时，会根据其类型增加相应的字节数，比如整型指针，实际是自增了一个 int (4 个字节) 的大小。</p>
<p>这种使用方式通常配合内存管理 (malloc、free) 或者数组使用，在后面会详细介绍</p>
<p><strong>注意！这里仅做一个示范，实际上这样使用是错误的，会导致指针指向未知的内存空间。</strong></p>
<h2 id="值传递与指针传递"><a class="markdownIt-Anchor" href="#值传递与指针传递">#</a> 值传递与指针传递</h2>
<p>根据已经学习过的知识，我们可以简单的写出一个交换 a,b 变量值的程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">	<span class="type">int</span> temp = a;<span class="comment">//使用中间变量temp保存a的值</span></span><br><span class="line">	a = b;<span class="comment">//将b的值赋给变量a</span></span><br><span class="line">	b = temp;<span class="comment">//将保存的值赋给b，完成交换</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, a, b);<span class="comment">//打印检测</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将其封装成一个函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">	Swap(a, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, a, b);<span class="comment">//打印检测</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">	<span class="type">int</span> temp = x;</span><br><span class="line">	x = y;</span><br><span class="line">	y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过打印，我们可以发现，a 与 b 的值并未实现交换。</p>
<p>这与值传递、地址传递有关。</p>
<p>对于一个函数的形参 (形式参数，即上面函数中的 x 和 y)，在调用函数时，会自动生成新的变量 x, y 然后把 a 和 b 的值赋给对应的形参。</p>
<p>这样我们就不难理解为什么 Swap 函数并未改变 a 与 b 的值，因为函数从始至终都未与变量 a、b 打过交道</p>
<p>那么如果我想要使用函数修改一个变量的值，该怎么做？那就是传递一个变量的地址，修改成如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span>* x, <span class="type">int</span>* y)</span>;<span class="comment">//需要的参数修改为指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">	Swap(&amp;a, &amp;b);<span class="comment">//使用&amp;符号，取出a与b的地址，传递过去</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, a, b);<span class="comment">//打印检测</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span>* x, <span class="type">int</span>* y)</span> &#123;</span><br><span class="line">	<span class="type">int</span> temp = *x;<span class="comment">//使用*来调用指针指向的地址中保存的值</span></span><br><span class="line">	*x = *y;</span><br><span class="line">	*y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>因为每个变量对应的地址是唯一的，所以使用指针通过地址对值进行修改，就一定可以修改到目标变量。</strong></p>
<p>另外，指针传递也可以减少值的复制，这一应用会在数组与结构体中体现。</p>
<h2 id="函数指针与回调函数"><a class="markdownIt-Anchor" href="#函数指针与回调函数">#</a> 函数指针与回调函数</h2>
<p>函数指针是指向函数的指针变量。</p>
<p>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。</p>
<p>函数指针可以像一般函数一样，用于调用函数、传递参数。</p>
<p>函数指针变量的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">函数返回值类型 (*函数指针名)(参数类型列表) = 函数名;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;<span class="comment">//声明并实现一个函数，该函数的作用：在a与b中取出更大值并返回</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">   	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line">	<span class="type">int</span> (*pointer_max)(<span class="type">int</span>, <span class="type">int</span>) = max;<span class="comment">//使用示例</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;max is %d&quot;</span>, pointer_max(x, y));<span class="comment">//使用函数指针调用函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回调函数：当函数所需的参数列表中，包含函数指针时，该函数被称为回调函数。</p>
<p>即在函数中，通过函数指针调用另一个函数，示例如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_Function</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;printFunction被调用\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">callback_Function</span><span class="params">(<span class="type">int</span> times, <span class="type">void</span> (*p_f_parameter)(<span class="type">void</span>))</span> &#123;<span class="comment">//回调函数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++)<span class="comment">//使用for循环，调用times次函数指针所指向的函数</span></span><br><span class="line">		p_f_parameter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	callbackFunction(<span class="number">10</span>, print_Function);<span class="comment">//这里仅写函数名，不能加括号，加上括号相当于调用函数，给了一个空值(函数返回为空)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 callback_Function 为回调函数。</p>
<h2 id="多级指针"><a class="markdownIt-Anchor" href="#多级指针">#</a> 多级指针</h2>
<p>正如每个变量都有自己对应的地址，指针变量作为一个存储指针的变量，也有自己的地址。</p>
<p>我们可以使用一个二级指针来保存指针变量对应的地址，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">1</span>;<span class="comment">//声明并初始化一个整型变量</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个指针变量</span></span><br><span class="line"><span class="type">int</span> ** level_2_pointer = &amp;int_pointer;<span class="comment">//声明并初始化一个二级指针变量</span></span><br></pre></td></tr></table></figure>
<p>根据星号的数量可以判断一个指针的级别，以此类推，还有三级、四级、多级指针。</p>
<h2 id="指针与常量"><a class="markdownIt-Anchor" href="#指针与常量">#</a> 指针与常量</h2>
<p>const 关键字与指针在一起使用时，有多种使用方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> * p;<span class="comment">//常量指针</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> * p;<span class="comment">//常量指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p;<span class="comment">//指针常量</span></span><br></pre></td></tr></table></figure>
<p>前两者的效果是相同的，<strong>常量指针正如同它的名字，这是指向常量的一个指针</strong>。</p>
<p>对于常量指针来说，是不可以通过解引用符 (星号) 去改变其地址中保存的值的，因为地址中保存的值是一个常量，常量是不可修改的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p;<span class="comment">//声明常量指针p</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;<span class="comment">//声明并初始化变量a</span></span><br><span class="line">p = &amp;a;<span class="comment">//将变量a的地址赋值给p</span></span><br><span class="line">*p = <span class="number">5</span>;<span class="comment">//错误，不能通过指针p来改变值</span></span><br><span class="line"><span class="comment">//但是这里可以通过修改a来修改值，因为a是变量</span></span><br></pre></td></tr></table></figure>
<p>对于常量指针来说，指向的地址中存储的值不可修改，但指向的地址是可以修改的，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b = <span class="number">5</span>;<span class="comment">//再声明并初始化一个变量b</span></span><br><span class="line">p = &amp;b;<span class="comment">//将b的地址复制给p</span></span><br></pre></td></tr></table></figure>
<p><strong>而指针常量，指的是指针本身是一个常量</strong>，即指针指向的地址不可改变，但指向地址中存储的值可以改变，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">4</span>, b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;a;<span class="comment">//和使用const定义常量一样，声明的同时就需要初始化</span></span><br><span class="line">*p = <span class="number">5</span>;<span class="comment">//这是被允许的</span></span><br><span class="line">p = &amp;b;<span class="comment">//错误，不能修改一个常量</span></span><br></pre></td></tr></table></figure>
<p>除此之外，还有指向常量的指针常量，即为以上二者的结合</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p;<span class="comment">//它存储的地址不允许被改变，地址中保存的值也不允许被改变</span></span><br></pre></td></tr></table></figure>
<h1 id="构造类型-2"><a class="markdownIt-Anchor" href="#构造类型-2">#</a> 构造类型</h1>
<h2 id="数组"><a class="markdownIt-Anchor" href="#数组">#</a> <mark>数组</mark></h2>
<h3 id="初识-2"><a class="markdownIt-Anchor" href="#初识-2">#</a> 初识</h3>
<p>数组，顾名思义，即为一组数。通过如下语法声明一个数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1</span></span><br><span class="line">数据类型 数组名[数组长度];</span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[<span class="number">10</span>];<span class="comment">//声明一个长度为10的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">数据类型 数组名[] = &#123;数据<span class="number">1</span>, 数据<span class="number">2</span>, 数据<span class="number">3</span>, 数据<span class="number">4</span>, 数据<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;<span class="comment">//这样创建的数组，会根据数据个数，自动确认其长度，该数组长度为5</span></span><br></pre></td></tr></table></figure>
<p>创建数组时，也就相当于申请了一段连续的内存地址， 而数组名就是这串地址的头部位置。所以数组名的本质就是指针，它指向一段连续的内存地址的起始位置。</p>
<p>可以通过中括号调用其中存储的元素：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">array</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">array</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">array</span>[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">array</span>[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">array</span>[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure>
<p>中括号 ([]) 在这里的应用类似于：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] 即为 *(<span class="built_in">array</span> + <span class="number">0</span>)以此类推</span><br></pre></td></tr></table></figure>
<p>在指针一节讲过，对于指针来说，加 1 就相当于加 1 个其类型的字节数，比如 int 指针，加 1 相当于加了 4 个字节</p>
<p>所以当使用 array [4] 时，就相当于 *(array + 4)，即后移了 16 个字节，调用了这段连续内存中的第 5 个整型</p>
<p><strong>这也解释了为什么数组的下标 (即括号里的数字，也称索引) 为什么总是从 0 开始，因为 0 的位置就是其本身，即数组头</strong></p>
<p>这里提到了一个很重要的点，** 数组的下标总是从 0 开始的！** 例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//对于这个数组来说array[0]是1，以此类推</span></span><br></pre></td></tr></table></figure>
<h3 id="数组使用案例存储排序并打印"><a class="markdownIt-Anchor" href="#数组使用案例存储排序并打印">#</a> 数组使用案例：存储排序并打印</h3>
<p>我们通过一个案例来进一步了解数组：</p>
<p>让用户从键盘输入 10 个整数，将其存储在一个数组中，将数据进行排序，然后再打印出来。</p>
<p>这里我们使用到<strong>冒泡排序</strong>，实现代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span> &#123;<span class="comment">//第一个参数是数组，第二个参数是数组的长度</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = len; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)<span class="comment">//从键盘输入10个整型数据</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">	BubbleSort(arr, <span class="number">10</span>);<span class="comment">//因为数组名本身就是指针，所以不需要取地址符</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)<span class="comment">//打印数组</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随便输入一组(10个整型)测试数据，来测试代码是否有问题</span></span><br></pre></td></tr></table></figure>
<p>冒泡排序是一个十分简单的排序算法，它的逻辑是：</p>
<p>从第一个数开始，逐个对比两个数的大小，如果前者更大 (降序排序是更小)，就交换他们，直至最后一个。</p>
<p>比如对于：</p>
<p>9,5,6,12,7</p>
<p>我们首先比较第一个数与第二个数，即 9 与 5，9 更大，交换其位置，变为：</p>
<p>5,9,6,12,7</p>
<p>然后比较第二个数与第三个数，即 9 与 6，9 更大，交换其位置，变为：</p>
<p>5,6,9,12,7</p>
<p>然后继续这样的操作，直到最后一个数，这样执行一轮后，我们就一定将最大的数排到了最后一个。第一轮结束的结果如下：</p>
<p>5,6,9,7,12</p>
<p>然后执行第二轮操作，重复上述操作到倒数第二个数字，就能将第二大的数排到倒数第二位。</p>
<p>这样的排序方式像是冒泡泡，每次都将一个最大的 (或者最小的) 数排出来，因此被称为冒泡排序。</p>
<h3 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组">#</a> 多维数组</h3>
<p>多维数组最简单的形式是二维数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数值类型 数组名[行数][列数];</span><br></pre></td></tr></table></figure>
<p>比如我们要实现一个四行三列的二维数组：</p>
<table>
<thead>
<tr>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">11</td>
<td style="text-align:center">12</td>
</tr>
</tbody>
</table>
<p>实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">4</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;, &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//或者这样</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">4</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>创建时直接初始化的数组，声明可以省略行数，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[][<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="comment">//但我感觉这并没有什么用，它增加了阅读难度，也许只有学校会考这个东西</span></span><br></pre></td></tr></table></figure>
<p>调用时，其下标 (索引) 仍然是从 0 开始的，譬如第 1 行的第一个数据是：arr [0][0]</p>
<p>以二维数组类推，还有其他多维数组。</p>
<h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串">#</a> 字符串</h3>
<p>字符串，作为一个常用类型，有很多独特之处，需要单独拉出来说明。</p>
<p>C 语言中的字符串，实际上是以空字符’\0’结尾的一个字符数组。因此’\0’是用于标记字符串的结束的。</p>
<p>譬如我们写下一个字符数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[] = &#123;<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27; I&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//也可以写成这样：</span></span><br><span class="line"><span class="type">char</span> str2[] = <span class="string">&quot;STRING&quot;</span>;</span><br><span class="line"><span class="comment">//这两种写法是等同的，编辑器会自动在字符串的后面补上&#x27;\0&#x27;</span></span><br><span class="line"><span class="comment">//但需要注意的是，&#x27;\0&#x27;也是一个字符，请不要这样定义一个字符串</span></span><br><span class="line"><span class="type">char</span> str3[<span class="number">6</span>] = <span class="string">&quot;STRING&quot;</span>;<span class="comment">//这样是错误的！</span></span><br><span class="line"><span class="comment">//因为STRING已经是6个字符了，所以字符数组已经满了，就不能在填充&#x27;\0&#x27;了</span></span><br><span class="line"><span class="comment">//但是在str3被使用时，编辑器会一直读到发现&#x27;\0&#x27;为止，这会导致越界访问</span></span><br></pre></td></tr></table></figure>
<p>C 语言的字符数组是作为常量存在的，我们可以发现，当定义一个字符数组后，它就不可以再整体修改了：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">char</span> str[] = <span class="string">&quot;STRING&quot;</span>;<span class="comment">//定义一个字符数组</span></span><br><span class="line">	str = <span class="string">&quot;ABCDEF&quot;</span>;<span class="comment">//会被提示：表达式必须是可修改的左值</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是因为 str 的本质就是一个指针，在上面讲解数组的时候已经说过了，所以不可以进行整体修改，但我们仍可以逐个修改其元素：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;A&#x27;</span>;<span class="comment">//这是被允许的</span></span><br></pre></td></tr></table></figure>
<p>C 语言的 string.h 头文件下，提供了一些操作字符数组的函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="built_in">strcpy</span>(s1, s2);<span class="comment">//复制字符串s2替换字符串s1</span></span><br><span class="line"><span class="built_in">strcat</span>(s1, s2);<span class="comment">//将字符串s2连接到s1的末尾</span></span><br><span class="line"><span class="built_in">strlen</span>(s1);<span class="comment">//返回字符串s1的长度</span></span><br><span class="line"><span class="built_in">strcmp</span>(s1, s2);<span class="comment">//如果s1和s2相同，则返回0，如果s1&lt;s2则返回小于0，否则返回大于0</span></span><br><span class="line"><span class="built_in">strchr</span>(s1, ch);<span class="comment">//返回一个指针，指向字符串s1中字符ch第一次出现的位置</span></span><br><span class="line"><span class="built_in">strstr</span>(s1, s2);<span class="comment">//返回一个指针，指向字符串s1中字符串s2第一次出现的位置</span></span><br></pre></td></tr></table></figure>
<p>后续我们可能会使用到这些函数</p>
<h2 id="结构体"><a class="markdownIt-Anchor" href="#结构体">#</a> <mark>结构体</mark></h2>
<h3 id="初识-3"><a class="markdownIt-Anchor" href="#初识-3">#</a> 初识</h3>
<p>结构体也是 C 语言中相当重要的一个概念，更好的理解结构体，更有利于理解其他语言中面向对象编程</p>
<p>定义结构体的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struct_tag</span> &#123;</span><span class="comment">//结构体标签</span></span><br><span class="line">    member_element;<span class="comment">//结构体成员元素</span></span><br><span class="line">    member_element;</span><br><span class="line">    member_element;</span><br><span class="line">    ...</span><br><span class="line">&#125;variable_struct;<span class="comment">//结构变量</span></span><br><span class="line"><span class="comment">//结构变量不能与结构体标签同名</span></span><br></pre></td></tr></table></figure>
<p>一般情况下，结构体标签、成员元素、结构变量，这 3 部分至少要出现两个。如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形式1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;my_struct;</span><br><span class="line"><span class="comment">//使用这种方法，直接定义了一个结构变量my_struct，但是不再能创建第二个结构变量</span></span><br><span class="line"><span class="comment">//可以直接调用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	my_struct.a = <span class="number">0</span>;<span class="comment">//通过点(.)调用结构体的成员元素</span></span><br><span class="line">	my_struct.b = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	my_struct.c = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者这样定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形式2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struct_tag</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用这种方法，定义了一个struct_tag的结构，需要声明变量再使用，如下：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">struct_tag</span> <span class="title">my_struct</span>;</span><span class="comment">//声明一个结构变量</span></span><br><span class="line">	my_struct.a = <span class="number">0</span>;<span class="comment">//通过点(.)调用结构体的成员元素</span></span><br><span class="line">	my_struct.b = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	my_struct.c = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外结构体经常会配合 typedef 使用，使用方式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配合typedef使用：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;struct_name;</span><br><span class="line"><span class="comment">//使用这种方式，定义了一个叫做struct_name的新变量类型，可以把它当成int之类的变量类型使用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	struct_name my_struct;<span class="comment">//声明一个结构变量</span></span><br><span class="line">	my_struct.a = <span class="number">0</span>;<span class="comment">//通过点(.)调用结构体的成员元素</span></span><br><span class="line">	my_struct.b = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	my_struct.c = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="typedef"><a class="markdownIt-Anchor" href="#typedef">#</a> typedef</h3>
<p>使用 typedef 关键字可以自定义数据类型，如结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">10</span>];<span class="comment">//长度为10的字符数组</span></span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	Student student;<span class="comment">//声明一个结构变量</span></span><br><span class="line">	student.id = <span class="number">123</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(student.name, <span class="string">&quot;张三&quot;</span>);<span class="comment">//使用string.h头文件下的strcpy函数操作字符数组</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;学生：%s, 学号：%d&quot;</span>, student.name, student.id);<span class="comment">//打印测试</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以用于给原有数据类型起别名：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;<span class="comment">//给int起别名为ElementType</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    ElementType data = <span class="number">123456</span>;<span class="comment">//等同于int data = 123456;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="共用体与枚举类型"><a class="markdownIt-Anchor" href="#共用体与枚举类型">#</a> 共用体与枚举类型</h2>
<h3 id="共用体"><a class="markdownIt-Anchor" href="#共用体">#</a> 共用体</h3>
<p>共用体的定义方式与结构体类似，关键字为 union，定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> [<span class="title">union_tag</span>] &#123;</span><span class="comment">//共用体标签</span></span><br><span class="line">    member_element;<span class="comment">//共用体成员属性</span></span><br><span class="line">    member_element;</span><br><span class="line">    ...</span><br><span class="line">&#125;[variable_union];<span class="comment">//共用体变量</span></span><br><span class="line"><span class="comment">//与结构体一样，3取其2</span></span><br></pre></td></tr></table></figure>
<p>共用体最大的特点，在于其共用同一块内存空间，而对于结构体而言，每个成员属性都是相互独立的。</p>
<p>共用体的大小取决于其占用内存最大的成员属性。譬如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Data</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> data1;</span><br><span class="line">    <span class="type">float</span> data2;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该共用体占用10个字节内存，因为其中str占用的空间是最大的</span></span><br></pre></td></tr></table></figure>
<p>对于结构体中任意一个元素的修改，会导致其他元素也发生变化，这是共用体最大的特点。</p>
<h3 id="枚举类型"><a class="markdownIt-Anchor" href="#枚举类型">#</a> 枚举类型</h3>
<p>枚举是 C 语言中的一种基本数据类型，用于定义一组具有离散值的常量。，它可以让数据更简洁，更易读。</p>
<p>枚举类型通常用于为程序中的一组相关的常量取名字，以便于程序的可读性和维护性。</p>
<p>定义一个枚举类型，需要使用 <strong>enum</strong> 关键字，后面跟着枚举类型的名称，以及用大括号 <strong>{}</strong> 括起来的一组枚举常量。每个枚举常量可以用一个标识符来表示，也可以为它们指定一个整数值，如果没有指定，那么默认从 <strong>0</strong> 开始递增。</p>
<p>定义枚举类型的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 枚举名 &#123;</span>枚举元素<span class="number">1</span>, 枚举元素<span class="number">2</span>, 枚举元素<span class="number">3</span>, ...&#125;;</span><br></pre></td></tr></table></figure>
<p>比如我们要定义一个星期：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">	MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN<span class="comment">//指定一个整数，然后它会从这个整数自动递增</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>使用枚举类型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> &#123;</span></span><br><span class="line">	MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN<span class="comment">//指定一个整数，然后它会从这个整数自动递增</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">day</span>;</span></span><br><span class="line">    day = WED;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举类型经常配合 switch 语句使用</p>
<h1 id="内存管理"><a class="markdownIt-Anchor" href="#内存管理">#</a> <mark>内存管理</mark></h1>
<p>内存被划分为一些区块：栈、堆、静态存储区</p>
<p>通常，变量、函数都是直接开辟在栈上面的，而堆区的内存，通常<strong>由程序员手动申请和释放</strong> (在 C 语言中是手动释放的)。</p>
<p>以下几个函数，可以用于申请可用内存：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">calloc</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="comment">//在内存中动态的分配num个长度为size的连续空间，并将每一个字节都初始化为0，返回这段内存的首地址</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">malloc</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"><span class="comment">//在堆区分配一块指定大小的内存空间，用来存放数据。这块数据不会被初始化，返回这段内存的首地址</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">realloc</span><span class="params">(<span class="type">void</span>* address, <span class="type">int</span> newsize)</span>;</span><br><span class="line"><span class="comment">//将address重新分配内存，新分配的内存大小为newsize</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span>* address)</span>;<span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分配内存的函数都是void*类型的，在C语言中表示未分配类型，需要手动转换其类型。</span></span><br><span class="line"><span class="comment">//这些函数被包含在stdlib.h头文件下(standard library)</span></span><br></pre></td></tr></table></figure>
<p>使用案例，动态数组：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在之前讲到的数组中，我们通常定义一个已知大小的数组来存放数据。</span></span><br><span class="line"><span class="comment">但如果需要用户从键盘输入一组数据，而我们并不知道数据的个数，该怎么办呢？</span></span><br><span class="line"><span class="comment">这时，可以使用内存管理的函数，来实现动态数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入要存储的数组的元素个数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;len);<span class="comment">//让用户输入需要的数组长度</span></span><br><span class="line">	<span class="type">int</span>* arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * len);<span class="comment">//sizeof()可以返回类型的大小</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);<span class="comment">//让用户输入数据</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arr[i]);<span class="comment">//打印数据，验证结果</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(arr);<span class="comment">//释放申请的内存</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意，当使用 malloc 等函数申请内存空间时，使用完一定要<strong>记得手动释放内存。否则会导致内存泄露！</strong></p>
<h1 id="文件读写"><a class="markdownIt-Anchor" href="#文件读写">#</a> <mark>文件读写</mark></h1>
<h2 id="打开与关闭文件"><a class="markdownIt-Anchor" href="#打开与关闭文件">#</a> 打开与关闭文件</h2>
<p>在 C 语言中，通过文件类型的变量来实现读写文件，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	FILE* fp;<span class="comment">//定义一个文件指针，指针名为fp</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过以下函数可以实现读写文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * filename,<span class="type">const</span> <span class="type">char</span> * mode)</span>;</span><br><span class="line"><span class="comment">//打开路径为filename的文件，打开模式为mode</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE * fp)</span>;</span><br><span class="line"><span class="comment">//关闭fp所打开的文件</span></span><br><span class="line"><span class="comment">//注意，在文件读写操作完成后，一定要记得关闭，否则可能会导致意外错误</span></span><br></pre></td></tr></table></figure>
<p>打开模式包括以下几种：</p>
<table>
<thead>
<tr>
<th style="text-align:center">mode</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:center">以<strong>只读</strong>的方式打开一个<strong>已存在</strong>文件</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:center">以<strong>允许写入</strong>的方式打开一个文件，<strong>如果文件不存在，则会创建一个新的文件</strong>。写入时<strong>清空原有内容后再写入</strong>。</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:center">以<strong>追加写入</strong>的方式打开一个文件，<strong>如果文件不存在，则会创建一个新的文件</strong>。写入时<strong>在已有的内容后追加</strong>。</td>
</tr>
<tr>
<td style="text-align:center">r+</td>
<td style="text-align:center">以<strong>读写的方式打开一个</strong>已存在<strong>文件</strong></td>
</tr>
<tr>
<td style="text-align:center">w+</td>
<td style="text-align:center">以<strong>读写</strong>的方式打开一个文件，其他同 w</td>
</tr>
<tr>
<td style="text-align:center">a+</td>
<td style="text-align:center">以<strong>读写</strong>的方式打开一个文件，其他同 a</td>
</tr>
</tbody>
</table>
<p>使用时需要添加双引号，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fopen(<span class="string">&quot;./file_name.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">//文件名前的./表示代码文件的同目录下，../表示上一级目录</span></span><br><span class="line"><span class="comment">//也可以使用绝对路径：如D:/File/file_name.txt</span></span><br><span class="line"><span class="comment">//文件路径需要用双引号包含</span></span><br></pre></td></tr></table></figure>
<h2 id="读取与写入文件"><a class="markdownIt-Anchor" href="#读取与写入文件">#</a> 读取与写入文件</h2>
<p>EOF：文件结束的标志 (End Of File)，关闭文件时会自动添加，读取到 EOF 意味着文件结束。</p>
<p>相关函数原型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c,FILE * fp)</span>;</span><br><span class="line"><span class="comment">//函数fputc()把参数c的字符写入到fp所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生失误，则会返回EOF。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s,FILE *fp)</span>;</span><br><span class="line"><span class="comment">//函数fputs()把字符串s写入到fp所指向的输出流中。如果写入成功，它会返回一个非负值，如果错误，则会返回EOF。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE * fp)</span>;</span><br><span class="line"><span class="comment">//函数fgetc()从fp所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回EOF。</span></span><br><span class="line"><span class="type">char</span> * <span class="title function_">fgets</span><span class="params">(<span class="type">char</span> * buf,<span class="type">int</span> n,FILE * fp)</span>;</span><br><span class="line"><span class="comment">//函数fgets（）从fp所指向的输入流中读取n-1个字符。它会把读取的字符串复制到缓冲区buf，并在最后追加一个null字符来终止字符串。</span></span><br></pre></td></tr></table></figure>
<p>使用案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 50<span class="comment">//定义常量MAX_SIZE</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	fp = fopen(<span class="string">&quot;./file_name.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);<span class="comment">//以重写的方式打开file_name.txt文件</span></span><br><span class="line">	<span class="type">char</span> str[] = <span class="string">&quot;Hello World!\n&quot;</span>;<span class="comment">//定义字符数组str</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fputs</span>(str, fp) == EOF)<span class="comment">//写入str，如果返回EOF，报错</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;写入错误！&quot;</span>);</span><br><span class="line">	fclose(fp);<span class="comment">//关闭文件</span></span><br><span class="line"></span><br><span class="line">	fp = fopen(<span class="string">&quot;./file_name.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="comment">//以只读的方式打开file_name.txt文件</span></span><br><span class="line">	<span class="type">char</span> buf[MAX_SIZE];<span class="comment">//声明缓冲字符串buf</span></span><br><span class="line">	fgets(buf, MAX_SIZE, fp);<span class="comment">//读取，当读取到换行符(或者EOF)会自动停止，因此第二个参数直接填MAX_SIZE就可以</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);<span class="comment">//打印缓冲字符串buf</span></span><br><span class="line">	fclose(fp);<span class="comment">//关闭文件</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结语"><a class="markdownIt-Anchor" href="#结语">#</a> 结语</h1>
<p>写到这里差不多结束了，C 语言的基础大概就是这些，还有一部分不是很常用的 (我认为)，例如位运算、原码、反码、补码</p>
<p>又或是三目运算符 (问号) 之类的，这些我都没有写。</p>
<p>如果感兴趣，想要更多了解细节，可以自己去查一查。</p>
<p>学完这里可以尝试写一些算法题，仅是这个教程的代码量，实在太少，纯新手我比较推荐 PTA，上面的题目比较简单，对新手友好。</p>
<p>也可以尝试力扣或是洛谷之类的更知名的算法网站，但我觉得这些算法网站的题目，学完数据结构与算法再写会好一下。</p>
<p>那么就到这里了！</p>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/2023/02/24/DataStructureAndAlgorithms/</url>
    <content><![CDATA[<h1 id="数据结构与算法datastructureandalgorithms"><a class="markdownIt-Anchor" href="#数据结构与算法datastructureandalgorithms">#</a> 数据结构与算法 (DataStructureAndAlgorithms)</h1>
<h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项">#</a> 注意事项</h2>
<ol>
<li>该笔记使用 C++、开发环境为 VS2022</li>
<li>该笔记较少使用大量书面语言和数学证明去描述一些算法，因此不适合正规入门使用，也不适合考试使用</li>
</ol>
<h2 id="testarrcreate"><a class="markdownIt-Anchor" href="#testarrcreate">#</a> TestArrCreate</h2>
<p>作用：生成一个测试数组，用于测试代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">testArr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">testArr</span>();</span><br><span class="line">	~<span class="built_in">testArr</span>();</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* arr;</span><br><span class="line">	<span class="type">int</span> arrLen;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">createArr</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">printArr</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;testArr.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testArr::createArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;arrLen = <span class="built_in">rand</span>() % <span class="number">5</span> + <span class="number">5</span>;<span class="comment">//长度为5-10</span></span><br><span class="line">	<span class="keyword">this</span>-&gt;arr = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">this</span>-&gt;arrLen * <span class="number">4</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;arrLen; i++) &#123;</span><br><span class="line">		arr[i] = <span class="built_in">rand</span>() % <span class="number">300</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testArr::<span class="built_in">testArr</span>() &#123;</span><br><span class="line">	<span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">createArr</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testArr::~<span class="built_in">testArr</span>() &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;arr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;arr;</span><br><span class="line">		<span class="keyword">this</span>-&gt;arr = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testArr::printArr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;arrLen; i++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="keyword">this</span>-&gt;arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="算法-复杂度"><a class="markdownIt-Anchor" href="#算法-复杂度">#</a> 算法、复杂度：</h1>
<p><strong>算法 (Algorithm) 是为了解决某类问题而规定的一个有限长的操作序列。</strong></p>
<p>一个算法必须满足以下五个重要特性：</p>
<p>(1)<strong> 有穷性</strong>。一个算法必须总是在执行有穷步后结束，且每一步都必须在有穷时间内完成。</p>
<p>(2) <strong>确定性</strong>。对千每种情况下所应执行的操作，在算法中都有确切的规定，不会产生二义性， 使算法的执行者或阅读者都能明确其含义及如何执行。</p>
<p>(3) <strong>可行性</strong>。算法中的所有操作都可以通过已经实现的基本操作运算执行有限次来实现。</p>
<p>(4) <strong>输入</strong>。一个算法有零个或多个输入。当用函数描述算法时，输入往往是通过形参表示的， 在它们被调用时，从主调函数获得输入值。</p>
<p>(5) <strong>输出。</strong></p>
<hr>
<p>复杂度包括：时间复杂度与空间复杂度，通常我们更加看重一个算法的时间复杂度。</p>
<p>拿算法中最经典的高斯算法为例：</p>
<p>求 1~n 的和，有常规的算法：循环实现，与高斯算法，下面是代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常规实现：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		sum += i;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高斯算法实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> sum = (<span class="number">1</span> + n) * n / <span class="number">2</span>;</span><br><span class="line">	cout &lt;&lt; sum;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以注意到，当使用常规算法时，需要执行的语句数会随着整数 n 的变化而变化，成线性相关，当 n 为一万时，那么 sum+=i; 这条语句需要执行的次数就是一万次。而使用高斯算法时，无论 n 的值是多少，sum = (1 + n) * n / 2; 都只会执行一次。</p>
<p>假设每条语句的执行时间都相同，设为 1，则使用常规算法消耗的时间大致可以认为是 n*1，高斯算法消耗的时间大概是 1。</p>
<p>我们通常使用大 O 表示法，来表示一个算法的复杂度，这里可以写为：常规算法 O (n)，高斯算法 O (1)</p>
<p>需要注意的是，若是算法中使用了两个循环 (非嵌套)，执行了 2n 条语句，我们仍然记为 O (n)</p>
<p>又或者使用了 2，3，4 条语句，只要这个算法的代码实现并不会随 n 变动，我们仍然记为 O (1)</p>
<p>因此，O (2n)，O (3n)，O (5)，这些形式都是错误的。通常有以下几种表达式来描述时间复杂度：</p>
<ul>
<li>O (1)：常量阶</li>
<li>O (log n)：对数阶</li>
<li>O (n)：线性阶</li>
<li>O (n log n)：线性对数阶</li>
<li>O(n<sup>2</sup>)：二次方阶</li>
<li>O(2<sup>n</sup>)：指数阶</li>
<li>O (!n)：阶乘阶</li>
</ul>
<p>对于一个算法，比如排序一组数据：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>对于这组数据，显然只需要排序一次便能够得到有序数组，但是这并不代表使用的排序算法就是 O (1) 阶的，我们要按照最差的情况来估计，如果是冒泡排序，我们要按照每一次都需要排序来估计，第一次到第 n 次需要的执行的次数分别为 n-1 到 1，所以总执行次数为 n * (n - 1) / 2 也就是 1/2 * n^2 + 1/2 * n - 1/2 次，我们仅取其最大的部分，则冒泡排序的时间复杂度为 O (n<sup>2</sup>) 阶。</p>
<p>冒泡排序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maoPao</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrLen)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arrLen; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span> &#125;;</span><br><span class="line">	<span class="built_in">maoPao</span>(arr, <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="存储结构"><a class="markdownIt-Anchor" href="#存储结构">#</a> 存储结构：</h1>
<p>存储结构大致可以分为两类：</p>
<ol>
<li><strong>顺序结构：<strong>在</strong>物理内存中连续</strong>，并且在<strong>逻辑顺序上也连续</strong>。</li>
<li><strong>链式结构：<strong>包含</strong>数据域</strong>与<strong>指针域</strong>，在<strong>物理内存中不一定连续</strong>，但在<strong>逻辑顺序上连续</strong>。</li>
</ol>
<p>其中，数据域用于存储数据，指针域用于存储后继元素的地址。</p>
<p>如图：</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304072124933.png" alt="顺序结构与链式结构图"></p>
<p>由图可以直观的看出二者的差别。</p>
<p><strong>顺序结构与链式结构比较：</strong></p>
<p>顺序结构的<strong>数据存储密度更高</strong>，占用空间更少，<strong>但是需要一段连续的空间</strong>。</p>
<p>链式结构由于需要使用指针域保存与其关联的节点的地址，所以<strong>数据存储密度相对低</strong>，占用空间更多，但是由于分布存储的特点，<strong>并不需要一段连续的空间</strong>。</p>
<p>顺序结构的插入与删除更加繁琐，时间复杂度为 O (n)，但是顺序结构的修改，时间复杂度为 O (1)</p>
<p>链式结构的插入与删除，时间复杂度为 O (1)，但是查找数据和修改数据，时间复杂度为 O (n)</p>
<h1 id="线性结构"><a class="markdownIt-Anchor" href="#线性结构">#</a> <mark>线性结构：</mark></h1>
<h2 id="线性表list"><a class="markdownIt-Anchor" href="#线性表list">#</a> 线性表 (List)</h2>
<p><strong>线性表（List）：零个或多个数据元素的有限序列。</strong></p>
<p>线性表的数据集合为 {a1,a2,…,an}，假设每个元素的类型均为 DataType。其中，除第一个元素 a1 外，每一个元素有且只有一个直接前驱元素，除了最后一个元素 an 外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。</p>
<p>在较复杂的线性表中，一个数据元素可以由若干个数据项组成。在这种情况下，常把数据元素称为<strong>记录</strong>，含有大量记录的线性表又称为<strong>文件</strong></p>
<h3 id="使用c实现顺序表"><a class="markdownIt-Anchor" href="#使用c实现顺序表">#</a> 使用 C++ 实现顺序表：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* box;<span class="comment">//容器</span></span><br><span class="line">	<span class="type">int</span> m_size;</span><br><span class="line">	<span class="type">int</span> m_capacity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">List</span>() &#123;<span class="comment">//构造函数</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;m_capacity = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_size = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;box = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_capacity];</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	~<span class="built_in">List</span>() &#123;<span class="comment">//析构函数</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;box != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;box;</span><br><span class="line">			<span class="keyword">this</span>-&gt;box = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//这里仅提供部分方法用于学习，练习，C++的STL中的List更完善</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(T val)</span> </span>&#123;<span class="comment">//头插法</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_size == <span class="keyword">this</span>-&gt;m_capacity) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_capacity *= <span class="number">2</span>;</span><br><span class="line">			T* temp = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_capacity];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_size; i++) &#123;</span><br><span class="line">				temp[i] = <span class="keyword">this</span>-&gt;box[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;box;</span><br><span class="line">			<span class="keyword">this</span>-&gt;box = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="keyword">this</span>-&gt;m_size; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">			<span class="keyword">this</span>-&gt;box[i] = <span class="keyword">this</span>-&gt;box[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">this</span>-&gt;box[<span class="number">0</span>] = val;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T val)</span> </span>&#123;<span class="comment">//尾插法</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_size == <span class="keyword">this</span>-&gt;m_capacity) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_capacity *= <span class="number">2</span>;</span><br><span class="line">			T* temp = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_capacity];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_size; i++) &#123;</span><br><span class="line">				temp[i] = <span class="keyword">this</span>-&gt;box[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;box;</span><br><span class="line">			<span class="keyword">this</span>-&gt;box = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;box[<span class="keyword">this</span>-&gt;m_size] = val;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> index, T val)</span> </span>&#123;<span class="comment">//间插法</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_size == <span class="keyword">this</span>-&gt;m_capacity) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_capacity *= <span class="number">2</span>;</span><br><span class="line">			T* temp = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_capacity];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_size; i++) &#123;</span><br><span class="line">				temp[i] = <span class="keyword">this</span>-&gt;box[i];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;box;</span><br><span class="line">			<span class="keyword">this</span>-&gt;box = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="keyword">this</span>-&gt;m_size; i &gt; index; i--)</span><br><span class="line">			<span class="keyword">this</span>-&gt;box[i] = <span class="keyword">this</span>-&gt;box[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">this</span>-&gt;box[index] = val;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">popByIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;<span class="comment">//通过下标删除元素</span></span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>-&gt;m_size) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Index error&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; <span class="keyword">this</span>-&gt;m_size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;box[i] = <span class="keyword">this</span>-&gt;box[i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_size--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="comment">//返回容器内元素数</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">capacity</span><span class="params">()</span></span>&#123;<span class="comment">//返回容器容量</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_capacity;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;<span class="comment">//判断容器内是否为空</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_size == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">findByElem</span><span class="params">(T Elem)</span> </span>&#123;<span class="comment">//通过元素本身查找,并返回其下标,未找到返回-1</span></span><br><span class="line">		<span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_size; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;box[i] == Elem) &#123;</span><br><span class="line">				index = i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> index;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">T <span class="title">getElemByIndex</span><span class="params">(<span class="type">int</span> index)</span> </span>&#123;<span class="comment">//通过下标获取元素</span></span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>-&gt;m_size) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Index error.Return head element!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>-&gt;box[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;box[index];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;<span class="comment">//清空容器内所有元素</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;m_size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>main 函数调试</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;List.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;testArr.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	testArr ta;</span><br><span class="line">	List&lt;<span class="type">int</span>&gt; list;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		list.<span class="built_in">push_front</span>(ta.arr[i]);<span class="comment">//头插测试</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		list.<span class="built_in">push_back</span>(ta.arr[i]);<span class="comment">//尾插测试</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; list.<span class="built_in">getElemByIndex</span>(i) &lt;&lt; <span class="string">&quot;\t&quot;</span>;<span class="comment">//获取元素测试</span></span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	list.<span class="built_in">popByIndex</span>(<span class="number">0</span>);<span class="comment">//删除测试</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; list.<span class="built_in">getElemByIndex</span>(i) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	list.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="number">100</span>);<span class="comment">//间插测试</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; list.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; list.<span class="built_in">getElemByIndex</span>(i) &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	list.<span class="built_in">clear</span>();<span class="comment">//清空测试</span></span><br><span class="line">	<span class="keyword">if</span> (list.<span class="built_in">isEmpty</span>()) &#123;<span class="comment">//判断是否为空测试</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;已清空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用c实现单链表"><a class="markdownIt-Anchor" href="#使用c实现单链表">#</a> 使用 C++ 实现单链表：</h3>
<p>单链表指指针域中<strong>仅仅保存单方向指向后继节点</strong>的指针的链式存储线性表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Link.hpp</span></span><br><span class="line"><span class="comment">//该链表并未提供间插法</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;<span class="comment">//节点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	T data;</span><br><span class="line">	Node* next;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Node</span>(T value) &#123;<span class="comment">//构造</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;data = value;</span><br><span class="line">		<span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Node</span>() &#123;<span class="comment">//析构</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span> <span class="keyword">this</span>-&gt;next;</span><br><span class="line">			<span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Link</span> &#123;<span class="comment">//链表头</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">//T data;</span></span><br><span class="line">	Node&lt;T&gt;* next;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line">	Node&lt;T&gt;* end;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Link</span>() &#123;<span class="comment">//构造函数</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;end = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Link</span>() &#123;<span class="comment">//析构函数</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;end = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_front</span><span class="params">(T value)</span> </span>&#123;<span class="comment">//头插</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;T&gt;(value);</span><br><span class="line">			<span class="keyword">this</span>-&gt;end = <span class="keyword">this</span>-&gt;next;</span><br><span class="line">			<span class="keyword">this</span>-&gt;size++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Node&lt;T&gt;* newNode = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;T&gt;(value);</span><br><span class="line">		newNode-&gt;next = <span class="keyword">this</span>-&gt;next;</span><br><span class="line">		<span class="keyword">this</span>-&gt;next = newNode;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(T value)</span> </span>&#123;<span class="comment">//尾插</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;T&gt;(value);</span><br><span class="line">			<span class="keyword">this</span>-&gt;end = <span class="keyword">this</span>-&gt;next;</span><br><span class="line">			<span class="keyword">this</span>-&gt;size++;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;end-&gt;next = <span class="keyword">new</span> <span class="built_in">Node</span>&lt;T&gt;(value);</span><br><span class="line">		<span class="keyword">this</span>-&gt;end = <span class="keyword">this</span>-&gt;end-&gt;next;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">Node&lt;T&gt;* <span class="title">find</span><span class="params">(T key)</span> </span>&#123;<span class="comment">//查找，并返回该节点</span></span><br><span class="line">		Node&lt;T&gt;* p = <span class="keyword">this</span>-&gt;next;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;data == key) &#123;</span><br><span class="line">				<span class="keyword">return</span> p;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>&#123;<span class="comment">//尾删</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Node&lt;T&gt;* np = <span class="keyword">this</span>-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (np == <span class="keyword">this</span>-&gt;end) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;end = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;size--;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (; np-&gt;next != end; np = np-&gt;next);</span><br><span class="line">		np-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;end = np;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pop_front</span><span class="params">()</span> </span>&#123;<span class="comment">//头删</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;next = <span class="keyword">this</span>-&gt;next-&gt;next;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">pop_Node</span><span class="params">(Node&lt;T&gt;* node)</span> </span>&#123;<span class="comment">//根据查找返回节点删除</span></span><br><span class="line">		<span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;pop error!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (Node&lt;T&gt;* np = <span class="keyword">this</span>-&gt;next; np-&gt;next != <span class="literal">NULL</span>; np = np-&gt;next) &#123;</span><br><span class="line">			<span class="keyword">if</span> (np-&gt;next == node) &#123;</span><br><span class="line">				np-&gt;next = np-&gt;next-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">printLink</span><span class="params">()</span> </span>&#123;<span class="comment">//打印链表</span></span><br><span class="line">		<span class="keyword">for</span> (Node&lt;T&gt;* p = <span class="keyword">this</span>-&gt;next; p != <span class="literal">NULL</span>; p = p-&gt;next) &#123;</span><br><span class="line">			cout &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clearLink</span><span class="params">()</span> </span>&#123;<span class="comment">//清空链表</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;end = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>main 函数调试</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Link.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;testArr.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	testArr ta;</span><br><span class="line">	Link&lt;<span class="type">int</span>&gt; link;</span><br><span class="line">	<span class="comment">//尾插测试</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		link.<span class="built_in">push_back</span>(ta.arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//头插测试</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = ta.arrLen - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">		link.<span class="built_in">push_front</span>(ta.arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	link.<span class="built_in">printLink</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="comment">//按节点删除，与查找测试</span></span><br><span class="line">	link.<span class="built_in">pop_Node</span>(link.<span class="built_in">find</span>(<span class="number">2</span>));</span><br><span class="line">	<span class="comment">//头删测试</span></span><br><span class="line">	link.<span class="built_in">pop_front</span>();</span><br><span class="line">	<span class="comment">//尾删测试</span></span><br><span class="line">	link.<span class="built_in">pop_back</span>();</span><br><span class="line">	link.<span class="built_in">printLink</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">	<span class="comment">//清空链表测试</span></span><br><span class="line">	link.<span class="built_in">clearLink</span>();</span><br><span class="line">	link.<span class="built_in">printLink</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="栈stack"><a class="markdownIt-Anchor" href="#栈stack">#</a> 栈 (Stack)</h2>
<p><strong>特点:<mark> 先进后出 (FILO)</mark></strong>(First in Last out)</p>
<p>栈的结构类似于电梯，先进去的元素会在栈底，后进去的元素会在栈顶，后进的元素会先出，先进的元素会后出。</p>
<p>如下图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">|		|	(栈顶)	</span><br><span class="line">|		|</span><br><span class="line">|		|</span><br><span class="line">|		|</span><br><span class="line">---------	(栈底)</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line">|	(存入数据时)</span><br><span class="line">|</span><br><span class="line">V</span><br><span class="line"></span><br><span class="line">|		|	DATA1先入栈，在栈底</span><br><span class="line">|		|	DATA2后入栈，在栈顶</span><br><span class="line">| DATA2	|	DATA2会先出栈</span><br><span class="line">| DATA1	|	随后DATA1才能出栈</span><br><span class="line">---------</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用c实现顺序栈"><a class="markdownIt-Anchor" href="#使用c实现顺序栈">#</a> 使用 C++ 实现顺序栈：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">int</span> size;<span class="comment">//记录栈内元素个数</span></span><br><span class="line">	<span class="type">int</span> len;<span class="comment">//记录栈容量</span></span><br><span class="line">	T* stack;<span class="comment">//栈底</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Stack</span>() &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;len = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;stack = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Stack</span>(<span class="type">int</span> len) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;len = len;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;stack = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Stack</span>() &#123;</span><br><span class="line">		<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;stack;</span><br><span class="line">		<span class="keyword">this</span>-&gt;stack = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//栈空返回1</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//栈非空返回0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">T <span class="title">GetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;stack[<span class="keyword">this</span>-&gt;size - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(T val)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//如果栈满了，则扩栈</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="keyword">this</span>-&gt;len) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;len *= <span class="number">2</span>;</span><br><span class="line">			T* newSpace = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;size; i++) &#123;</span><br><span class="line">				newSpace[i] = <span class="keyword">this</span>-&gt;stack[i];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;stack;</span><br><span class="line">			<span class="keyword">this</span>-&gt;stack = newSpace;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">this</span>-&gt;stack[<span class="keyword">this</span>-&gt;size] = val;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">IsEmpty</span>())</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>main 函数调试</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Stack.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;testArr.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	testArr ta;</span><br><span class="line">	Stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	ta.<span class="built_in">printArr</span>();<span class="comment">//打印数组便于比较数据</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//入栈</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		s.<span class="built_in">Push</span>(ta.arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取栈顶和出栈</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		cout &lt;&lt; s.<span class="built_in">GetTop</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		s.<span class="built_in">Pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用c实现链栈"><a class="markdownIt-Anchor" href="#使用c实现链栈">#</a> 使用 C++ 实现链栈：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StackNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	T data;<span class="comment">//存储数据</span></span><br><span class="line">	StackNode&lt;T&gt;* prior;<span class="comment">//指向前节点</span></span><br><span class="line">	<span class="built_in">StackNode</span>(T val, StackNode* node = <span class="literal">nullptr</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;data = val;</span><br><span class="line">		<span class="keyword">this</span>-&gt;prior = node;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">StackNode</span>() &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkStack</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	StackNode&lt;T&gt;* top;<span class="comment">//栈顶</span></span><br><span class="line">	<span class="type">int</span> size;<span class="comment">//栈内元素数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">LinkStack</span>() &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;top = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">T <span class="title">GetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;top-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(T val)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建新节点，并把其前指针指向当前的top</span></span><br><span class="line">		StackNode&lt;T&gt;* sn = <span class="keyword">new</span> <span class="built_in">StackNode</span>&lt;T&gt;(val, <span class="keyword">this</span>-&gt;top);</span><br><span class="line">		<span class="comment">//top改变</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;top = sn;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//如果栈空，直接返回</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;<span class="built_in">IsEmpty</span>())</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		StackNode&lt;T&gt;* deln = <span class="keyword">this</span>-&gt;top;</span><br><span class="line">		<span class="keyword">this</span>-&gt;top = <span class="keyword">this</span>-&gt;top-&gt;prior;</span><br><span class="line">		<span class="keyword">delete</span> deln;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size--;</span><br><span class="line">		deln = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">LinkStack</span>() &#123;</span><br><span class="line">		<span class="comment">//弹出直到栈空</span></span><br><span class="line">		<span class="keyword">while</span> (<span class="keyword">this</span>-&gt;top)</span><br><span class="line">			<span class="keyword">this</span>-&gt;<span class="built_in">Pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>main 函数调试</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;LinkStack.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;testArr.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	testArr ta;</span><br><span class="line">	LinkStack&lt;<span class="type">int</span>&gt; ls;</span><br><span class="line">	ta.<span class="built_in">printArr</span>();<span class="comment">//打印数组便于比较数据</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//入栈</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		ls.<span class="built_in">Push</span>(ta.arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取栈顶和出栈</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		cout &lt;&lt; ls.<span class="built_in">GetTop</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		ls.<span class="built_in">Pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="栈进制转换问题"><a class="markdownIt-Anchor" href="#栈进制转换问题">#</a> 栈：进制转换问题：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Stack.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*使用栈将十进制数转换为二进制数*/</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> number = <span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">    Stack&lt;<span class="type">int</span>&gt; stack;</span><br><span class="line">    <span class="keyword">while</span> (number != <span class="number">0</span>) &#123;</span><br><span class="line">        stack.<span class="built_in">Push</span>(number % <span class="number">2</span>);</span><br><span class="line">        number /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> stackLength = stack.<span class="built_in">Size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stackLength; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; stack.<span class="built_in">GetTop</span>();</span><br><span class="line">        stack.<span class="built_in">Pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列queue"><a class="markdownIt-Anchor" href="#队列queue">#</a> 队列 (Queue)</h2>
<p><strong>特点:<mark> 先进先出 (FIFO)</mark></strong>(First in First out)</p>
<p>类似于排队。仅能从队尾进入，队首离开。</p>
<h3 id="使用c实现顺序循环队列"><a class="markdownIt-Anchor" href="#使用c实现顺序循环队列">#</a> 使用 C++ 实现顺序循环队列：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	T* queue;</span><br><span class="line">	<span class="type">int</span> head;<span class="comment">//头指针</span></span><br><span class="line">	<span class="type">int</span> rear;<span class="comment">//尾指针</span></span><br><span class="line">	<span class="type">int</span> size;<span class="comment">//记录队列内元素数</span></span><br><span class="line">	<span class="type">int</span> len;<span class="comment">//记录队列长度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Queue</span>() &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;len = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;head = <span class="keyword">this</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;queue = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Queue</span>(<span class="type">int</span> len) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;len = len;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;head = <span class="keyword">this</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;queue = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(T val)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//如果队满，扩队</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;len == <span class="keyword">this</span>-&gt;size) &#123;</span><br><span class="line">			<span class="type">int</span> length = <span class="keyword">this</span>-&gt;len;</span><br><span class="line">			<span class="keyword">this</span>-&gt;len *= <span class="number">2</span>;</span><br><span class="line">			T* newSpace = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;len];</span><br><span class="line">			<span class="type">int</span> newIndex = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">			<span class="type">int</span> index = <span class="keyword">this</span>-&gt;head;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;size; i++) &#123;</span><br><span class="line">				newSpace[newIndex] = <span class="keyword">this</span>-&gt;queue[index];</span><br><span class="line">				newIndex = (newIndex + <span class="number">1</span>) % <span class="keyword">this</span>-&gt;len;</span><br><span class="line">				index = (index + <span class="number">1</span>) % length;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;queue;</span><br><span class="line">			<span class="keyword">this</span>-&gt;queue = newSpace;</span><br><span class="line">			<span class="keyword">this</span>-&gt;rear = newIndex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将数据存入队尾</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;queue[<span class="keyword">this</span>-&gt;rear] = val;</span><br><span class="line">		<span class="comment">//尾指针+1，使用循环队列，所以对队列长度求余</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;rear = (<span class="keyword">this</span>-&gt;rear + <span class="number">1</span>) % <span class="keyword">this</span>-&gt;len;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">IsEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;size == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">T <span class="title">GetTop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;queue[head];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">Size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//队空，则直接返回</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">IsEmpty</span>())</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="comment">//头指针后移，使用循环队列，所以对队列长度求余</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;head = (<span class="keyword">this</span>-&gt;head + <span class="number">1</span>) % <span class="keyword">this</span>-&gt;len;</span><br><span class="line">		<span class="keyword">this</span>-&gt;size--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>main 函数调试</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Queue.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;testArr.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	testArr ta;</span><br><span class="line">	Queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	ta.<span class="built_in">printArr</span>();<span class="comment">//打印数组便于比较数据</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//入栈</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		q.<span class="built_in">Push</span>(ta.arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取栈顶和出栈</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ta.arrLen; i++) &#123;</span><br><span class="line">		cout &lt;&lt; q.<span class="built_in">Front</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		q.<span class="built_in">Pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用c实现链式队列"><a class="markdownIt-Anchor" href="#使用c实现链式队列">#</a> 使用 C++ 实现链式队列：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="队列热土豆问题"><a class="markdownIt-Anchor" href="#队列热土豆问题">#</a> 队列：热土豆问题：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用队列结构完成热土豆问题：</span></span><br><span class="line"><span class="comment">热土豆问题(约瑟夫问题、击鼓传花)：</span></span><br><span class="line"><span class="comment">从第1个人将热土豆向后传，选择一个数number，当热土豆传递到第number次时，持有热土豆的人离队，直到队列中只剩一人</span></span><br><span class="line"><span class="comment">解决思路：</span></span><br><span class="line"><span class="comment">1.热土豆不需要传递，只需将热土豆始终标记在队首</span></span><br><span class="line"><span class="comment">2.将队首移除加入队尾，视作一次传递</span></span><br><span class="line"><span class="comment">3.当传递到number次时，将队首永久移除</span></span><br><span class="line"><span class="comment">4.重复直至仅剩一人</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//程序实现：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Queue.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;testArr.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue&lt;string&gt; q;</span><br><span class="line">    string seed[] = &#123; <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;老六&quot;</span>, <span class="string">&quot;头七&quot;</span>, <span class="string">&quot;老八&quot;</span>, <span class="string">&quot;九哥&quot;</span> &#125;;</span><br><span class="line">    <span class="comment">//最终结果应该为：头七、王五、李四、老刘、九哥、张三、老八</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        q.<span class="built_in">Push</span>(seed[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> number = <span class="number">5</span>;<span class="comment">//假设number为5</span></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">IsEmpty</span>()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; number; i++) &#123;</span><br><span class="line">            string temp = q.<span class="built_in">Front</span>();</span><br><span class="line">            q.<span class="built_in">Pop</span>();</span><br><span class="line">            q.<span class="built_in">Push</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; q.<span class="built_in">Front</span>() &lt;&lt; endl;</span><br><span class="line">        q.<span class="built_in">Pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="队列打印任务问题"><a class="markdownIt-Anchor" href="#队列打印任务问题">#</a> 队列：打印任务问题：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    打印任务问题：</span></span><br><span class="line"><span class="comment">    一个实验室，在任意的一个小时内，大约有10名学生在场，</span></span><br><span class="line"><span class="comment">    这一个小时中，每个人会发起2次左右打印，每次1~20页。</span></span><br><span class="line"><span class="comment">    打印机的性能：</span></span><br><span class="line"><span class="comment">    以草稿模式打印：每分钟10页</span></span><br><span class="line"><span class="comment">    以正常模式打印：打印质量更高，每分钟5页</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    如何设定打印机的模式，让所有人都不会等太久的前提下尽量提高打印质量?</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    问题思路：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    对象：打印任务、打印队列、打印机</span></span><br><span class="line"><span class="comment">    打印任务属性：提交时间、打印页数</span></span><br><span class="line"><span class="comment">    打印队列属性：具有FIFO性质的打印任务队列</span></span><br><span class="line"><span class="comment">    打印机属性：打印速度、工作状态(是否正忙)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    过程：</span></span><br><span class="line"><span class="comment">    1.生成和提交打印任务</span></span><br><span class="line"><span class="comment">    生成概率：每小时会有10个学生提交共计20个打印任务，约为每180秒提交一个打印任务</span></span><br><span class="line"><span class="comment">    则生成一份打印任务的概率为  (1/180) 每秒</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2.打印页数：页数为1~20之间的概率相同</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.实施打印：当前正在进行的打印任务</span></span><br><span class="line"><span class="comment">    打印结束倒计时：新任务开始时进行倒计时，倒计时为0时打印完毕，执行下一打印任务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    4.模拟时间：</span></span><br><span class="line"><span class="comment">    统一的时间框架：以统一最小单位(秒)均匀流逝的时间，设定结束时间</span></span><br><span class="line"><span class="comment">    同步所有过程：在一个时间单位里，对生成打印任务和实施打印两个过程各处理一次</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印机头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrintProblem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">bool</span> free;<span class="comment">//打印机状态</span></span><br><span class="line">	<span class="type">float</span> speed;<span class="comment">//打印机打印速度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">PrintProblem</span>(<span class="type">int</span> type);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">printType</span><span class="params">(<span class="type">int</span> type)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//打印机源文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;PrintProblem.h&quot;</span></span></span><br><span class="line">PrintProblem::<span class="built_in">PrintProblem</span>(<span class="type">int</span> type) &#123;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="number">1</span>) <span class="keyword">this</span>-&gt;speed = <span class="number">10.0</span> / <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">this</span>-&gt;speed = <span class="number">5.0</span> / <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">this</span>-&gt;free = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintProblem::printType</span><span class="params">(<span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="number">1</span>) <span class="keyword">this</span>-&gt;speed = <span class="number">10.0</span> / <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">this</span>-&gt;speed = <span class="number">5.0</span> / <span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;PrintProblem.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">printTask</span> &#123;<span class="comment">//打印任务结构体</span></span><br><span class="line">    <span class="type">int</span> startTime;<span class="comment">//开始时间</span></span><br><span class="line">    <span class="type">int</span> printTime;<span class="comment">//打印时间</span></span><br><span class="line">    <span class="type">int</span> printPage;<span class="comment">//打印页数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;<span class="comment">//模拟时间，单位秒</span></span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    queue&lt;<span class="keyword">struct</span> printTask&gt; printQueue;<span class="comment">//该队列用于存储打印任务</span></span><br><span class="line">    <span class="function">PrintProblem <span class="title">printer</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//模式1为草稿模式，模式2为正常模式</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; waitTime;<span class="comment">//完成任务所需时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (flag &lt; <span class="number">3600</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">rand</span>() % <span class="number">180</span> == <span class="number">0</span>) &#123;<span class="comment">//生成打印任务并加入打印队列</span></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">printTask</span> newTask;</span><br><span class="line">            newTask.printPage = <span class="built_in">rand</span>() % <span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line">            newTask.startTime = flag;</span><br><span class="line">            newTask.printTime = <span class="built_in">ceil</span>(newTask.printPage / printer.speed);            </span><br><span class="line">            printQueue.<span class="built_in">push</span>(newTask);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!printQueue.<span class="built_in">empty</span>() &amp;&amp; printer.free) &#123;<span class="comment">//开始打印任务</span></span><br><span class="line">            printer.free = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!printer.free) &#123;<span class="comment">//执行打印任务</span></span><br><span class="line">            printQueue.<span class="built_in">front</span>().printTime--;</span><br><span class="line">            <span class="keyword">if</span> (printQueue.<span class="built_in">front</span>().printTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                printer.free = <span class="literal">true</span>;</span><br><span class="line">                <span class="type">int</span> finishTime = flag;</span><br><span class="line">                waitTime.<span class="built_in">push</span>(finishTime - printQueue.<span class="built_in">front</span>().startTime);</span><br><span class="line">                printQueue.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flag++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> average = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="type">int</span> length = waitTime.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        average += waitTime.<span class="built_in">front</span>();</span><br><span class="line">        waitTime.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;平均等待时间&quot;</span> &lt;&lt; (average / length) &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; <span class="string">&quot;还有&quot;</span> &lt;&lt; printQueue.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;个打印任务未完成&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双端队列deque"><a class="markdownIt-Anchor" href="#双端队列deque">#</a> 双端队列 (Deque)</h2>
<h3 id="c提供的双端队列"><a class="markdownIt-Anchor" href="#c提供的双端队列">#</a> C++ 提供的双端队列：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++提供的双端队列位于头文件&lt;deque&gt;中</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    deque&lt;type&gt; dequeName;</span><br><span class="line">    <span class="comment">//下面为deque的方法</span></span><br><span class="line">    <span class="built_in">push_back</span>();<span class="comment">//在队列尾部添加元素，无返回值。</span></span><br><span class="line">	<span class="built_in">push_front</span>();<span class="comment">//在队列头部添加元素，无返回值；</span></span><br><span class="line">	<span class="built_in">pop_back</span>();<span class="comment">//删除队列尾部的元素，无返回值；</span></span><br><span class="line">	<span class="built_in">pop_front</span>();<span class="comment">//删除队列头部的元素，无返回值；</span></span><br><span class="line">	<span class="built_in">front</span>();<span class="comment">//获得队列头部元素。</span></span><br><span class="line">	<span class="built_in">back</span>();<span class="comment">//获得队列尾部元素。</span></span><br><span class="line">	<span class="built_in">size</span>();<span class="comment">//获得队列大小。</span></span><br><span class="line">	<span class="built_in">empty</span>();<span class="comment">//判断队列是否为空。队列空：返回true；不空：返回false。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双端队列回文词判断"><a class="markdownIt-Anchor" href="#双端队列回文词判断">#</a> 双端队列：&quot;回文词&quot; 判断：</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">“回文词”：指正读反读都一样的词，如：abccba</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/*使用双端队列判断回文词*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deque&lt;string&gt; dQ;</span><br><span class="line">    string huiWen[] = &#123; <span class="string">&quot;上&quot;</span>,<span class="string">&quot;海&quot;</span>,<span class="string">&quot;自&quot;</span>,<span class="string">&quot;来&quot;</span>,<span class="string">&quot;水&quot;</span>,<span class="string">&quot;来&quot;</span>,<span class="string">&quot;自&quot;</span> ,<span class="string">&quot;海&quot;</span>, <span class="string">&quot;上&quot;</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(huiWen) / <span class="built_in">sizeof</span>(huiWen[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        dQ.<span class="built_in">push_front</span>(huiWen[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    len = dQ.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">    <span class="type">bool</span> judge = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dQ.<span class="built_in">front</span>() == dQ.<span class="built_in">back</span>()) &#123;</span><br><span class="line">            dQ.<span class="built_in">pop_front</span>();</span><br><span class="line">            dQ.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> judge = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (judge) cout &lt;&lt; <span class="string">&quot;该string为回文&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;该string不是回文&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="散列表hash-table哈希表"><a class="markdownIt-Anchor" href="#散列表hash-table哈希表">#</a> 散列表 (Hash Table / 哈希表)</h2>
<p>创建一个存储空间，每个位置有对应的槽号，将数据存储后，只需要通过槽号进行读取。</p>
<p>则可以实现时间复杂度为 O (1) 的查找速度。</p>
<p>我们将数据项占据的比例称为散列表的 &quot;负载因子&quot;。例如：</p>
<p>某散列表大小为 11，存储项共 6 个，则其负载因子为 6/11</p>
<p><strong>冲突：指两项数据，通过散列函数计算后，得到相同的 Hash 值</strong></p>
<h3 id="散列函数"><a class="markdownIt-Anchor" href="#散列函数">#</a> 散列函数</h3>
<p>(1) 求余散列函数：</p>
<p>假设散列表的总大小为 size，要存储的数据项为 item，则可以使用 h (item) = item % size</p>
<p>其中 h (item) 为 item 对应的存储槽号。若冲突，则将槽号向后顺延。</p>
<p>(2) 折叠散列函数：</p>
<p>将数据项按照位数分为若干段，再将几段数字相加，最后使用散列表大小求余，得到散列值。</p>
<p>(3) 平方取中散列函数：</p>
<p>先将数据项做平方运算，然后取平方数的中间两位。再对散列表大小求余。</p>
<h3 id="md5与sha"><a class="markdownIt-Anchor" href="#md5与sha">#</a> MD5 与 SHA</h3>
<p>MD5 与 SHA 都是为了实现散列表槽位计算而出现的散列表函数。</p>
<p>将任意数据进行 MD5 或 SHA 计算后，会获得相应的散列值 (MD5 计算出的 Hash 值为 128 位，SHA0 计算出的 Hash 值为 160 位)</p>
<p>使用 MD5 或 SHA 计算出的 Hash 值几乎不存在冲突的可能。</p>
<h3 id="区块链技术"><a class="markdownIt-Anchor" href="#区块链技术">#</a> 区块链技术</h3>
<p>区块链的发展得益于散列函数。</p>
<p><strong>区块链是大规模的分布式数据库。</strong></p>
<p>区块链的最本质特征是 &quot;去中心化&quot;。不存在任何控制中心、协调中心节点。所有的节点都是平等的，无法被控制。</p>
<p>区块链由一个个区块 (block) 组成，区块分为头 (head) 和体 (body)。</p>
<p>区块头记录了一些元数据和链接到前一个区块的信息：生成时间、前一个区块的散列值。</p>
<p>工作量证明 (Proof of Work):</p>
<p>由于区块链是大规模的分布式数据库，同步较慢，新区快的添加速度需要得到控制。</p>
<p>目前最大规模区块链 Bitcoin (比特币) 采用的速度是平均每 10 分钟生成一个区块。</p>
<h3 id="处理冲突"><a class="markdownIt-Anchor" href="#处理冲突">#</a> 处理冲突</h3>
<p>(1) 开放地址</p>
<p>将冲突的数据项向后顺延，或者跳跃式顺延。</p>
<p>如 data1 和 data2 同样对应 0，则 data1 存于 0，data2 顺延存于 1。</p>
<p>但是这种顺延方式，若是冲突较多，则会导致冲突数据大量集中。</p>
<p>因此可以采取跳跃式顺延解决。</p>
<p>如 data1 存于 0，data2 存于 0+skip，skip 可以是任意不可以整除表大小的数。如果 skip 可以整除表，则会有部分槽永远不会被顺延。</p>
<p>(2) 数据链</p>
<p>将槽位的存储空间扩大。</p>
<p>如 data1 和 data2 同样对应 0，则使用数组等方式，将之一起存入 0 槽位。</p>
<p>查找时使用顺序查找的方式，从而获取数据项。这是介于 O (1) 和 O (n) 之间的选择。</p>
<h3 id="c提供的map类"><a class="markdownIt-Anchor" href="#c提供的map类">#</a> C++ 提供的 map 类</h3>
<p>map 是 STL 的一个关联容器，它提供一对一的 hash。</p>
<p>​	第一个可以称为关键字 (key)，每个关键字只能在 map 中出现一次；</p>
<p>​	第二个可能称为该关键字的值 (value)；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++提供的map类位于头文件&lt;map&gt;中</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    map&lt;keyType, valueType&gt; mapName;<span class="comment">//创建一个map对象，通常keyType为int</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//接下来以创建学生map对象为例</span></span><br><span class="line">    map&lt;<span class="type">int</span>, string&gt; mapStudent;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">begin</span>();<span class="comment">//返回指向容器中第一个（注意，是已排好序的第一个）键值对的双向迭代器。</span></span><br><span class="line">    <span class="built_in">end</span>();<span class="comment">//返回指向容器最后一个元素（注意，是已排好序的最后一个）所在位置后一个位置的双向迭代器，通常和 begin() 结合使用。</span></span><br><span class="line">    <span class="built_in">rbegin</span>();<span class="comment">//返回指向最后一个（注意，是已排好序的最后一个）元素的反向双向迭代器。</span></span><br><span class="line">    <span class="built_in">rend</span>();<span class="comment">//返回指向第一个（注意，是已排好序的第一个）元素所在位置前一个位置的反向双向迭代器。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cbegin</span>(); <span class="comment">//和 begin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改容器内存储的键值对。</span></span><br><span class="line">	<span class="built_in">cend</span>();   <span class="comment">//和 end() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改容器内存储的键值对。</span></span><br><span class="line">	<span class="built_in">crbegin</span>();<span class="comment">//和 rbegin() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改容器内存储的键值对。</span></span><br><span class="line">	<span class="built_in">crend</span>();  <span class="comment">//和 rend() 功能相同，只不过在其基础上，增加了 const 属性，不能用于修改容器内存储的键值对。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">find</span>(key);<span class="comment">//在 map 容器中查找键为 key 的键值对，如果成功找到，则返回指向该键值对的双向迭代器；反之，则返回和 end() 方法一样的迭代器。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lower_bound</span>(key);<span class="comment">//返回一个指向当前 map 容器中第一个大于或等于 key 的键值对的双向迭代器。</span></span><br><span class="line">    <span class="built_in">upper_bound</span>(key);<span class="comment">//返回一个指向当前 map 容器中第一个大于 key 的键值对的迭代器。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">equal_range</span>(key);</span><br><span class="line">    <span class="comment">//该方法返回一个 pair 对象（包含 2 个双向迭代器），其中 pair.first 和 lower_bound() 方法的返回值等价。</span></span><br><span class="line">    <span class="comment">//pair.second 和 upper_bound() 方法的返回值等价。</span></span><br><span class="line">    <span class="comment">//也就是说，该方法将返回一个范围，该范围中包含的键为 key 的键值对（map 容器键值对唯一，因此该范围最多包含一个键值对）。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">empty</span>();<span class="comment">//若容器为空，则返回 true；否则 false。</span></span><br><span class="line">    <span class="built_in">size</span>();<span class="comment">//返回当前 map 容器中存有键值对的个数。</span></span><br><span class="line">    <span class="built_in">max_size</span>();<span class="comment">//返回 map 容器所能容纳键值对的最大个数，不同的操作系统，其返回值亦不相同。</span></span><br><span class="line">    <span class="keyword">operator</span>[];<span class="comment">//map容器重载了[]运算符，只要知道map容器中某个值对应的键，就可以向获取数组中元素那样，通过键直接获取对应的值。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">at</span>(key);<span class="comment">//找到 map 容器中 key 键对应的值，如果找不到，该函数会引发 out_of_range 异常。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>(&#123;key,value&#125;);<span class="comment">//使用insert函数插入数据</span></span><br><span class="line">    <span class="built_in">erase</span>();<span class="comment">//删除 map 容器指定位置、指定键（key）值或者指定区域内的键值对。</span></span><br><span class="line">    <span class="built_in">swap</span>();<span class="comment">//交换 2 个 map 容器中存储的键值对，这意味着，操作的 2 个键值对的类型必须相同。</span></span><br><span class="line">    <span class="built_in">clear</span>();<span class="comment">//清空 map 容器中所有的键值对，即使 map 容器的 size() 为 0。</span></span><br><span class="line">    <span class="built_in">emplace</span>();<span class="comment">//在当前 map 容器中的指定位置处构造新键值对。其效果和插入键值对一样，但效率更高。</span></span><br><span class="line">    <span class="built_in">emplace_hint</span>();<span class="comment">//在本质上和 emplace() 在 map 容器中构造新键值对的方式是一样的。</span></span><br><span class="line">    <span class="comment">//不同之处在于，使用者必须为该方法提供一个指示键值对生成位置的迭代器，并作为该方法的第一个参数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">count</span>(key);<span class="comment">//在当前 map 容器中，查找键为 key 的键值对的个数并返回。</span></span><br><span class="line">    <span class="comment">//注意，由于 map 容器中各值对应的键是唯一的，因此该函数的返回值最大为 1。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="算法"><a class="markdownIt-Anchor" href="#算法">#</a> <mark>算法</mark></h1>
<h2 id="递归recursion"><a class="markdownIt-Anchor" href="#递归recursion">#</a> 递归 (Recursion)</h2>
<p>递归：指函数自我调用，分解问题，解决问题。</p>
<p>1. 存在一个大规模问题，可以被分解为小规模问题。</p>
<p>2. 小规模问题存在简单的解决方法。</p>
<p>3. 将小规模问题的结果汇总，得到大规模问题的解。</p>
<h3 id="递归冒泡排序递归实现"><a class="markdownIt-Anchor" href="#递归冒泡排序递归实现">#</a> 递归：冒泡排序 (递归实现)</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按照递归的解释，提供以下算法进行参考</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::bubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> arrLen)</span> </span>&#123;</span><br><span class="line">	arrLen--;</span><br><span class="line">	<span class="keyword">if</span> (arrLen &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="type">int</span> temp = arr[i];</span><br><span class="line">			arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">			arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">bubbleSort</span>(arr, arrLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	Sort sort;</span><br><span class="line">	sort.<span class="built_in">bubbleSort</span>(arr, <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="贪心策略greedy-method"><a class="markdownIt-Anchor" href="#贪心策略greedy-method">#</a> 贪心策略 (Greedy Method)</h2>
<p>优化问题：找到一个问题的最优解。</p>
<p>例如：在一个城市中，找到从 A 地到 B 地的最优路线。</p>
<h3 id="贪心找零问题"><a class="markdownIt-Anchor" href="#贪心找零问题">#</a> 贪心：找零问题</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//贪心策略：每次都试图解决问题尽量大的一部分。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//找零问题中，若要找回63，则优先使用25\*2，然后使用10\*1，最后使用1\*3。</span></span><br><span class="line"><span class="comment">//优先使用最大面值，试图解决尽量大的部分，是贪心策略的表现</span></span><br></pre></td></tr></table></figure>
<h2 id="动态规划dynamic-planning"><a class="markdownIt-Anchor" href="#动态规划dynamic-planning">#</a> 动态规划 (Dynamic Planning)</h2>
<h3 id="动态规划背包问题"><a class="markdownIt-Anchor" href="#动态规划背包问题">#</a> 动态规划：背包问题</h3>
<p>现有 5 个物品，背包仅能负重 20 公斤，如何选取最高价值的物品？</p>
<table>
<thead>
<tr>
<th style="text-align:center">item</th>
<th style="text-align:center">weight</th>
<th style="text-align:center">value</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
</tr>
</tbody>
</table>
<p><strong>思路：</strong><br>
<strong>记 m (i,W) 为：前 i (1 &lt;= i &lt;= 5) 个宝物中，组合不超过 W (1 &lt;= W &lt;= 20) 重量，得到的最大价值</strong><br>
<strong> m (i,W) 应该取 m (i-1, W) 和 m (i-1, W-W<sub>i</sub>)+v<sub>i</sub> 其中价值更高的值</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		&#123;0											if i=0 or W=0	</span></span><br><span class="line"><span class="comment">m(i,W)=&#123;m(i-1,W)									if Wi &gt; W</span></span><br><span class="line"><span class="comment">    	&#123;max&#123;m(i - 1, W),Vi + m(i - 1, W - Wi)&#125;		otherwise</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>则可以绘制动态规划表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">m(i\W)</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
</tr>
</tbody>
</table>
<p><strong>由公式可知：m (5,5) = m (4,5) = max {m (3,5), m (3,0) + 8}</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//物品最多数目 + 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_I 6</span></span><br><span class="line"><span class="comment">//背包最大承重 + 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_W 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">object</span> &#123;<span class="comment">//物品结构体</span></span><br><span class="line">	<span class="type">int</span> w;<span class="comment">//物品的重量</span></span><br><span class="line">	<span class="type">int</span> v;<span class="comment">//物品的价值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;object&gt; tr;<span class="comment">//创建列表存储物品的重量和价值</span></span><br><span class="line">	<span class="type">int</span> wArr[<span class="number">5</span>] = &#123; <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span> &#125;;</span><br><span class="line">	<span class="type">int</span> vArr[<span class="number">5</span>] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;<span class="comment">//使用一个for循环将物品属性存储</span></span><br><span class="line">		object temp;</span><br><span class="line">		temp.w = wArr[i];</span><br><span class="line">		temp.v = vArr[i];</span><br><span class="line">		tr.<span class="built_in">push_back</span>(temp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建二维数组m，模拟二维表格m(i,w)</span></span><br><span class="line">	<span class="comment">//初始化二维表格m(i,w)，其中i表示前i个宝物，w表示重量上限</span></span><br><span class="line">	<span class="comment">//表示前i个物品中，最大重量w的组合，所得到的最大价值</span></span><br><span class="line">	<span class="comment">//当i=0或w上限为0，价值均为0</span></span><br><span class="line">	<span class="type">int</span> m[MAX_I][MAX_W];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, w = <span class="number">0</span>; w &lt; MAX_W; w++) &#123;</span><br><span class="line">		m[i][w] = <span class="number">0</span>;<span class="comment">//当i=0时，m=0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; MAX_I; i++) &#123;</span><br><span class="line">		m[i][w] = <span class="number">0</span>;<span class="comment">//当w=0时，m=0</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//逐个填写二维表格</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; MAX_I; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">1</span>; w &lt; MAX_W; w++) &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (tr[i - <span class="number">1</span>].w &gt; w) <span class="comment">//如果装不下第i个物品，这里i-1是因为tr是0-4而非1-5</span></span><br><span class="line">				m[i][w] = m[i - <span class="number">1</span>][w];<span class="comment">//不装第i个物品</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">else</span><span class="comment">//如果装的下，使用max取不装第i个物品，与装第i个物品，两种情况下的最大价值 </span></span><br><span class="line">				m[i][w] = <span class="built_in">max</span>(m[i - <span class="number">1</span>][w],m[i - <span class="number">1</span>][w - tr[i - <span class="number">1</span>].w] + tr[i - <span class="number">1</span>].v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//打印表格</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">	for (int i = 0; i &lt; MAX_I; i++) &#123;</span></span><br><span class="line"><span class="comment">		for (int w = 0; w &lt; MAX_W; w++) &#123;</span></span><br><span class="line"><span class="comment">			cout &lt;&lt; m[i][w] &lt;&lt; &quot;  &quot;;</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">		cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    cout &lt;&lt; m[<span class="number">5</span>][<span class="number">20</span>] &lt;&lt; endl;<span class="comment">//仅输出结果</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查找search"><a class="markdownIt-Anchor" href="#查找search">#</a> 查找 (Search)</h2>
<h3 id="顺序查找sequential-search"><a class="markdownIt-Anchor" href="#顺序查找sequential-search">#</a> 顺序查找 (Sequential Search)</h3>
<p>从数据头，向后逐个比对。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间复杂度O(n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Search.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Search::sequentialSearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> item, <span class="type">int</span> arrLen)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (pos &lt; arrLen) &#123;</span><br><span class="line">		<span class="keyword">if</span> (arr[pos] == item) <span class="keyword">return</span> pos;<span class="comment">//若找到返回下标</span></span><br><span class="line">		pos++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//表示未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二分查找binary-search"><a class="markdownIt-Anchor" href="#二分查找binary-search">#</a> 二分查找 (Binary Search)</h3>
<p>二分查找基于二分法，仅能用于有序表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间复杂度O(log n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Search.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Search::binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> item, <span class="type">int</span> arrLen)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> left = <span class="number">0</span>, right = arrLen - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (left &lt;= right) &#123;<span class="comment">//当左标记超过右标记时，结束循环</span></span><br><span class="line">		<span class="type">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (arr[mid] == item) <span class="keyword">return</span> mid;<span class="comment">//查找到时，返回下标</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (item &lt; arr[mid])<span class="comment">//若目标小于中间项</span></span><br><span class="line">			right = mid - <span class="number">1</span>;<span class="comment">//改变右标记</span></span><br><span class="line">		<span class="keyword">else</span><span class="comment">//若目标大于中间项</span></span><br><span class="line">			left = mid + <span class="number">1</span>;<span class="comment">//改变左标记</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//表示未找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="排序sort"><a class="markdownIt-Anchor" href="#排序sort">#</a> 排序 (Sort)</h2>
<h3 id="冒泡排序bubble-sort"><a class="markdownIt-Anchor" href="#冒泡排序bubble-sort">#</a> 冒泡排序 (Bubble Sort)</h3>
<p>仅将相邻的两项进行排序。</p>
<p>当首次冒泡后，最大项会被置于最后 (升序)。则下一次只需对前 n-1 个数排序。</p>
<p>以此类推，直到 n=2。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比对与交换的时间复杂度O(n^2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sort.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::bubbleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//对n-1个数排序</span></span><br><span class="line">	<span class="comment">//每次循环操作次数-1，所以i--</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arr.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><mark>冒泡算法改进:</mark></p>
<p>如果一次排序中，没有任何数的位置发生改变，则说明已经排序完成，可以直接返回</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该优化不改变时间复杂度</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sort.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::bubbleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//对n-1个数排序</span></span><br><span class="line">	<span class="comment">//每次循环操作次数-1，所以i--</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arr.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="type">bool</span> exchange = <span class="literal">false</span>;<span class="comment">//记录是否发生交换</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				exchange = <span class="literal">true</span>;<span class="comment">//发生交换</span></span><br><span class="line">				<span class="type">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!exchange) <span class="keyword">return</span>;<span class="comment">//若未发生交换，直接返回</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择排序selection-sort"><a class="markdownIt-Anchor" href="#选择排序selection-sort">#</a> 选择排序 (Selection Sort)</h3>
<p>在冒泡排序的思想上，对交换进行优化。</p>
<p>仍然进行多次对比，但不交换，记录最大项所在位置，最后再进行交换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择排序的比对时间复杂度为O(n^2),交换时间复杂度为O(n)。相较于冒泡排序优化了交换</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sort&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::selectionSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = arr.<span class="built_in">size</span>(); i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="comment">//假设最大值的下标为0</span></span><br><span class="line">		<span class="type">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">			<span class="comment">//从1开始遍历至i，当有大于arr[maxIndex]的值时</span></span><br><span class="line">			<span class="comment">//将标记最大值的下标指向它</span></span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[maxIndex]) maxIndex = j;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//将最大值交换到找到的位置</span></span><br><span class="line">		<span class="type">int</span> temp = arr[i - <span class="number">1</span>];<span class="comment">//使用i时减一防止越界</span></span><br><span class="line">		arr[i - <span class="number">1</span>] = arr[maxIndex];</span><br><span class="line">		arr[maxIndex] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入排序insertion-sort"><a class="markdownIt-Anchor" href="#插入排序insertion-sort">#</a> 插入排序 (Insertion Sort)</h3>
<p>插入排序维持一个已经排好序的子列表，其位置始终在列表的前部，然后逐步扩大这个子列表直到全表。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入排序的时间复杂度为O(n^2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sort&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::insertionSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> index;<span class="comment">//下标</span></span><br><span class="line">	<span class="type">int</span> currentValue;<span class="comment">//当前值</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		currentValue = arr[i];<span class="comment">//令当前值=arr[i]</span></span><br><span class="line">		index = i;<span class="comment">//下标=i，因为左侧是排序好的表，所以从i开始遍历即可</span></span><br><span class="line">		<span class="keyword">while</span> (index &gt; <span class="number">0</span> &amp;&amp; arr[index - <span class="number">1</span>] &gt; currentValue)&#123;<span class="comment">//当下标大于0并且当前值的左值大于当前值时</span></span><br><span class="line">			arr[index] = arr[index - <span class="number">1</span>];<span class="comment">//将左值后移(即与当前值交换位置)</span></span><br><span class="line">			index--;<span class="comment">//下标左移</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//退出循环时，下标index的位置，即当前值应插入的位置</span></span><br><span class="line">		arr[index] = currentValue;<span class="comment">//插入当前值</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="谢尔排序shell-sort"><a class="markdownIt-Anchor" href="#谢尔排序shell-sort">#</a> 谢尔排序 (Shell Sort)</h3>
<p>假设将数组 {6,5,4,3,2,1,9,8,7} 进行排序 (升序)。</p>
<p 9,8,7="">则可以将其划分为三个子数组，为 {6,5,4}、{3,2,1}、</p>
<p 4,5,6,1,2,3,7,8,9="">然后分别对其进行插入排序，变为</p>
<p>可以发现，虽然并未变成完全有序，但是相对于原数组，是更有序的。</p>
<p>假设现有 n 个数需要进行排序。可以将其划分为 n / 2 个子数组进行排序</p>
<p>对排序后的数组再划分为 n / 4 个子数组进行排序，以此类推，直到 n / … 为 1 时，即为插入排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//谢尔排序会减少许多&quot;无效&quot;对比，所以略优于插入排序</span></span><br><span class="line"><span class="comment">//时间复杂度大约介于O(n)和O(n^2)之间</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sort.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gapInsertionSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> start, <span class="type">int</span> gap)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = start + gap; i &lt; arr.<span class="built_in">size</span>(); i += gap) &#123;<span class="comment">//对子数组排序</span></span><br><span class="line">		<span class="type">int</span> currentValue = arr[i];<span class="comment">//接下来与插入排序相同</span></span><br><span class="line">		<span class="type">int</span> index = i;</span><br><span class="line">		<span class="keyword">while</span> (index &gt;= gap &amp;&amp; arr[index - gap] &gt; currentValue) &#123;</span><br><span class="line">			arr[index] = arr[index - gap];</span><br><span class="line">			index = index - gap;</span><br><span class="line">		&#125;</span><br><span class="line">		arr[index] = currentValue;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::shellSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> subCount = arr.<span class="built_in">size</span>() / <span class="number">2</span>;<span class="comment">//设定间隔来划分子数组</span></span><br><span class="line">	<span class="keyword">while</span> (subCount &gt; <span class="number">0</span>) &#123;<span class="comment">//间隔为0时退出循环</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> start = <span class="number">0</span>; start &lt; subCount; start++)</span><br><span class="line">			<span class="built_in">gapInsertionSort</span>(arr, start, subCount);<span class="comment">//该函数对子数组进行排序</span></span><br><span class="line">		subCount /= <span class="number">2</span>;<span class="comment">//缩小间隔</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="归并排序merge-sort"><a class="markdownIt-Anchor" href="#归并排序merge-sort">#</a> 归并排序 (Merge Sort)</h3>
<p>归并排序是一种递归算法</p>
<p>思路是将数据表持续分裂为两半，并对两半分别进行排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归并排序的时间复杂度为O(nlog n)。其中分裂过程的时间复杂度为O(log n),归并过程的时间复杂度为O(n)。</span></span><br><span class="line"><span class="comment">//归并排序使用更多的空间。(空间换时间)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sort.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::mergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (arr.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;<span class="comment">//当数据被分为1时，则不需要再分割，也就不需要进入以下代码</span></span><br><span class="line">		<span class="type">int</span> mid = arr.<span class="built_in">size</span>() / <span class="number">2</span>;<span class="comment">//取中间点</span></span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftHalf</span><span class="params">(arr.begin(), arr.begin() + mid)</span></span>;<span class="comment">//分为左半部分		</span></span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightHalf</span><span class="params">(arr.begin() + mid, arr.end())</span></span>;<span class="comment">//分为右半部分</span></span><br><span class="line"></span><br><span class="line">		<span class="built_in">mergeSort</span>(leftHalf);<span class="comment">//对左半部分进行merge排序</span></span><br><span class="line">		<span class="built_in">mergeSort</span>(rightHalf);<span class="comment">//对右半部分进行merge排序</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;<span class="comment">//其中i为left的下标，j为right的下标，k为arr的下标</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (i &lt; leftHalf.<span class="built_in">size</span>() &amp;&amp; j &lt; rightHalf.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			<span class="comment">//拉链式交错把左右半部从小归到大归并到结果vector</span></span><br><span class="line">			<span class="keyword">if</span> (leftHalf[i] &lt; rightHalf[j]) &#123;</span><br><span class="line">				arr[k] = leftHalf[i];</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				arr[k] = rightHalf[j];</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//归并左半部剩余的部分</span></span><br><span class="line">		<span class="keyword">while</span> (i &lt; leftHalf.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			arr[k] = leftHalf[i];</span><br><span class="line">			i++;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//归并右半部剩余的部分</span></span><br><span class="line">		<span class="keyword">while</span> (j &lt; rightHalf.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			arr[k] = rightHalf[j];</span><br><span class="line">			j++;</span><br><span class="line">			k++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序quick-sort"><a class="markdownIt-Anchor" href="#快速排序quick-sort">#</a> 快速排序 (Quick Sort)</h3>
<p>找到数据表的中值，并将数据表分为两半，随后自我调用，直到数据表仅有 1 项数据。</p>
<p>寻找中值：</p>
<p>1. 定义左标与右标，假设第一个值为中值，将左标向右移动，遇到第一个大于中值的项时停止。</p>
<p>2. 将右标向左移动，遇到第一个小于中值的项时停止。</p>
<p>3. 将左标与右标指向的值交换。随后继续重复左标右移，右标左移的步骤。</p>
<p>4. 当左标超过右标时，此时右标指向的值即为中值需要交换的位置。则可将中值与右标指向的值交换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序的时间复杂度为O(nlog n)。</span></span><br><span class="line"><span class="comment">//当分裂时，总能分为左右相同的两块，则其中分裂部分的复杂度为O(log n),移动部分的时间复杂度为O(n)</span></span><br><span class="line"><span class="comment">//当中值所在位置过于偏离中部，造成左右两块数量不平衡，会导致时间复杂度上升</span></span><br><span class="line"><span class="comment">//极端情况下，有一部分始终没有数据，则时间复杂度退化到O(n^2),考虑到递归调用，效率甚至低于冒泡排序</span></span><br><span class="line"><span class="comment">//快速排序相较于归并排序，不需要调用额外的空间</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Sort.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getMidI</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> first, <span class="type">int</span> last)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> midValue = arr[first];<span class="comment">//选定中值</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> leftMark = first + <span class="number">1</span>;<span class="comment">//左标</span></span><br><span class="line">	<span class="type">int</span> rightMark = last;<span class="comment">//右标</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="comment">//当左标小于右标，且左标指向的值小于中值时，左标右移</span></span><br><span class="line">		<span class="keyword">while</span> (leftMark &lt;= rightMark &amp;&amp; arr[leftMark] &lt;= midValue) leftMark++;</span><br><span class="line">		<span class="comment">//当右标大于左标，且右标指向的值大于中值时，右标左移</span></span><br><span class="line">		<span class="keyword">while</span> (rightMark &gt;= leftMark &amp;&amp; arr[rightMark] &gt;= midValue) rightMark--;</span><br><span class="line">		<span class="keyword">if</span> (rightMark &lt; leftMark) <span class="keyword">break</span>;<span class="comment">//当左标大于右标，结束循环</span></span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">//否则当左标和右标都停止时，交换左标与右标指向的值</span></span><br><span class="line">			<span class="type">int</span> temp = arr[leftMark];</span><br><span class="line">			arr[leftMark] = arr[rightMark];</span><br><span class="line">			arr[rightMark] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//最后将中值置于rightMark处</span></span><br><span class="line">	<span class="type">int</span> temp = arr[first];</span><br><span class="line">	arr[first] = arr[rightMark];</span><br><span class="line">	arr[rightMark] = temp;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//返回中值的下标</span></span><br><span class="line">	<span class="keyword">return</span> rightMark;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSortHelper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr, <span class="type">int</span> first, <span class="type">int</span> last)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (first &lt; last) &#123;</span><br><span class="line">		<span class="type">int</span> midValue = <span class="built_in">getMidI</span>(arr,first,last);<span class="comment">//获取中值的下标</span></span><br><span class="line">		<span class="built_in">quickSortHelper</span>(arr, first, midValue - <span class="number">1</span>);<span class="comment">//从中值处分裂，处理中值左边的部分</span></span><br><span class="line">		<span class="built_in">quickSortHelper</span>(arr, midValue + <span class="number">1</span>, last);<span class="comment">//处理中值右边的部分</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sort::quickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">quickSortHelper</span>(arr, <span class="number">0</span>, arr.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>DataStructure</tag>
        <tag>Algorithms</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2023/03/31/Docker/</url>
    <content><![CDATA[<h1 id="docker介绍"><a class="markdownIt-Anchor" href="#docker介绍">#</a> Docker 介绍</h1>
<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化，容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
<h1 id="docker命令"><a class="markdownIt-Anchor" href="#docker命令">#</a> Docker 命令</h1>
<h2 id="服务相关命令"><a class="markdownIt-Anchor" href="#服务相关命令">#</a> 服务相关命令</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker		#--启动docker</span><br><span class="line">systemctl restart docker	#--重启docker</span><br><span class="line">systemctl status docker		#--查看docker状态</span><br><span class="line">systemctl enable docker		#--设置开机自启docker</span><br></pre></td></tr></table></figure>
<h2 id="镜像相关命令"><a class="markdownIt-Anchor" href="#镜像相关命令">#</a> 镜像相关命令</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images				#--查看所有已安装的docker镜像</span><br><span class="line">docker images -q			#--查看所有已安装的docker镜像的id</span><br><span class="line">docker search 镜像名	  	  #--从网络中查找需要的镜像</span><br><span class="line">docker pull 镜像名:镜像版本	#--拉去镜像，版本可不写，默认lastest</span><br><span class="line">docker rmi 镜像id			   #--通过id删除镜像</span><br><span class="line">docker rmi `docker images -q`#--删除所有已安装镜像</span><br></pre></td></tr></table></figure>
<h2 id="容器相关命令"><a class="markdownIt-Anchor" href="#容器相关命令">#</a> 容器相关命令</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=c1 centos:7 /bin/bash	</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中-i表示容器一直运行</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-t表示分配给该容器一个可供输入的后台终端</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">--name给容器起名字，其中=可以换成空格</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">centos:7选择镜像名与镜像版本</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash可不加，添加初始进入路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用-it创建的容器会直接进入，退出时直接关闭。it创建的容器一般称为交互式容器</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用-<span class="built_in">id</span>创建的容器会在后台挂起，退出时不会直接关闭。<span class="built_in">id</span>创建的容器一般称为守护式容器</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker <span class="built_in">exec</span> -it(或<span class="built_in">id</span>) c2 /bin/bash进入</span></span><br><span class="line"></span><br><span class="line">exit		#--退出容器</span><br><span class="line"></span><br><span class="line">docker ps -a		#--查看所有容器</span><br><span class="line"></span><br><span class="line">docker stop 容器名		#--停止容器</span><br><span class="line">docker start 容器名	#--启动容器</span><br><span class="line">docker rm 容器名(或id)	#--删除容器</span><br><span class="line">docker rm `docker ps -aq`	#--删除所有容器</span><br><span class="line">docker inspect 容器名	#--查看容器全部信息</span><br></pre></td></tr></table></figure>
<h1 id="docker容器数据卷"><a class="markdownIt-Anchor" href="#docker容器数据卷">#</a> Docker 容器数据卷</h1>
<p>宿主机：运行 docker 的机器</p>
<p><strong>数据卷是宿主机中的一个目录或文件。</strong></p>
<p><strong>将容器中的某个目录与宿主机的某个目录挂载时，宿主机中的该目录称为数据卷</strong></p>
<p><strong>当容器目录和数据卷目录绑定后，双方的修改会立即同步。</strong></p>
<ul>
<li>一个数据卷可以被多个容器挂载</li>
<li>一个容器也可以挂载多个数据卷</li>
</ul>
<p><strong>数据卷可以解决以下问题：</strong></p>
<p>Docker 容器删除后，为了保留容器产生的数据，使用数据卷，则会在宿主机中保留数据</p>
<p>Docker 容器与宿主机直接交换文件</p>
<p>容器与容器之间的数据交互</p>
<h2 id="配置数据卷"><a class="markdownIt-Anchor" href="#配置数据卷">#</a> <strong>配置数据卷：</strong></h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建启动容器时，使用-v参数设置数据卷</span></span><br><span class="line">docker run ... -v 宿主机目录(文件):容器内目录(文件) ...</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.目录必须是绝对路径</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.如果目录不存在，则会自动创建</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.可以挂载多个数据卷</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">例如：</span></span><br><span class="line">docker run -it --name=c1 -v /root/data:/root/data_container centos:7 /bin/bash</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若是不写宿主机目录，则docker会自动创建</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以使用inspect指令查看</span></span><br></pre></td></tr></table></figure>
<h2 id="数据卷容器"><a class="markdownIt-Anchor" href="#数据卷容器">#</a> <strong>数据卷容器：</strong></h2>
<p>创建一个容器挂载到数据卷，将其他容器挂载到该容器。</p>
<p>则该容器被称为数据卷容器。</p>
<p>数据卷容器用于管理多容器挂载交互。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">实现：</span></span><br><span class="line">docker run -it --name=c3 -v /volume centos:7</span><br><span class="line">docker run -it --name=c1 --volumes-from c3 centos:7</span><br><span class="line">docker run -it --name=c2 --volumes-from c3 centos:7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建数据卷容器c3，并由docker自动创建数据卷挂载</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将c1与c2挂载到c3</span></span><br></pre></td></tr></table></figure>
<h1 id="docker应用部署"><a class="markdownIt-Anchor" href="#docker应用部署">#</a> Docker 应用部署</h1>
<h2 id="部署mysql"><a class="markdownIt-Anchor" href="#部署mysql">#</a> 部署 mysql</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.搜索镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.拉取镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.创建容器，设置端口映射，目录映射</span></span><br><span class="line">mkdir ~/mysql</span><br><span class="line">cd ~/mysql</span><br><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">mysql:5.6</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-p 3307:3306	将容器的 3306 端口映射到宿主机的 3307 端口</li>
<li>-v $PWD/conf:/etc/mysql/conf.d    挂载</li>
<li>-v $PWD/logs:/logs \    挂载</li>
<li>-v $PWD/data:/var/lib/mysql \    挂载</li>
<li>-e MYSQL_ROOT_PASSWORD=123456 \    初始化 root 用户的密码</li>
<li>登录 mysql：mysql -uroot -p;</li>
</ul>
<h2 id="部署tomcat"><a class="markdownIt-Anchor" href="#部署tomcat">#</a> 部署 tomcat</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.搜索镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.拉取镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.创建容器，设置端口映射，目录映射</span></span><br><span class="line">mkdir ~/tomcat</span><br><span class="line">cd ~/tomcat</span><br><span class="line">docker run -id --name=c_tomcat \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">-v $PWD:/usr/local/tomcat/webapps \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-p 8080:8080    将容器的 8080 端口映射到主机的 8080 端口</li>
<li>-v $PWD:/usr/local/tomcat/webapps \    挂载</li>
</ul>
<h2 id="部署nginx"><a class="markdownIt-Anchor" href="#部署nginx">#</a> 部署 nginx</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.搜索镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.拉取镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.创建容器，设置端口映射，目录映射</span></span><br><span class="line">mkdir ~/nginx</span><br><span class="line">cd ~/nginx</span><br><span class="line">docker run -id --name=c_nginx \</span><br><span class="line">-p 80:80 \</span><br><span class="line">-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v $PWD/logs:/var/log/nginx \</span><br><span class="line">-v $PWD/html:/usr/share/nginx/html \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>-p 80:80 \    端口映射</li>
<li>-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \    挂载</li>
<li>-v $PWD/logs:/var/log/nginx \    挂载</li>
</ul>
<h2 id="部署redis"><a class="markdownIt-Anchor" href="#部署redis">#</a> 部署 redis</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.搜索镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.拉取镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.创建容器，设置端口映射，目录映射</span></span><br><span class="line">mkdir ~/redis</span><br><span class="line">cd ~/redis</span><br><span class="line">docker run -id --name=c_redis \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">redis:5.0</span><br></pre></td></tr></table></figure>
<h1 id="dockerfile"><a class="markdownIt-Anchor" href="#dockerfile">#</a> Dockerfile</h1>
<h2 id="docker镜像原理"><a class="markdownIt-Anchor" href="#docker镜像原理">#</a> Docker 镜像原理</h2>
<ul>
<li>Docker 镜像的本质是文件</li>
<li>Docker 镜像是由特殊的文件系统叠加而成</li>
<li>最低端是 bootfs，并使用宿主机的 bootfs</li>
<li>第二层是 root 文件系统 rootfs，称为 base image</li>
<li>然后再往上可以叠加其他的镜像文件</li>
<li>统一文件系统 (Union File System) 技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户看来，只存在一个文件系统。</li>
<li>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像称为基础镜像。</li>
<li>Docker 中的镜像都是只读镜像。</li>
<li>当从一个镜像启动容器时，Docker 会在最顶层加载一个读写文件系统作为容器。</li>
</ul>
<h2 id="docker镜像制作"><a class="markdownIt-Anchor" href="#docker镜像制作">#</a> Docker 镜像制作</h2>
<p><strong>1. 容器转为镜像：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 容器id 镜像名称:版本号			#转为镜像</span><br><span class="line">docker save -o 压缩文件名称 镜像名称:版本号	  #将镜像压缩，便于发送给别人</span><br><span class="line">docker load -i 压缩文件名称				  #解压缩</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要注意，挂载的文件不会被commit转为镜像</span></span><br></pre></td></tr></table></figure>
<p><strong>2.dockerfile 关键字：</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="comment">#指定父镜像  指定dockerfile基于哪个image构建</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="comment">#作者信息  用来标明这个dockerfile是谁写的</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> <span class="comment">#标签  用来标明dockerfile的标签，可以使用Label代替Maintainer最终是在docker image基本信息中可以查看</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="comment">#执行命令  执行一段命令，默认是/bin/sh格式:RUN command或者RUN[&quot;command&quot;,&quot;param1&quot;,&quot;param2&quot;]</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="comment">#容器启动命令  提供启动容器时候的默认命令和ENTRYPOINT配合使用.格式 CMD command param1 param2  或者 CMD [&quot;command&quot;,&quot;param1&quot;,&quot;param2&quot;]</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="comment">#入口  一般在制作一些执行就关闭的容器中会使用</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="comment">#复制文件  build的时候复制文件到image中</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> <span class="comment">#添加文件  build的时候添加文件到image中，不仅仅局限于当前build上下文，可以来源于远程服务</span></span></span><br><span class="line"><span class="keyword">ENV</span> <span class="comment">#环境变量  指定build时候的环境变量，可以在启动的容器的时候通过-e覆盖，格式ENV name=value</span></span><br><span class="line"><span class="keyword">ARG</span> <span class="comment">#构建参数  构建参数只在构建的时候使用的参数，如果有ENV，那么ENV的相同名字的值始终覆盖ARG的参数</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> <span class="comment">#定义外部可以挂载的数据卷  指定build的image那些目录可以启动的时候挂载到文件系统中，启动容器的时候使用-v绑定格式 VOLUME [&quot;目录&quot;]</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="comment">#暴露端口  定义容器运行的时候监听的端口，启动容器的使用-p来绑定暴露端口，格式：EXPOSE 8080或者EXPOSE 8080/udp</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="comment">#工作目录  指定容器内部的工作目录，如果没有则自动创建，如果指定/使用的是绝对地址，如果不是/开头那么是在上一条workdir的路径的相对路径</span></span></span><br><span class="line"><span class="keyword">USER</span> <span class="comment">#指定执行用户  指定build或者启动的时候用户在RUN CMD ENTRYPOINT执行的时候的用户</span></span><br><span class="line"><span class="keyword">HEALTHCHECK</span><span class="language-bash"> <span class="comment">#健康检查  指定检测当前容器的健康检测的命令，基本上没用</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="comment">#触发器  当存在ONBUILD关键字的镜像作为基础镜像的时候，当执行FROM完成之后，会执行ONBUILD的命令，但是不影响当前镜像，作用也不大</span></span><br><span class="line"><span class="keyword">STOPSIGNAL</span> <span class="comment">#发送信号量到主机  该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"> <span class="comment">#指定执行脚本的shell  指定RUN CMD ENTRYPOINT执行命令的时候使用过的shell</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2023/04/06/GitNote/</url>
    <content><![CDATA[<h1 id="基本配置"><a class="markdownIt-Anchor" href="#基本配置">#</a> 基本配置</h1>
<p>1. 打开 Git Bash</p>
<p>2. 设置用户信息</p>
<p>git config --global <a href="http://user.name">user.name</a> “userName”</p>
<p>git config --global user.email “<a href="mailto:helloWorld@example.com">helloWorld@example.com</a>”</p>
<p>查看配置信息：</p>
<p>git config --global <a href="http://user.name">user.name</a></p>
<p>git config --global user.email</p>
<h1 id="常用指令配置别名可选"><a class="markdownIt-Anchor" href="#常用指令配置别名可选">#</a> 常用指令配置别名 (可选)</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.打开用户目录，创建.bashrc文件</span></span><br><span class="line"><span class="built_in">touch</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.添加如下内容</span></span><br><span class="line"><span class="comment">#用于输出git提交日志</span></span><br><span class="line"><span class="built_in">alias</span> git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span></span><br><span class="line"><span class="comment">#用于输出当前目录所有文件及基本信息</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -al&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.打开gitBash，执行source ~/.bashrc</span></span><br></pre></td></tr></table></figure>
<h1 id="获取本地仓库"><a class="markdownIt-Anchor" href="#获取本地仓库">#</a> 获取本地仓库</h1>
<p>1. 在电脑的任意位置创建一个空目录，作为本地 Git 仓库</p>
<p>2. 进入该目录，右键打开 Git Bash</p>
<p>3. 执行命令 git init</p>
<p>4. 如果创建成功后，可在文件夹下看到隐藏的.git 目录</p>
<h1 id="常用git指令"><a class="markdownIt-Anchor" href="#常用git指令">#</a> 常用 Git 指令</h1>
<h2 id="工作区-暂存区-仓库add与commit"><a class="markdownIt-Anchor" href="#工作区-暂存区-仓库add与commit">#</a> 工作区、暂存区、仓库 | add 与 commit</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将新建或修改的文件加入到暂存区</span></span><br><span class="line">git add FileName||通配符</span><br><span class="line"><span class="comment">#将所有修改加入到暂存区：git add .</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提交暂存区的内容到本地仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;注释内容&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看提交日志</span></span><br><span class="line">git <span class="built_in">log</span> [options]</span><br><span class="line">options：</span><br><span class="line">    --all				<span class="comment">#显示所有分支</span></span><br><span class="line">    --pretty=oneline	<span class="comment">#将提交信息显示为一行</span></span><br><span class="line">    --abbrev-commit		<span class="comment">#使得输出的commitId更简短</span></span><br><span class="line">    --graph				<span class="comment">#以图的形式显示</span></span><br></pre></td></tr></table></figure>
<h2 id="版本回退"><a class="markdownIt-Anchor" href="#版本回退">#</a> 版本回退</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard commitID</span><br><span class="line"><span class="comment">#commitID使用git log查看</span></span><br><span class="line"><span class="comment">#或使用git reflog查看历史操作，找到历史Id</span></span><br></pre></td></tr></table></figure>
<h2 id="添加文件至忽略列表"><a class="markdownIt-Anchor" href="#添加文件至忽略列表">#</a> 添加文件至忽略列表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建.gitignore文件</span></span><br><span class="line"><span class="built_in">touch</span> .gitignore</span><br><span class="line"><span class="comment">#在其中写入需要忽略的文件，例如</span></span><br><span class="line">.gitignore	<span class="comment">#忽略.gitignore文件</span></span><br><span class="line">*.a			<span class="comment">#忽略所有后缀为.a的文件</span></span><br><span class="line">file.txt	<span class="comment">#忽略file.txt文件</span></span><br></pre></td></tr></table></figure>
<h2 id="git分支"><a class="markdownIt-Anchor" href="#git分支">#</a> Git 分支</h2>
<p>Git 允许创建多个分支 (branch) 进行开发，分支之间互不干扰，最后合并 (merge)</p>
<p>1.master (生产) 分支</p>
<p>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</p>
<p>2.develop (开发) 分支</p>
<p>是从 master 创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要合并到 master 分支，准备上线</p>
<p>3.feature/xxxx 分支</p>
<p>从 develop 创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到 develop 分支</p>
<p>4.hotfix/xxxx 分支</p>
<p>从 master 派生的分支，一般作为线上 bug 修复使用，修复完成后需要合并到 master、test、develop 分支。</p>
<p>5. 其他分支，如 test 分支 (代码测试)，pre 分支 (预上线) 等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment">#创建分支</span></span><br><span class="line">git branch 分支名</span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"><span class="comment">#创建并切换到分支</span></span><br><span class="line">git checkout -b 分支名</span><br><span class="line"><span class="comment">#合并分支</span></span><br><span class="line">git merge 分支名<span class="comment">#将分支合并</span></span><br><span class="line"><span class="comment">#删除分支</span></span><br><span class="line">git branch -d 分支名 <span class="comment">#删除分支时，需要做各种间插</span></span><br><span class="line">git branch -D 分支名 <span class="comment">#强制删除，不做检查</span></span><br></pre></td></tr></table></figure>
<h1 id="解决冲突"><a class="markdownIt-Anchor" href="#解决冲突">#</a> 解决冲突</h1>
<p>当两个分支上对同一个文件修改同一行内容，合并时会造成冲突，需要手动解决冲突。</p>
<ul>
<li>手动处理文件中冲突的地方</li>
<li>将解决完冲突的文件加入到暂存区</li>
<li>提交到仓库</li>
</ul>
<h1 id="git配置远程仓库"><a class="markdownIt-Anchor" href="#git配置远程仓库">#</a> Git 配置远程仓库</h1>
<h2 id="创建并设置远程仓库"><a class="markdownIt-Anchor" href="#创建并设置远程仓库">#</a> 创建并设置远程仓库</h2>
<ol>
<li>建立远程仓库，使用 Github 或者 Gitee 创建远程仓库 (这里使用 Gitee 为例)</li>
<li>配置 SSH 公钥，创建 SSH 密钥：<strong>ssh-keygen -t rsa</strong></li>
<li>查看公钥：<strong>cat ~/.ssh/id_rsa.pub</strong></li>
<li>将公钥复制到个人设置中的 SSH 公钥</li>
<li>使用 ssh -T git@gitee.com 测试公钥是否配置成功</li>
<li>公钥配置成功后，将本地仓库与远程仓库绑定：<strong>git remote add origin ssh 链接</strong></li>
<li>使用：<strong>git remote</strong>  查看是否绑定成功</li>
</ol>
<h2 id="将本地仓库内容推送到远端仓库"><a class="markdownIt-Anchor" href="#将本地仓库内容推送到远端仓库">#</a> 将本地仓库内容推送到远端仓库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push [-f] [--set-upstream] [远端名] [本地分支名]:[远端分支名]</span><br><span class="line"><span class="comment">#如果本地分支名与远端分支名相同，则可以只写本地分支</span></span><br><span class="line"><span class="comment">#-f表示本地代码强制覆盖远端代码</span></span><br><span class="line"><span class="comment">#--set-upstream表示关联本地分支与远端分支，关联后可以省略远端名和分支名</span></span><br></pre></td></tr></table></figure>
<h2 id="将远端仓库的内容克隆到本地仓库"><a class="markdownIt-Anchor" href="#将远端仓库的内容克隆到本地仓库">#</a> 将远端仓库的内容克隆到本地仓库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远端链接 [目标路径]</span><br></pre></td></tr></table></figure>
<h2 id="从远端仓库抓取与拉取"><a class="markdownIt-Anchor" href="#从远端仓库抓取与拉取">#</a> 从远端仓库抓取与拉取</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#抓取：从远端获取更新，然后使用merge将远端分支合并到本地分支</span></span><br><span class="line">git fetch</span><br><span class="line">git merge</span><br><span class="line"><span class="comment">#拉取：抓取合并二合一</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h1 id="在ide中使用git"><a class="markdownIt-Anchor" href="#在ide中使用git">#</a> 在 IDE 中使用 Git</h1>
<p>这里以 Pycharm 为例</p>
<p><strong>使用步骤：</strong></p>
<ol>
<li>打开设置，搜索 Git</li>
<li>检查 Git 路径是否自动识别，若未自动识别，需手动配置 Git 路径</li>
<li>创建并设置远程仓库 (参考<strong> Git 配置远程仓库</strong>一节)</li>
<li>点击 VCS，创建 Git 仓库 (Create Git Repositry…)，选择要建仓库的项目目录</li>
<li>创建本地仓库后，VSC 按钮会变成 Git 按钮，可在 Git 选项中提交</li>
<li>点击 Git，选择推送，定义远程仓库，复制 Gitee 的 URL，确认推送</li>
</ol>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>C++笔记</title>
    <url>/2023/02/23/CppLearn/</url>
    <content><![CDATA[<p><strong>注意：代码环境为 VS2022</strong></p>
<h1 id="c介绍"><a class="markdownIt-Anchor" href="#c介绍">#</a> C++ 介绍</h1>
<p>C++(C Plus Plus)，是由微软 (Microsoft) 公司基于 C 语言扩充编写的一门语言。</p>
<p>C++ 是一门面向对象的语言</p>
<p>其中部分语法与 C 语言相似，可以参考 C 语言笔记 (有些部分我直接从 C 语言笔记里复制过来了，我会将其标出)。</p>
<h1 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world">#</a> Hello World</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请自行安装 VS2022 (或者其他 ide)，可以参考 C 语言笔记的内容。</p>
<p>输入上面的代码，实现第一个 C++ 程序</p>
<h1 id="c语法"><a class="markdownIt-Anchor" href="#c语法">#</a> C++ 语法</h1>
<h2 id="注释"><a class="markdownIt-Anchor" href="#注释">#</a> 注释</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="位bit与字节byte"><a class="markdownIt-Anchor" href="#位bit与字节byte">#</a> 位 (bit) 与字节 (byte)</h2>
<p>在日常使用计算机的时候，我们通常会看到一些数据单位，如 kb,MB,GB 等</p>
<p>其中 kb 指的是 kilo byte (千字节)，mb 指的是 mega byte (兆字节)。诸如此类的还有 TB,PB,EB 等。</p>
<p>计算机是电子产品，对其来说，只存在开路 (0) 与闭路 (1)</p>
<p>我们将一个最基础的单位 (0 或 1) 称为位 (bit)，将 8 个位合在一起称为一个字节 (byte)。</p>
<p>当我需要将整数 8 存入计算机时，8 会被转换为二进制数 1000 被存入到内存中。</p>
<p>这在 C 语言中，通常会占用 4 个字节，也就是 32 位。</p>
<h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> <mark>数据类型</mark></h2>
<h3 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型">#</a> 基本数据类型：</h3>
<p>基本数据类型包括：</p>
<p><strong>数值类型：</strong></p>
<ul>
<li>整型</li>
<li>浮点型</li>
</ul>
<p><strong>字符类型 (char)</strong></p>
<p>其中整型包括：短整型 (short)、整型 (int)、长整型 (long)</p>
<p>其中浮点型包括：单精度型 (float)、双精度型 (double)</p>
<p><strong>整型，即为整数。  浮点型，即为小数。</strong></p>
<p><strong>短整型、整型与长整型的差距在于其存储时，占用的字节数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">字节数</th>
<th style="text-align:center">存储数值的范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">-2^15, 2^15-1</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-2^31, 2^31-1</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-2^63, 2^63-1</td>
</tr>
</tbody>
</table>
<p>这是大致的内存占用情况，需要注意的是，这些数据类型在不同的系统上，会占用不同的字节数，而非固定。</p>
<p>通过类型占用的字节数，可以计算出其存储数值范围。</p>
<p>例如：int 是 4 个字节，也就是 32 位，因为其存储的是二进制数，所以理论上范围应该是 [-2^32，2^32 - 1] 但第一位要用于存储其符号，也就是数值是正还是负，所以占用了一个位，则其范围变为 [-2^31，2^31 - 1]，正数范围需要减一是为了存储 0</p>
<p><strong>单精度浮点型与双精度浮点型的区别：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">存储数值的范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">-3.4*10^38, 3.4*10^38</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">-1.7*10^308, 1.7*10^308</td>
</tr>
</tbody>
</table>
<p>其中单精度浮点数可以存储到小数点后 6 位数字，而双精度浮点数可以存储到小数点后 15 位数字。</p>
<p>打印时，默认保留 6 位小数</p>
<h4 id="布尔类型"><a class="markdownIt-Anchor" href="#布尔类型">#</a> 布尔类型</h4>
<p>需要注意，C 语言并没有布尔类型，但是程序中经常会用到布尔类型，因此我在这里单独拿出来使用</p>
<p>在 C89 标准时，C 语言没有布尔类型，在后来的 C99 标准时，才引入了布尔类型。</p>
<hr>
<p>布尔类型是只有两种值的数据类型，包含真 (True) 与假 (False)</p>
<p>在 C 语言中，通常使用 0 作为布尔类型的 False，非 0 作为布尔类型的 True</p>
<h4 id="构造类型"><a class="markdownIt-Anchor" href="#构造类型">#</a> 构造类型</h4>
<p>构造类型包括：</p>
<ul>
<li>数组 (array)</li>
<li>结构体 (struct)</li>
<li>共用体 (union)</li>
<li>枚举类型 (enum)</li>
</ul>
<p>这四种类型会在后面讲到。</p>
<h4 id="指针类型"><a class="markdownIt-Anchor" href="#指针类型">#</a> 指针类型</h4>
<p>指针类型通常占用 4 个字节，存储十六进制数，用于保存地址值，具体会在指针的部分讲到。</p>
<h4 id="空类型"><a class="markdownIt-Anchor" href="#空类型">#</a> 空类型</h4>
<p>型如其名，空 (void)</p>
<h2 id="变量"><a class="markdownIt-Anchor" href="#变量">#</a> <mark>变量</mark></h2>
<p><strong>这块儿从 C 语言笔记那里复制过来的所以用的输出方式可能是 printf 而不是 cout</strong></p>
<h3 id="声明变量与赋值"><a class="markdownIt-Anchor" href="#声明变量与赋值">#</a> 声明变量与赋值：</h3>
<p>创建一个新的源文件，并将先前的第一个程序全部注释掉：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> var1;<span class="comment">//声明一个整型变量</span></span><br><span class="line">    var1 = <span class="number">0</span>;<span class="comment">//给var1赋值</span></span><br><span class="line">    <span class="type">float</span> var2 = <span class="number">0.123f</span>;<span class="comment">//声明并初始化一个单精度浮点型变量</span></span><br><span class="line">    <span class="type">double</span> var3 = <span class="number">0.123456</span>;<span class="comment">//声明并初始化一个双精度浮点型变量</span></span><br><span class="line">    <span class="type">char</span> var4 = <span class="string">&#x27;c&#x27;</span>;<span class="comment">//声明并初始化一个字符型变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%f,%lf,%c&quot;</span>, var1, var2, var3, var4);<span class="comment">//使用占位符%d,%f,%lf与%c输出相应变量。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明变量，即创建一个变量，然后使用 = 为其赋值。</p>
<p><strong>注意：赋值行为是将等号右边的数值分配给等号左边的变量，不能写反！</strong></p>
<p>第一次给变量赋值的行为，被叫做<strong>初始化</strong>，声明与初始化可以写在同一行，如 var2 与 var3</p>
<p><strong>注意 2：请不要在未初始化的情况下调用变量，会导致程序错误！</strong></p>
<p>IDE 会默认浮点数为双精度浮点数，在浮点数后面添加 f (或 F)，标志其为单精度浮点数 (也可以不加)。</p>
<p>打印时，使用占位符进行占位，占位符与后面的变量需要一一对应。其中 % d 为整型的占位符，% f 为单精度浮点型的占位符，% lf 为双精度浮点型的占位符。</p>
<h3 id="变量名"><a class="markdownIt-Anchor" href="#变量名">#</a> 变量名：</h3>
<p>变量命名时需要遵循一定的规则：</p>
<ul>
<li>变量名只能包含字母、数字、下划线和 $</li>
<li>变量名只能以字母、下划线或者 $ 开头</li>
<li>变量名不能使用关键字</li>
<li>变量名严格区分大小写</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="type">int</span> <span class="number">123</span>abc;<span class="comment">//这是一个不符合语法的变量声明，会导致报错！</span></span><br><span class="line"><span class="type">int</span> <span class="type">int</span>;<span class="comment">//这是一个非法声明！</span></span><br><span class="line"><span class="type">int</span> 变量;<span class="comment">//非法声明！</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> var;<span class="comment">//合法声明</span></span><br><span class="line"><span class="type">int</span> _var;<span class="comment">//合法声明</span></span><br><span class="line"><span class="type">int</span> $var;<span class="comment">//合法声明</span></span><br><span class="line"><span class="type">int</span> VAR;<span class="comment">//合法声明，但需要注意，VAR不等于var</span></span><br></pre></td></tr></table></figure>
<p><strong>关键字：C 语言使用到的单词，例如：int,float,void 等，在起变量名或者函数名时需要避开。</strong></p>
<p>关键字并不需要记忆，在 VS2022 中，当使用到关键字时，会被特殊的颜色标出。</p>
<hr>
<p>除了必要的语法外，我们在日常编程中也有一些默认规则。</p>
<ul>
<li>变量名要做到见名知意</li>
<li>变量名遵循驼峰法，或者下划线法</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="type">int</span> var;<span class="comment">//var是variable(变量)的缩写</span></span><br><span class="line"><span class="type">int</span> count;<span class="comment">//count(计数)，通常用于计数</span></span><br><span class="line"><span class="type">int</span> sum;<span class="comment">//sum(和)，通常用于求和</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的变量名，看到名字便知道其作用。</span></span><br><span class="line"><span class="comment">//需要使用两个及以上的单词去描述变量时，通常使用驼峰法或下划线法命名</span></span><br><span class="line"><span class="comment">//驼峰法即：单词的首字母大写，如：</span></span><br><span class="line"><span class="type">int</span> studentId;<span class="comment">//学号</span></span><br><span class="line"><span class="type">char</span> studentAddress;<span class="comment">//学生家庭地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下划线法即：使用下划线分割单词，如：</span></span><br><span class="line"><span class="type">int</span> student_name;<span class="comment">//学生姓名</span></span><br><span class="line"><span class="type">int</span> student_class;<span class="comment">//学生班级</span></span><br></pre></td></tr></table></figure>
<p>驼峰法与下划线法的选择看个人喜好。</p>
<h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符">#</a> <mark>运算符</mark></h2>
<p>需要注意，运算符区分优先级，大致为：</p>
<p>数值运算符 &gt; 比较运算符 &gt; 逻辑运算符 (不绝对)</p>
<p>其中逻辑运算符中！&gt; &amp;&amp; &gt; ||</p>
<p>具体优先级可以自行搜索</p>
<h3 id="数值运算符"><a class="markdownIt-Anchor" href="#数值运算符">#</a> 数值运算符</h3>
<p>C 语言中提供一些数值运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">赋值运算符，将等号右侧的值赋给等号左边的变量</td>
<td style="text-align:center">var = 10</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加运算符</td>
<td style="text-align:center">var = 1 + 2</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减运算符</td>
<td style="text-align:center">var = 2 - 1</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">乘运算符</td>
<td style="text-align:center">var = 5 * 10</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">除运算符</td>
<td style="text-align:center">var = 10 / 5</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">求余数运算符</td>
<td style="text-align:center">var = 11 % 5 (var 的值为 1)</td>
</tr>
<tr>
<td style="text-align:center">+=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var + 10</td>
<td style="text-align:center">var += 10</td>
</tr>
<tr>
<td style="text-align:center">-=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var - 10</td>
<td style="text-align:center">var -= 10</td>
</tr>
<tr>
<td style="text-align:center">*=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var * 10</td>
<td style="text-align:center">var *= 10</td>
</tr>
<tr>
<td style="text-align:center">/=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var / 10</td>
<td style="text-align:center">var /= 10</td>
</tr>
<tr>
<td style="text-align:center">%=</td>
<td style="text-align:center">可以将右侧式子理解为 var = var % 10</td>
<td style="text-align:center">var %= 10</td>
</tr>
<tr>
<td style="text-align:center">++</td>
<td style="text-align:center">自增运算，相当于 var = var + 1</td>
<td style="text-align:center">var++(或者 ++var)</td>
</tr>
<tr>
<td style="text-align:center">–</td>
<td style="text-align:center">自减运算，相当于 var = var - 1</td>
<td style="text-align:center">var–(或者–var)</td>
</tr>
</tbody>
</table>
<p><strong>注意：var++ 与 ++var 使用方式并不相同，var-- 与 --var 同样</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> var = <span class="number">1</span>;<span class="comment">//声明并初始化整型变量var</span></span><br><span class="line">    </span><br><span class="line">    var += <span class="number">10</span>;<span class="comment">//加运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var -= <span class="number">10</span>;<span class="comment">//减运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var *= <span class="number">10</span>;<span class="comment">//乘运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var /= <span class="number">10</span>;<span class="comment">//除运算示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    var = <span class="number">11</span>;<span class="comment">//求余运算示例</span></span><br><span class="line">    var %= <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, var++);<span class="comment">//后++示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ++var);<span class="comment">//前++示例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上述代码，可以发现打印结果为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span>	<span class="comment">//加法示例打印，var为1，var+=10即为var=var+10，所以结果为11</span></span><br><span class="line"><span class="number">1</span>	<span class="comment">//减法示例打印，var此时为11，var-=10即为var=var-10，所以结果为1</span></span><br><span class="line"><span class="number">10</span>  <span class="comment">//乘法示例打印，var此时为1，var*=10即为var=var*10，所以结果为10</span></span><br><span class="line"><span class="number">1</span>   <span class="comment">//除法示例打印，var此时为10，var/=10即为var=var/10，所以结果为1</span></span><br><span class="line"><span class="number">1</span>   <span class="comment">//求余示例打印，计算前给var赋值为11，所以var此时为11，var%=10即为var=var%10，所以结果为1</span></span><br><span class="line"><span class="number">1</span>   <span class="comment">//后++示例</span></span><br><span class="line"><span class="number">3</span>   <span class="comment">//前++示例</span></span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是后 ++ 与前 ++ 的区分：</strong></p>
<p><strong>使用后 ++ 时，是首先使用变量 var，再进行自增，所以当 var=1 时，使用 var++ 进行打印，首先使用 var 打印出 1，然后对其进行自增，则 var=2.</strong></p>
<p><strong>使用前 ++ 时，是首先自增，再使用变量 var，所以当 var=2 时，使用 ++var 进行打印，首先自增，使 var 变为 3，然后对 var 进行打印，打印出数字 3.</strong></p>
<h3 id="比较运算符"><a class="markdownIt-Anchor" href="#比较运算符">#</a> 比较运算符</h3>
<p>C 语言中提供一些比较运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">判断左值是否小于右值，返回布尔类型</td>
<td style="text-align:center">number1 &lt; number2</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">判断左值是否大于右值，返回布尔类型</td>
<td style="text-align:center">number1 &gt; number2</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">判断左值是否小于或等于右值，返回布尔类型</td>
<td style="text-align:center">number1 &lt;= number2</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">判断左值是否大于或等于右值，返回布尔类型</td>
<td style="text-align:center">number1 &gt;= number2</td>
</tr>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">判断左值是否等于右值，返回布尔类型</td>
<td style="text-align:center">number1 == number2</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">判断左值是否不等于右值，返回布尔类型</td>
<td style="text-align:center">number1 != number2</td>
</tr>
</tbody>
</table>
<p><strong>注意：C 语言自带的数据类型中，并没有真正的布尔类型，只是使用零和非零模拟出的布尔类型</strong></p>
<h3 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符">#</a> 逻辑运算符</h3>
<p>C 语言中提供一些逻辑运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">逻辑与，判断左值与右值是否都为真，返回布尔类型</td>
<td style="text-align:center">a &amp;&amp; b</td>
</tr>
<tr>
<td style="text-align:center">||</td>
<td style="text-align:center">逻辑或，判断左值或右值是否为真，返回布尔类型</td>
<td style="text-align:center">a || b</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">逻辑非，取其相反值，返回布尔类型 (若 a 为 True，则！a 为 False)</td>
<td style="text-align:center">!a</td>
</tr>
</tbody>
</table>
<p>逻辑与，逻辑或，逻辑非的运算结果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">&amp;&amp; 运算</th>
<th style="text-align:center">b = True</th>
<th style="text-align:center">b = False</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a = True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
</tr>
<tr>
<td style="text-align:center">a = False</td>
<td style="text-align:center">False</td>
<td style="text-align:center">False</td>
</tr>
</tbody>
</table>
<p><strong>逻辑与：全真才真，一假皆假。</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">|| 运算</th>
<th style="text-align:center">b = True</th>
<th style="text-align:center">b = False</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a = True</td>
<td style="text-align:center">True</td>
<td style="text-align:center">True</td>
</tr>
<tr>
<td style="text-align:center">a = False</td>
<td style="text-align:center">True</td>
<td style="text-align:center">False</td>
</tr>
</tbody>
</table>
<p><strong>逻辑或：一真即真，全假才假。</strong></p>
<p><strong>短路现象：</strong></p>
<p>对于 a&amp;&amp;b，当 a 为假的时候，我们便可以立即断定 a&amp;&amp;b 就是假的，那么程序将不会再判断 b，这种现象被称为短路现象。</p>
<p>同样的，对于 a||b，当 a 为真，则 a||b 就一定是真的，程序也不会再判断 b。</p>
<h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符">#</a> 位运算符</h3>
<p>C 语言中提供一些位运算的符号，如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">使用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">对左值与右值进行与运算</td>
<td style="text-align:center">a &amp; b</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">对左值与右值进行或运算</td>
<td style="text-align:center">a | b</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">对左值与右值进行位运算</td>
<td style="text-align:center">a ^ b</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">对左值进行左移运算，左移位数取决于右值</td>
<td style="text-align:center">1 &lt;&lt; 5</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">对左值进行右移运算，右移位数取决于右值</td>
<td style="text-align:center">32 &gt;&gt; 3</td>
</tr>
</tbody>
</table>
<p>使用如下代码进行测试：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">5</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a &amp; b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a | b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a ^ b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">1</span> &lt;&lt; <span class="number">5</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">32</span> &gt;&gt; <span class="number">3</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会发现，最终输出的结果分别是 1，5，4，32 和 4  接下来我会对位运算做详细解释。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因为会有对齐操作，为了避免转换为网页时缩进错序，所以使用代码块进行解释</span></span><br><span class="line"><span class="comment">//a的值是1，其对应的二进制数可以写为001，b的值是5，其对应的二进制数可以写为101</span></span><br><span class="line"><span class="comment">//当a和b进行与运算时，我们首先将其对齐，如下</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//然后逐个按位比较，如果都是1，那么结果取1，否则取0，于是得到结果</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//转化为十进制数后，值是1，所以第一个printf的输出值为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//而或运算则是：如果都是0，那么结果取0，否则取1。</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//按照或运算的规则，可以得到最后的结果为101，转化为十进制则是5，所以第二个printf的输出值为5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//异或运算则是：如果相同则取0，不同则取1</span></span><br><span class="line"><span class="comment">//001</span></span><br><span class="line"><span class="comment">//101</span></span><br><span class="line"><span class="comment">//100</span></span><br><span class="line"><span class="comment">//按照异或运算的规则，可以得到最后的结果为100，转化为十进制则是4，所以第三个printf的输出值为4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//左移运算：将二进制数左移x位，移动后在后面补0</span></span><br><span class="line"><span class="comment">//譬如对于1，其二进制为1，将其左移5位，然后在后面补0，那么结果就是10 0000，转化为十进制数则是32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//右移运算：将二进制数右移x位，移出部分删去</span></span><br><span class="line"><span class="comment">//譬如对于32，其二进制为10 0000，将其右移3位，那么就变为100，转化为十进制则是4</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型转换"><a class="markdownIt-Anchor" href="#数据类型转换">#</a> 数据类型转换</h2>
<p>将低精度值赋值给高精度值时，数据会自动转换类型，示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;<span class="comment">//声明并初始化字符型变量c</span></span><br><span class="line">    <span class="type">int</span> number1 = <span class="number">10</span>;<span class="comment">//声明并初始化整型变量number1</span></span><br><span class="line">    <span class="type">float</span> number2 = <span class="number">10.10</span>;<span class="comment">//声明并初始化单精度浮点型变量number2</span></span><br><span class="line">    <span class="type">double</span> number3 = <span class="number">100.100</span>;<span class="comment">//声明并初始化双精度浮点型变量number3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当把高精度的数值，赋给低精度的变量时，会导致警告，例如：</span></span><br><span class="line">    number1 = number2;</span><br><span class="line">    <span class="comment">//因为整型并不存在小数部分，所以将浮点型赋值给整型时，会导致小数部分的数据丢失，因此会被警告</span></span><br><span class="line">    <span class="comment">//将高精度数值赋值给低精度变量时，可以强制转换其数据类型，例如：</span></span><br><span class="line">    number1 = (<span class="type">int</span>)number2;<span class="comment">//在前面使用(数据类型)，来强制转换变量的数据类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//而当低精度的数值，赋给高精度的变量时，则会自动转换其数据类型，例如：</span></span><br><span class="line">    number2 = number1;<span class="comment">//并不需要强制转换</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//基本数据类型中，可以自动转换的数据类型级别，大致如下：</span></span><br><span class="line">    <span class="comment">//double &gt; float &gt; unsigned long &gt; long &gt; unsigned int &gt; int &gt; short</span></span><br><span class="line">    number3 = number2 = number1 = c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, number3);<span class="comment">//打印结果应为97.000000</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当浮点型被转换为整型时，并不会采取四舍五入的方式，而是截断。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">即var = 1.1得到的结果为var = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">var = 1.6得到的结果也为var = 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> var1 = <span class="number">1.1</span>;</span><br><span class="line">    <span class="type">int</span> var2 = <span class="number">1.6</span>;</span><br><span class="line">    <span class="type">float</span> var3 = <span class="number">3</span> / <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%d,%f&quot;</span>, var1, var2, var3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到结果为 1，1，0.000000</p>
<p>其中 var1 与 var2 已经解释过了，而其中为 float 类型的 var3 结果却是 0.000000</p>
<p>这是因为参与计算的数值均为整型，即 3 / 5，运算出来的返回结果也只能是整型，得到的结果是被截断过后的整型 0，最后打印出的结果是 0.000000</p>
<p>若要返回结果为浮点型，则需要使用浮点型数值参与运算，比如改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> var3 = <span class="number">3.0</span> / <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h2 id="分支语句语句"><a class="markdownIt-Anchor" href="#分支语句语句">#</a> <mark>分支语句语句</mark></h2>
<h3 id="if-else-if-else语句"><a class="markdownIt-Anchor" href="#if-else-if-else语句">#</a> if、else if、else 语句</h3>
<p>在生活中，我们经常会遇到分支情况，例如：</p>
<p>如果沙县小吃比大盘鸡更便宜，我今天就去吃沙县小吃，否则的话就去吃大盘鸡。</p>
<p>我们注意到，在这句话里出现了两条分支：</p>
<ol>
<li>去吃沙县小吃</li>
<li>去吃大盘鸡</li>
</ol>
<p>而我们根据：哪个更便宜？这个条件对我们要做的选择进行判断。</p>
<p>在编程中，我们也可以实现类似的分支情况，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> sha_xian = <span class="number">20</span>, da_pan_ji = <span class="number">58</span>;</span><br><span class="line">	<span class="keyword">if</span> (sha_xian &lt; da_pan_ji) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;今晚吃沙县&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;今晚吃大盘鸡&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这部分代码，相信许多人只是读一遍，便能够理解，接下来我要详细介绍 if 语句的细节，首先是语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔类型) &#123;需要执行的代码块&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个 if 语句的语法，如果 if 后的代码块仅仅只有 1 句 (1 个分号为 1 句)，那么可以不写大括号，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔类型)</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;只有一句代码时，可以不写大括号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>当括号内的布尔类型为真时，执行这条 if 语句，为假时，则不会执行。</p>
<p>可以使用上面提到的比较运算符来获得布尔类型，如上面的沙县、大盘鸡比较代码。</p>
<p>需要注意的是，if 语句可以单独使用，而 else 语句不可以，else 语句必须要有对应的 if 语句。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这样写是正确的</span></span><br><span class="line"><span class="keyword">if</span> (布尔类型)&#123;需要执行的代码块&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;需要执行的代码块&#125;</span><br><span class="line"><span class="comment">//---------------------------------</span></span><br><span class="line"><span class="comment">//这样写是错误的</span></span><br><span class="line"><span class="keyword">else</span> &#123;代码块&#125;</span><br></pre></td></tr></table></figure>
<p>当 if 内的布尔类型为假时，程序便会不执行 if 语句，直接进入 else 语句</p>
<p>如果 else 后面的语句仅仅只有 1 句，也可以不写大括号</p>
<p>else 语句的匹配规则遵循就近原则：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔类型) &#123;代码块&#125;<span class="comment">//这个if语句没有else</span></span><br><span class="line"><span class="keyword">if</span> (布尔类型) &#123;代码块&#125;<span class="comment">//下面的else语句会匹配离它最近的这个if语句</span></span><br><span class="line"><span class="keyword">else</span> &#123;代码块&#125;</span><br></pre></td></tr></table></figure>
<p>回到上面的沙县与大盘鸡案例，我们可以想到，其价格的比较结果并非一定只有两种，还会有相同的情况：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> sha_xian = <span class="number">20</span>, da_pan_ji = <span class="number">58</span>;</span><br><span class="line">	<span class="keyword">if</span> (sha_xian &lt; da_pan_ji) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;今晚吃沙县&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sha_xian == da_pan_ji) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;吃哪个都可以&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;今晚吃大盘鸡&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以在 if 的下面添加 else if 语句来判断这种情况，else if 语句的作用类似于 if 语句，但是不能单独使用</p>
<p><strong>else if 可以存在不止一句</strong></p>
<p>同样的，当 else if 语句后面只有一条语句时，可以不写大括号。</p>
<h3 id="switch语句"><a class="markdownIt-Anchor" href="#switch语句">#</a> switch 语句</h3>
<p>在生活中，除了如同 if、else 这种分支，还存在多分支的情况，例如：</p>
<ul>
<li>如果今天是周一，我就去学 C 语言</li>
<li>如果今天是周二，我就去学 C++</li>
<li>如果今天是周三，我就去学 Java</li>
<li>如果今天是周四，我就去学 Python</li>
<li>如果今天是周五，我就去学 C#</li>
<li>如果今天是周六，我就出去玩</li>
<li>如果今天是周日，我就睡懒觉</li>
</ul>
<p>当然，这种多分支的情况可以使用多个 else if 去实现，但是当分支过多，if 语句的效率通常不如 switch 语句。</p>
<p>首先介绍一下 switch 语句的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">	执行代码块;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">	执行代码块;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">	执行代码块;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    执行代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>switch 后面的括号中的变量可以是整型或者字符型。</p>
<p>当变量的值等于值 1 时，便会执行 case 值 1: 后面的代码块。</p>
<p>需要注意的时，case 语句后面的是冒号而不是分号。</p>
<p>当 case 语句后的代码块被执行完后，如果有 break 语句，则会终止 switch，如果没有 break 语句，则会继续向下执行。</p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(key)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于上面的这个 switch 语句来说，如果 key 的值为 1，则最后的打印结果会是 123</p>
<p>如果 key 的值为 2，则最后的打印结果会是 23，这种现象被称为穿透效果</p>
<p>default 语句并非必要，可以不写</p>
<p>default 语句类似于 if 语句中的 else，当所有情况都不被匹配到时，会被执行。</p>
<p>如果 default 上面的语句并没有写 break；那么 default 也会被穿透。</p>
<hr>
<p>接着我们回到上面的问题，如果使用 switch 语句实现，代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> date = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">switch</span> (date) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周一，我去学C语言&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周二，我去学C++&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周三，我去学Java&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周四，我去学Python&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周五，我去学C#&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周六，我出去玩&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天是周日，我睡懒觉&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;今天周几都不是，什么都不干&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们通过另一个案例来感受一下穿透效果：</p>
<p>小明的爸爸许诺给小明：</p>
<ul>
<li>如果小明的期末成绩高于 60 分，便给他 100 元钱</li>
<li>如果高于 80 分，便给他买手机、和给他 100 元钱</li>
<li>如果高于 100 分，便给他买电脑、手机，而且给他 100 元钱</li>
</ul>
<p>使用 switch 实现的代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> score = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">switch</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;给小明买电脑\n&quot;</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;给小明买手机\n&quot;</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;给小明100元钱\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过这个代码，我们很轻松的实现了小明爸爸的许诺这个案例。</p>
<h2 id="指针从c中复制"><a class="markdownIt-Anchor" href="#指针从c中复制">#</a> <mark>指针 (从 C 中复制)</mark></h2>
<h3 id="初识"><a class="markdownIt-Anchor" href="#初识">#</a> 初识</h3>
<p>指针是 C 语言中一个十分重要的概念。</p>
<p>指针的长度为 4 个字节，内部存储的是一个十六进制数。</p>
<p>在数据类型的后面添加一个星号，以创建对应的类型指针，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> * int_pointer;<span class="comment">//声明一个整型指针</span></span><br><span class="line"><span class="type">float</span> * float_pointer;<span class="comment">//声明一个浮点型指针</span></span><br></pre></td></tr></table></figure>
<p><strong>指针存储的十六进制数，是内存中对应的位置，也被称为地址</strong></p>
<p>我们在 scanf 中见到过 &amp; 符号，这个符号用于取出一个变量的地址，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">0</span>;<span class="comment">//声明并初始化一个整型</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个整型指针</span></span><br></pre></td></tr></table></figure>
<p><strong>地址是一个十分形象的名字，正如我们每个人都有自己的家庭地址，地址记录了一个变量在内存中存储的位置。</strong></p>
<p>指针的初始化通常使用 NULL 来进行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> * int_pointer = <span class="literal">NULL</span>;<span class="comment">//声明并初始化一个空指针</span></span><br></pre></td></tr></table></figure>
<p>当你创建了一个指针，但暂时不知道需要让它指向谁时，可以赋给其 NULL (空指针) 来避免错误调用未初始化的指针。</p>
<p>可以通过解引用符号 (星号)，来调用一个指针所指向的地址中保存的值，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">0</span>;<span class="comment">//声明并初始化一个整型</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个整型指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *int_pointer);<span class="comment">//调用指针指向地址中保存的值</span></span><br><span class="line"><span class="comment">//也可以打印指针本身</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, int_pointer);<span class="comment">//打印的结果是一个十六进制数</span></span><br></pre></td></tr></table></figure>
<p>指针也可以做基本的运算，例如使用指针做自增运算：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">0</span>;<span class="comment">//声明并初始化一个整型</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个整型指针</span></span><br><span class="line">int_pointer++;<span class="comment">//指针自增</span></span><br></pre></td></tr></table></figure>
<p>指针自增时，会根据其类型增加相应的字节数，比如整型指针，实际是自增了一个 int (4 个字节) 的大小。</p>
<p>这种使用方式通常配合内存管理 (malloc、free) 或者数组使用，在后面会详细介绍</p>
<p><strong>注意！这里仅做一个示范，实际上这样使用是错误的，会导致指针指向未知的内存空间。</strong></p>
<h3 id="值传递与指针传递"><a class="markdownIt-Anchor" href="#值传递与指针传递">#</a> 值传递与指针传递</h3>
<p>根据已经学习过的知识，我们可以简单的写出一个交换 a,b 变量值的程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">	<span class="type">int</span> temp = a;<span class="comment">//使用中间变量temp保存a的值</span></span><br><span class="line">	a = b;<span class="comment">//将b的值赋给变量a</span></span><br><span class="line">	b = temp;<span class="comment">//将保存的值赋给b，完成交换</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, a, b);<span class="comment">//打印检测</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后将其封装成一个函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">	Swap(a, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, a, b);<span class="comment">//打印检测</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">	<span class="type">int</span> temp = x;</span><br><span class="line">	x = y;</span><br><span class="line">	y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过打印，我们可以发现，a 与 b 的值并未实现交换。</p>
<p>这与值传递、地址传递有关。</p>
<p>对于一个函数的形参 (形式参数，即上面函数中的 x 和 y)，在调用函数时，会自动生成新的变量 x, y 然后把 a 和 b 的值赋给对应的形参。</p>
<p>这样我们就不难理解为什么 Swap 函数并未改变 a 与 b 的值，因为函数从始至终都未与变量 a、b 打过交道</p>
<p>那么如果我想要使用函数修改一个变量的值，该怎么做？那就是传递一个变量的地址，修改成如下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span>* x, <span class="type">int</span>* y)</span>;<span class="comment">//需要的参数修改为指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">	Swap(&amp;a, &amp;b);<span class="comment">//使用&amp;符号，取出a与b的地址，传递过去</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d,%d&quot;</span>, a, b);<span class="comment">//打印检测</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span>* x, <span class="type">int</span>* y)</span> &#123;</span><br><span class="line">	<span class="type">int</span> temp = *x;<span class="comment">//使用*来调用指针指向的地址中保存的值</span></span><br><span class="line">	*x = *y;</span><br><span class="line">	*y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>因为每个变量对应的地址是唯一的，所以使用指针通过地址对值进行修改，就一定可以修改到目标变量。</strong></p>
<p>另外，指针传递也可以减少值的复制，这一应用会在数组与结构体中体现。</p>
<h3 id="函数指针与回调函数"><a class="markdownIt-Anchor" href="#函数指针与回调函数">#</a> 函数指针与回调函数</h3>
<p>函数指针是指向函数的指针变量。</p>
<p>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。</p>
<p>函数指针可以像一般函数一样，用于调用函数、传递参数。</p>
<p>函数指针变量的声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">函数返回值类型 (*函数指针名)(参数类型列表) = 函数名;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;<span class="comment">//声明并实现一个函数，该函数的作用：在a与b中取出更大值并返回</span></span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">   	<span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line">	<span class="type">int</span> (*pointer_max)(<span class="type">int</span>, <span class="type">int</span>) = max;<span class="comment">//使用示例</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;max is %d&quot;</span>, pointer_max(x, y));<span class="comment">//使用函数指针调用函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>回调函数：当函数所需的参数列表中，包含函数指针时，该函数被称为回调函数。</p>
<p>即在函数中，通过函数指针调用另一个函数，示例如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_Function</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;printFunction被调用\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">callback_Function</span><span class="params">(<span class="type">int</span> times, <span class="type">void</span> (*p_f_parameter)(<span class="type">void</span>))</span> &#123;<span class="comment">//回调函数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; times; i++)<span class="comment">//使用for循环，调用times次函数指针所指向的函数</span></span><br><span class="line">		p_f_parameter();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	callbackFunction(<span class="number">10</span>, print_Function);<span class="comment">//这里仅写函数名，不能加括号，加上括号相当于调用函数，给了一个空值(函数返回为空)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 callback_Function 为回调函数。</p>
<h3 id="多级指针"><a class="markdownIt-Anchor" href="#多级指针">#</a> 多级指针</h3>
<p>正如每个变量都有自己对应的地址，指针变量作为一个存储指针的变量，也有自己的地址。</p>
<p>我们可以使用一个二级指针来保存指针变量对应的地址，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> number = <span class="number">1</span>;<span class="comment">//声明并初始化一个整型变量</span></span><br><span class="line"><span class="type">int</span> * int_pointer = &amp;number;<span class="comment">//声明并初始化一个指针变量</span></span><br><span class="line"><span class="type">int</span> ** level_2_pointer = &amp;int_pointer;<span class="comment">//声明并初始化一个二级指针变量</span></span><br></pre></td></tr></table></figure>
<p>根据星号的数量可以判断一个指针的级别，以此类推，还有三级、四级、多级指针。</p>
<h3 id="指针与常量"><a class="markdownIt-Anchor" href="#指针与常量">#</a> 指针与常量</h3>
<p>const 关键字与指针在一起使用时，有多种使用方法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> * p;<span class="comment">//常量指针</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> * p;<span class="comment">//常量指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p;<span class="comment">//指针常量</span></span><br></pre></td></tr></table></figure>
<p>前两者的效果是相同的，<strong>常量指针正如同它的名字，这是指向常量的一个指针</strong>。</p>
<p>对于常量指针来说，是不可以通过解引用符 (星号) 去改变其地址中保存的值的，因为地址中保存的值是一个常量，常量是不可修改的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *p;<span class="comment">//声明常量指针p</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">4</span>;<span class="comment">//声明并初始化变量a</span></span><br><span class="line">p = &amp;a;<span class="comment">//将变量a的地址赋值给p</span></span><br><span class="line">*p = <span class="number">5</span>;<span class="comment">//错误，不能通过指针p来改变值</span></span><br><span class="line"><span class="comment">//但是这里可以通过修改a来修改值，因为a是变量</span></span><br></pre></td></tr></table></figure>
<p>对于常量指针来说，指向的地址中存储的值不可修改，但指向的地址是可以修改的，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b = <span class="number">5</span>;<span class="comment">//再声明并初始化一个变量b</span></span><br><span class="line">p = &amp;b;<span class="comment">//将b的地址复制给p</span></span><br></pre></td></tr></table></figure>
<p><strong>而指针常量，指的是指针本身是一个常量</strong>，即指针指向的地址不可改变，但指向地址中存储的值可以改变，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">4</span>, b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;a;<span class="comment">//和使用const定义常量一样，声明的同时就需要初始化</span></span><br><span class="line">*p = <span class="number">5</span>;<span class="comment">//这是被允许的</span></span><br><span class="line">p = &amp;b;<span class="comment">//错误，不能修改一个常量</span></span><br></pre></td></tr></table></figure>
<p>除此之外，还有指向常量的指针常量，即为以上二者的结合</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p;<span class="comment">//它存储的地址不允许被改变，地址中保存的值也不允许被改变</span></span><br></pre></td></tr></table></figure>
<p>const 修饰词可以在函数之间传递地址时，锁定数据，防止误操作</p>
<h2 id="结构体从c中复制"><a class="markdownIt-Anchor" href="#结构体从c中复制">#</a> 结构体 (从 C 中复制)</h2>
<h3 id="初识-2"><a class="markdownIt-Anchor" href="#初识-2">#</a> 初识</h3>
<p>C<ins> 中的类取代了结构体的作用，因此结构体在 C</ins> 中相对于 C 作用小很多。</p>
<p>定义结构体的语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struct_tag</span> &#123;</span><span class="comment">//结构体标签</span></span><br><span class="line">    member_element;<span class="comment">//结构体成员元素</span></span><br><span class="line">    member_element;</span><br><span class="line">    member_element;</span><br><span class="line">    ...</span><br><span class="line">&#125;variable_struct;<span class="comment">//结构变量</span></span><br><span class="line"><span class="comment">//结构变量不能与结构体标签同名</span></span><br></pre></td></tr></table></figure>
<p>一般情况下，结构体标签、成员元素、结构变量，这 3 部分至少要出现两个。如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形式1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;my_struct;</span><br><span class="line"><span class="comment">//使用这种方法，直接定义了一个结构变量my_struct，但是不再能创建第二个结构变量</span></span><br><span class="line"><span class="comment">//可以直接调用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	my_struct.a = <span class="number">0</span>;<span class="comment">//通过点(.)调用结构体的成员元素</span></span><br><span class="line">	my_struct.b = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	my_struct.c = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者这样定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形式2</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">struct_tag</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用这种方法，定义了一个struct_tag的结构，需要声明变量再使用，如下：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">struct_tag</span> <span class="title">my_struct</span>;</span><span class="comment">//声明一个结构变量</span></span><br><span class="line">	my_struct.a = <span class="number">0</span>;<span class="comment">//通过点(.)调用结构体的成员元素</span></span><br><span class="line">	my_struct.b = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	my_struct.c = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外结构体经常会配合 typedef 使用，使用方式如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配合typedef使用：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">char</span> b;</span><br><span class="line">	<span class="type">float</span> c;</span><br><span class="line">&#125;struct_name;</span><br><span class="line"><span class="comment">//使用这种方式，定义了一个叫做struct_name的新变量类型，可以把它当成int之类的变量类型使用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	struct_name my_struct;<span class="comment">//声明一个结构变量</span></span><br><span class="line">	my_struct.a = <span class="number">0</span>;<span class="comment">//通过点(.)调用结构体的成员元素</span></span><br><span class="line">	my_struct.b = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	my_struct.c = <span class="number">0.0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="typedef"><a class="markdownIt-Anchor" href="#typedef">#</a> typedef</h3>
<p>使用 typedef 关键字可以自定义数据类型，如结构体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">char</span> name[<span class="number">10</span>];<span class="comment">//长度为10的字符数组</span></span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	Student student;<span class="comment">//声明一个结构变量</span></span><br><span class="line">	student.id = <span class="number">123</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(student.name, <span class="string">&quot;张三&quot;</span>);<span class="comment">//使用string.h头文件下的strcpy函数操作字符数组</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;学生：%s, 学号：%d&quot;</span>, student.name, student.id);<span class="comment">//打印测试</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以用于给原有数据类型起别名：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;<span class="comment">//给int起别名为ElementType</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    ElementType data = <span class="number">123456</span>;<span class="comment">//等同于int data = 123456;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆区开辟数据new关键字"><a class="markdownIt-Anchor" href="#堆区开辟数据new关键字">#</a> <mark>堆区开辟数据 (new 关键字)</mark></h2>
<p><strong>使用<mark> new</mark> 关键字开辟堆区数据，使用<mark> delete</mark> 关键字进行释放</strong></p>
<p><strong>注意：开辟的堆区需要程序员手动释放</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用： new type</span></span><br><span class="line">    <span class="type">int</span>* example = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; *example &lt;&lt; endl;<span class="comment">//打印10</span></span><br><span class="line">    <span class="keyword">delete</span> example;<span class="comment">//将example释放</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>* example = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];<span class="comment">//创建一个长度为10的整型数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)<span class="comment">//遍历数组赋值</span></span><br><span class="line">        example[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)<span class="comment">//遍历数组打印</span></span><br><span class="line">        cout &lt;&lt; example[i] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">delete</span>[] example;<span class="comment">//释放数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用起别名"><a class="markdownIt-Anchor" href="#引用起别名">#</a> 引用 (起别名)</h2>
<h3 id="使用"><a class="markdownIt-Anchor" href="#使用">#</a> 使用</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法：</span></span><br><span class="line"><span class="comment">//数据类型 &amp;别名 = 原名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;b = a;</span><br><span class="line">    <span class="comment">//相当于新建一个指针，将a的地址赋给新指针</span></span><br><span class="line">    <span class="comment">//注意：1.引用必须初始化 2.引用初始化后不可改变</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> c = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">swap</span>(a,c);<span class="comment">//引用传递类似于地址传递，能修改原数据</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;<span class="comment">//a与c的值会交换</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> &amp;test01 = <span class="built_in">test</span>();<span class="comment">//返回number，其别名为test01</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test01=&quot;</span> &lt;&lt; test01 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">test</span>() = <span class="number">1000</span>;<span class="comment">//因返回的是number，所以可以对number进行赋值</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;test01=&quot;</span> &lt;&lt; test01 &lt;&lt; endl;<span class="comment">//对number赋值后，其引用test01的值也会改变</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;<span class="comment">//引用传递类似于地址传递，能修改原数据</span></span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：不要返回局部变量，或者返回局部变量的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数可以作为左值</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> number = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="本质"><a class="markdownIt-Anchor" href="#本质">#</a> 本质</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用的本质就是指针常量</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;ref = a;</span><br><span class="line"><span class="comment">//实际操作为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="comment">//指针常量的指向不可改变，所以引用不可更改</span></span><br><span class="line">ref = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//实际操作为 *ref = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对于函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>&amp; ref)</span></span>&#123;<span class="comment">//实际操作为 int* const ref = &amp;a;</span></span><br><span class="line">    ref = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数"><a class="markdownIt-Anchor" href="#函数">#</a> <mark>函数</mark></h2>
<p><mark><strong>函数基础参考 C 语言笔记</strong></mark></p>
<h3 id="形参默认值与占位参数"><a class="markdownIt-Anchor" href="#形参默认值与占位参数">#</a> <mark>形参默认值与占位参数</mark></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++函数的形参可以设定默认值，如</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">example</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c = <span class="number">20</span>,<span class="type">int</span> d = <span class="number">30</span>)</span></span>&#123;<span class="comment">//注意：有默认值的形参必须置后(写在最右边)</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c + d;</span><br><span class="line">&#125;<span class="comment">//注意2：函数的声明与实现，仅能出现一次默认值设定</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">example</span>(<span class="number">10</span>,<span class="number">10</span>) &lt;&lt; endl;<span class="comment">//打印40</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数占位参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//其中第二个int起到占位作用</span></span><br><span class="line">    <span class="comment">//若有占位参数，则调用该函数时，需输入参数才可以调用。如func(10,10);</span></span><br><span class="line">    <span class="comment">//占位参数可以有默认参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数重载"><a class="markdownIt-Anchor" href="#函数重载">#</a> <mark>函数重载</mark></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载可以让函数名相同，提高复用性</span></span><br><span class="line"><span class="comment">//函数重载要求条件</span></span><br><span class="line"><span class="comment">//1.同一个作用域下</span></span><br><span class="line"><span class="comment">//2.函数名相同</span></span><br><span class="line"><span class="comment">//3.函数参数类型不同，或个数不同，或顺序不同</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;<span class="comment">//参数个数不同</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int a)调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span>&#123;<span class="comment">//参数类型不同</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(double a)调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a,<span class="type">double</span> b)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(int a,double b)调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="comment">//参数顺序不同</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func(double a,int b)调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：函数重载碰到默认参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b = <span class="number">10</span>)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2(int a,int b = 10)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func2(int a)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于以上写法，使用func2(10)；调用函数时，会同时触发两种情况，导致错误</span></span><br></pre></td></tr></table></figure>
<h2 id="类与对象"><a class="markdownIt-Anchor" href="#类与对象">#</a> <mark>类与对象</mark></h2>
<p>C++ 面向对象的三大特性：<mark><strong>封装、继承、多态</strong></mark></p>
<p>C++ 认为万事万物皆对象，对象上有其属性和行为</p>
<h3 id="封装"><a class="markdownIt-Anchor" href="#封装">#</a> 封装</h3>
<p>封装的意义：</p>
<p><mark><strong>1. 将属性和行为作为一个整体，表现生活中的事物</strong></mark></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例(写一个圆类)：</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>&#123;</span><br><span class="line">    <span class="comment">//访问权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//属性 = 成员属性 = 成员变量</span></span><br><span class="line">    <span class="type">int</span> c_r;<span class="comment">//半径</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">calculateZC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * PI * c_r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Circle c1;<span class="comment">//创建对象(实例化)</span></span><br><span class="line">    c1.c_r = <span class="number">10</span>;<span class="comment">//给圆类的属性赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长为:&quot;</span> &lt;&lt; c1.<span class="built_in">calculateZC</span>() &lt;&lt; endl;<span class="comment">//调用圆类的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例2(学生类):</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//公共权限</span></span><br><span class="line">    string s_name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> s_id;<span class="comment">//学号</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showStudent</span><span class="params">()</span></span>&#123;<span class="comment">//打印学生信息的方法</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; s_name &lt;&lt; <span class="string">&quot;学号:&quot;</span> &lt;&lt; s_id &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>&#123;<span class="comment">//修改姓名的方法</span></span><br><span class="line">        s_name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setId</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;<span class="comment">//修改学号的方法</span></span><br><span class="line">        s_id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><mark><strong>2. 将属性和行为加以权限控制</strong></mark></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//权限分为三种</span></span><br><span class="line"><span class="comment">//public	成员 类内可以访问，类外也可以访问</span></span><br><span class="line"><span class="comment">//protected 成员 类内可以访问，类外不可以访问。子类可以访问。</span></span><br><span class="line"><span class="comment">//private	成员 类内可以访问，类外不可以访问。子类不可以访问。</span></span><br></pre></td></tr></table></figure>
<p><strong>struct 与 class 的区别：struct 的默认权限为 public，class 默认权限为 private</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span>&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">C2</span>&#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    C1 c1;</span><br><span class="line">    <span class="comment">//c1.a = 100;//这行代码是不被允许的，因为class的默认权限为private</span></span><br><span class="line">    C2 c2;</span><br><span class="line">    c2.b = <span class="number">100</span>;<span class="comment">//这行代码是被允许的，因为struct的默认权限为public</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造函数与析构函数"><a class="markdownIt-Anchor" href="#构造函数与析构函数">#</a> 构造函数与析构函数</h3>
<p>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用。</p>
<p>析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</p>
<p><strong>C++ 会自动提供构造函数 (空实现) 与析构函数 (空实现) 与拷贝构造函数。</strong></p>
<p>当拥有构造函数 (有参) 时，C++ 将不再自动提供无参空实现，但仍提供拷贝构造函数。</p>
<p>当拥有拷贝构造函数时，C++ 不再自动提供其他构造函数。</p>
<p><mark><strong>构造函数语法：</strong></mark></p>
<p>1. 构造函数没有返回值，也不写 void。</p>
<p>2. 函数名与类名相同。</p>
<p>3. 构造函数可以有参数，因此可以发生重载。</p>
<p>4. 程序在调用对象时会自动调用构造函数，无需手动调用，而且只会调用一次。</p>
<p>==<strong> 析构函数语法：=</strong>=</p>
<p>1. 析构函数没有返回值，也不写 void。</p>
<p>2. 函数名与类名相同，函数名前要添加～</p>
<p>3. 析构函数不可以有参数，因此不能重载。</p>
<p>4. 程序在对象销毁前会自动调用析构函数，无需手动调用，而且只会调用一次。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassLearn</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">ClassLearn</span>();</span><br><span class="line">	~<span class="built_in">ClassLearn</span>();</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span>* height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ClassLearn.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ClassLearn::<span class="built_in">ClassLearn</span>() &#123;</span><br><span class="line">    age = <span class="number">18</span>;</span><br><span class="line">    height = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">175</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassLearn::~<span class="built_in">ClassLearn</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (height != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">delete</span> height;</span><br><span class="line">        height = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>拷贝构造函数</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p)&#123;</span><br><span class="line">        <span class="comment">//拷贝构造函数，实例化一个类，并将新的实例按照传入的实例复制所有属性</span></span><br><span class="line">        age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="深拷贝与浅拷贝"><a class="markdownIt-Anchor" href="#深拷贝与浅拷贝">#</a> 深拷贝与浅拷贝</h3>
<p><strong>浅拷贝：</strong></p>
<p>编译器提供的拷贝构造函数，仅进行浅拷贝操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span>* age;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> (age != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> age;</span><br><span class="line">            age = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当其中 p2 对 p1 进行拷贝时，p2 的 int* age 仅仅拷贝了 p1 中 age 的地址。</p>
<p>最后结束时，p2<sub> (栈后进先出)</sub> 调用析构函数，释放了 age 指向的堆区内存。</p>
<p>p1 再调用析构函数，则会出现错误。</p>
<p><strong>若要解决浅拷贝的不足，则需重写拷贝构造函数进行深拷贝：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//例如</span><br><span class="line">class Person()&#123;</span><br><span class="line">    public:</span><br><span class="line">    int* age;</span><br><span class="line">    Person(int age)&#123;</span><br><span class="line">        this-&gt;age = new int(age);</span><br><span class="line">    &#125;</span><br><span class="line">    Person(const Person &amp;p)&#123;</span><br><span class="line">    	this-&gt;age = new int(*p.age);</span><br><span class="line">    &#125;</span><br><span class="line">    ~Person()&#123;</span><br><span class="line">        if (age != NULL)&#123;</span><br><span class="line">            delete age;</span><br><span class="line">            age = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Person p1(18);</span><br><span class="line">    Person p2(p1);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="初始化列表"><a class="markdownIt-Anchor" href="#初始化列表">#</a> 初始化列表</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以通过以下形式，使用构造函数来初始化对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    string m_pName;</span><br><span class="line">    <span class="built_in">Phone</span>(string pName):<span class="built_in">m_pName</span>(pName)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    Phone phone;</span><br><span class="line">    <span class="built_in">Person</span>(string name,<span class="type">int</span> age):<span class="built_in">age</span>(age),<span class="built_in">name</span>(name)&#123;</span><br><span class="line">        <span class="comment">//当类A的成员中包含类B时，实例化一个类A，会首先实例化类B，再实例化类A。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="静态成员"><a class="markdownIt-Anchor" href="#静态成员">#</a> 静态成员</h3>
<p>在成员变量或成员函数添加<mark> static</mark> 关键字，称为静态成员</p>
<p>静态成员分为：</p>
<p><strong>静态成员变量：1. 所有对象共享一份数据，2. 在编译阶段分配内存，3. 类内声明，类外初始化。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类内声明，类外初始化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:<span class="comment">//静态成员也有访问权限</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> age;<span class="comment">//类内声明</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::age = <span class="number">18</span>;<span class="comment">//类外初始化</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态成员变量可以通过类名直接访问(如果访问权限是public)</span></span><br><span class="line">    cout &lt;&lt; Person::age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>静态成员函数：1. 所有对象共享同一个函数，2. 静态成员函数只能访问静态成员变量。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">  <span class="keyword">public</span>:<span class="comment">//静态成员也有访问权限</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> age;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;静态成员函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;<span class="comment">//这个语句是错误的，静态成员函数不能访问非静态成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::age = <span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//静态成员函数可以通过类名直接访问(如果访问权限是public)</span></span><br><span class="line">    Person::<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="成员变量与成员函数分开存储"><a class="markdownIt-Anchor" href="#成员变量与成员函数分开存储">#</a> 成员变量与成员函数分开存储</h3>
<p>1. 空对象占用 1 个字节。</p>
<p>2. 成员变量占用的空间，即为对象占用的空间。</p>
<p>3. 静态成员变量并不存储在对象上。</p>
<p>4. 成员函数并不存储在对象上。</p>
<h3 id="this指针"><a class="markdownIt-Anchor" href="#this指针">#</a> this 指针</h3>
<p>this 指针无需定义，可直接使用。</p>
<p>this 指针是隐含每一个非静态成员函数内的一种指针。</p>
<p>this 指针指向 被调用的成员函数所属的对象。</p>
<p>用途：</p>
<p>当形参和成员变量同名时，可使用 this 区分。</p>
<p>在类的非静态成员函数中，返回对象本身，可以使用 return *this;</p>
<h3 id="const修饰成员函数"><a class="markdownIt-Anchor" href="#const修饰成员函数">#</a> const 修饰成员函数</h3>
<p>成员函数后添加加 const 修饰，被称为常函数</p>
<p>常函数内不可以修改成员属性。</p>
<p>成员属性声明时使用 mutable 修饰，则可以在常函数中修改。</p>
<p>常对象：</p>
<p>声明对象前加 const 修饰，则称为常对象。</p>
<p>常对象只能调用常函数。</p>
<h3 id="友元"><a class="markdownIt-Anchor" href="#友元">#</a> 友元</h3>
<p>作用：允许类外一些特殊的函数或类访问一些私有成员。</p>
<p>关键字：friend</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写法：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">House</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodGuy</span><span class="params">(House* house)</span></span>;<span class="comment">//则使用全局函数goodGuy时，就能访问m_BedRoom;</span></span><br><span class="line">	<span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">myFriend</span>;<span class="comment">//友元类</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">myFriend::visit</span><span class="params">()</span></span>;<span class="comment">//友元成员函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_BedRoom;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myFriend</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;<span class="comment">//成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="运算符重载"><a class="markdownIt-Anchor" href="#运算符重载">#</a> <mark>运算符重载</mark></h3>
<h4 id="加号运算符重载"><a class="markdownIt-Anchor" href="#加号运算符重载">#</a> 加号运算符重载</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age = <span class="number">10</span>):<span class="built_in">age</span>(age)&#123;&#125;</span><br><span class="line">    Person <span class="keyword">operator</span>+ (Person&amp; p) &#123;</span><br><span class="line">        Person temp;</span><br><span class="line">        temp.age = <span class="keyword">this</span>-&gt;age + p.age;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    Person p3 = p1 + p2;</span><br><span class="line">    cout &lt;&lt; p3.age &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述代码实现了对+运算符的重载，使得main中可以将p1与p2相加。</span></span><br><span class="line"><span class="comment">//也可以使用全局函数实现运算符重载，如下：</span></span><br><span class="line">Person <span class="keyword">operator</span>+ (Person &amp;p1, Person &amp;p2)&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.age = p1.age + p2.age;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注：对于内置的数据类型(int之类的)的表达式的运算符是无法改变的</span></span><br><span class="line"><span class="comment">//注2：不要滥用运算符重载</span></span><br></pre></td></tr></table></figure>
<h4 id="左移运算符重载"><a class="markdownIt-Anchor" href="#左移运算符重载">#</a> 左移运算符重载</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如下：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_name;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="built_in">Person</span>(string name = <span class="string">&quot;张三&quot;</span>, <span class="type">int</span> age = <span class="number">10</span>) :<span class="built_in">m_name</span>(name), <span class="built_in">m_age</span>(age) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, Person&amp; p) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m_name=&quot;</span> &lt;&lt; p.m_name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;m_age=&quot;</span> &lt;&lt; p.m_age;</span><br><span class="line">    <span class="keyword">return</span> cout;</span><br><span class="line">&#125;<span class="comment">//通常使用全局函数重载左移运算符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; p1 &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//输出结果为：</span></span><br><span class="line">    <span class="comment">//m_name=张三</span></span><br><span class="line">    <span class="comment">//m_age=18</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递增运算符重载"><a class="markdownIt-Anchor" href="#递增运算符重载">#</a> 递增运算符重载</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如下：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInt</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//返回引用，保证一直对一个目标进行操作，便于实现链式操作</span></span><br><span class="line">    MyInt&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用int作为占位符，来区分前置++与后置++。</span></span><br><span class="line">    <span class="comment">//此时编译器会将下面这个重载识别为后置++的重载</span></span><br><span class="line">    MyInt <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">        <span class="comment">//注意，这种写法不可以链式后置++(指：(myInt++)++)</span></span><br><span class="line">        <span class="function">MyInt <span class="title">temp</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">MyInt</span>(<span class="type">int</span> num = <span class="number">10</span>):<span class="built_in">num</span>(num)&#123;&#125;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, MyInt myInt) &#123;</span><br><span class="line">    cout &lt;&lt; myInt.num;</span><br><span class="line">    <span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">MyInt <span class="title">myInt</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; (myInt++)++ &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="赋值运算符重载"><a class="markdownIt-Anchor" href="#赋值运算符重载">#</a> 赋值运算符重载</h4>
<p>C++ 编译器提供的赋值运算，仅做浅拷贝。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span>* num;</span><br><span class="line">    <span class="built_in">Example</span>(<span class="type">int</span> data)&#123;</span><br><span class="line">        num = <span class="keyword">new</span> <span class="built_in">int</span>(data); </span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Example</span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> num;</span><br><span class="line">            num = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Example <span class="title">e1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="function">Example <span class="title">e2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    e2 = e1;</span><br><span class="line">    cout &lt;&lt; *e1.num &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *e2.num &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为仅做浅拷贝，所以当e2 = e1时，e2的num仅copy了e1的num存储的地址</span></span><br><span class="line"><span class="comment">//当e1使用完析构之后，num存储的地址被delete。</span></span><br><span class="line"><span class="comment">//则e2再进行delete会导致报错。</span></span><br><span class="line"><span class="comment">//在成员函数中添加如下代码，来重载赋值运算符</span></span><br><span class="line">Example&amp; <span class="keyword">operator</span>=(Example&amp; e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> num;</span><br><span class="line">            num = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num = <span class="keyword">new</span> <span class="built_in">int</span>(*e.num);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="关系运算符重载"><a class="markdownIt-Anchor" href="#关系运算符重载">#</a> 关系运算符重载</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="built_in">Person</span>(string name,<span class="type">int</span> age):<span class="built_in">name</span>(name),<span class="built_in">age</span>(age)&#123;&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>==(Person&amp; p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>!=(Person&amp; p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;李四&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (p1 == p2) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;p1与p2是相等的&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;p1与p2是不相等的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重载函数运算符"><a class="markdownIt-Anchor" href="#重载函数运算符">#</a> 重载函数运算符</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdd</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//将()重载</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;<span class="comment">//这种重载方式类似于函数，因此被称为仿函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyAdd myAdd;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">myAdd</span>(<span class="number">10</span>, <span class="number">8</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承"><a class="markdownIt-Anchor" href="#继承">#</a> 继承</h3>
<h4 id="继承语法与权限"><a class="markdownIt-Anchor" href="#继承语法与权限">#</a> 继承语法与权限</h4>
<p>语法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FatherClass</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>:<span class="keyword">public</span> FatherClass&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>继承可以用于减少重复代码，子类可以从父类那里继承相同的代码部分。</p>
<p>继承方式分为三种：</p>
<p>public：公共继承，无法访问 private，继承的成员权限与父类相同</p>
<p>protected：保护继承，无法访问 private，继承的的成员权限变为 protected。</p>
<p>private：私有继承，无法访问 private，继承的成员权限变为 private。</p>
<p>注：继承时仍然继承 private 成员，只是无法访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> hp;</span><br><span class="line">	<span class="type">int</span> mp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solid</span> :<span class="keyword">public</span> Enemy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Solid</span>(<span class="type">int</span> hp, <span class="type">int</span> mp) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;hp = hp;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SolidAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;This is SolidAttack&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span> :<span class="keyword">public</span> Enemy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Boss</span>(<span class="type">int</span> hp, <span class="type">int</span> mp)&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;hp = hp;</span><br><span class="line">		<span class="keyword">this</span>-&gt;mp = mp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">BossAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;This is BossAttack&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Solid <span class="title">solid</span><span class="params">(<span class="number">100</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">	<span class="function">Boss <span class="title">boss</span><span class="params">(<span class="number">1000</span>, <span class="number">1000</span>)</span></span>;</span><br><span class="line">	solid.<span class="built_in">SolidAttack</span>();</span><br><span class="line">	boss.<span class="built_in">BossAttack</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实例化一个子类时，会先调用父类的构造函数，再调用子类的构造函数。</p>
<p>在销毁时，会先调用子类的析构函数，再调用父类的析构函数。</p>
<p><strong>多继承：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用如下语法进行多继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>:<span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//使用多继承时，出现菱形继承会导致成员不明确。</span></span><br><span class="line"><span class="comment">//如：类A，与类B均继承自类Base，现有类C多继承类A与类B，则会导致成员不明确</span></span><br><span class="line"><span class="comment">//1.使用作用域可以访问不同父类的相同成员</span></span><br><span class="line"><span class="comment">//2.使用virtual关键字处理重复数据，如下：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AClass</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Base&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BClass</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Base&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CClass</span>:<span class="keyword">public</span> AClass,<span class="keyword">public</span> BClass&#123;&#125;;</span><br><span class="line"><span class="comment">//此时CClass中仅会继承1个data，不会再出现不明确。</span></span><br></pre></td></tr></table></figure>
<h4 id="继承时子类与父类的同名成员"><a class="markdownIt-Anchor" href="#继承时子类与父类的同名成员">#</a> 继承时子类与父类的同名成员</h4>
<p>当子类中出现与父类中同名的成员时：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于同名成员：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Son s;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子类成员属性=&quot;</span> &lt;&lt; s.element &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;父类成员属性=&quot;</span> &lt;&lt; s.Father::element &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子类成员函数&quot;</span> &lt;&lt; s.<span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;父类成员函数&quot;</span> &lt;&lt; s.Father::<span class="built_in">func</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//如果子类中出现父类同名的成员函数，子类的同名成员函数会隐藏父类所有的同名成员函数(包括重载)</span></span><br><span class="line">    <span class="comment">//如果想调用父类中被隐藏的同名成员函数，需要加作用域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于静态成员，同上。</p>
<h3 id="多态"><a class="markdownIt-Anchor" href="#多态">#</a> 多态</h3>
<p>1. 多态分为两类：</p>
<ul>
<li>静态多态：函数重载和运算符重载属于静态多态，复用函数名。</li>
<li>动态多态：派生类和虚函数实现运行时多态。</li>
</ul>
<p>2. 静态多态和动态多态的区别：</p>
<ul>
<li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li>
<li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//添加virtual关键字，使函数地址晚绑定</span></span><br><span class="line">    <span class="comment">//从而实现speak函数发出小猫在说话</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;动物在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:<span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;小猫在说话&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(Animal&amp; animal)</span> </span>&#123;</span><br><span class="line">	animal.<span class="built_in">speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Cat cat;</span><br><span class="line">	<span class="built_in">speak</span>(cat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多态满足条件：</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类中的虚函数</li>
</ul>
<p>多态使用条件：</p>
<ul>
<li>父类指针或引用指向子类对象</li>
</ul>
<p>重写：函数返回值类型、函数名、参数列表完全一致称为重写</p>
<h4 id="纯虚函数与抽象类"><a class="markdownIt-Anchor" href="#纯虚函数与抽象类">#</a> 纯虚函数与抽象类</h4>
<p>纯虚函数：使用 virtual 关键字修饰，并且无实现的类成员函数。</p>
<p>语法：virtual void func () = 0;</p>
<p>抽象类：只要其中有一个纯虚函数，则这个类称为抽象类。</p>
<p>1. 抽象类无法实例化。</p>
<p>2. 抽象类的子类必须重写纯虚函数，否则该子类也为抽象类。</p>
<h4 id="虚析构与纯虚析构"><a class="markdownIt-Anchor" href="#虚析构与纯虚析构">#</a> 虚析构与纯虚析构</h4>
<p>当使用父类指针指向子类，若子类中存有堆区数据，则结束时，仅调用父类的析构函数可能会无法释放子类的堆区数据，从而导致内存泄漏。</p>
<p>解决方法：将父类的析构函数改为虚析构函数。</p>
<p>纯虚析构：纯虚析构需要声明，也需要实现。</p>
<h3 id="案例computer类"><a class="markdownIt-Anchor" href="#案例computer类">#</a> 案例：Computer 类</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GPU</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelCPU</span> :<span class="keyword">public</span> CPU &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelGPU</span> :<span class="keyword">public</span> GPU &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AMDCPU</span> :<span class="keyword">public</span> CPU &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AMDGPU</span> :<span class="keyword">public</span> GPU &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZQMemory</span> :<span class="keyword">public</span> Memory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MGMemory</span> :<span class="keyword">public</span> Memory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Computer</span>(CPU* cpu, Memory* memory, GPU* gpu);</span><br><span class="line">	~<span class="built_in">Computer</span>();</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	CPU* m_cpu;</span><br><span class="line">	Memory* m_memory;</span><br><span class="line">	GPU* m_gpu;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line">Computer::<span class="built_in">Computer</span>(CPU* cpu, Memory* memory, GPU* gpu) &#123;</span><br><span class="line">	m_cpu = cpu;</span><br><span class="line">	m_memory = memory;</span><br><span class="line">	m_gpu = gpu;</span><br><span class="line">&#125;</span><br><span class="line">Computer::~<span class="built_in">Computer</span>() &#123;</span><br><span class="line">	<span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span> m_cpu;</span><br><span class="line">		m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (m_memory != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span> m_memory;</span><br><span class="line">		m_memory = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (m_gpu != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span> m_gpu;</span><br><span class="line">		m_gpu = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Computer::work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	m_cpu-&gt;<span class="built_in">calculate</span>();</span><br><span class="line">	m_memory-&gt;<span class="built_in">storage</span>();</span><br><span class="line">	m_gpu-&gt;<span class="built_in">display</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IntelCPU::calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;IntelCPU正在计算&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IntelGPU::display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;IntelGPU正在显示&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMDCPU::calculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;AMDCPU正在计算&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AMDGPU::display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;AMDGPU正在显示&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ZQMemory::storage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;芝奇内存条正在存储&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MGMemory::storage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;镁光内存条正在存储&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Computer.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Computer <span class="title">computer</span><span class="params">(<span class="keyword">new</span> IntelCPU, <span class="keyword">new</span> ZQMemory, <span class="keyword">new</span> AMDGPU)</span></span>;</span><br><span class="line">	computer.<span class="built_in">work</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模板"><a class="markdownIt-Anchor" href="#模板">#</a> <mark>模板</mark></h2>
<p>C++ 另一种编程思想称为<mark>泛型编程</mark>，主要利用的技术就是模板</p>
<p>C++ 提供两种模板机制：<strong>函数模板</strong>和<strong>类模板</strong></p>
<h3 id="调用规则"><a class="markdownIt-Anchor" href="#调用规则">#</a> 调用规则</h3>
<p>1. 如果函数模板和普通函数都可以实现，优先调用普通函数。</p>
<p>2. 可以通过空模板参数列表来强制调用函数模板。</p>
<p>3. 函数模板也可以发生重载。</p>
<p>4. 如果函数模板可以产生更好的匹配，优先调用函数模板。</p>
<h3 id="函数模板语法"><a class="markdownIt-Anchor" href="#函数模板语法">#</a> 函数模板语法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">函数声明或定义</span><br><span class="line"><span class="comment">//template	声明创建模板</span></span><br><span class="line"><span class="comment">//typename	表面其后面的符号是一种数据类型，可以用class代替</span></span><br><span class="line"><span class="comment">//T	通用的数据类型，名称可以替换，通常为大写字母</span></span><br></pre></td></tr></table></figure>
<p>案例 1：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">include&lt;iostream&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapNum</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line">	T temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用方式：</span></span><br><span class="line">	<span class="comment">//1.自动类型推导</span></span><br><span class="line">	<span class="comment">//swapNum(a, b);</span></span><br><span class="line">	<span class="comment">//2.显示指定类型</span></span><br><span class="line">	<span class="built_in">swapNum</span>&lt;<span class="type">int</span>&gt;(a, b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\tb=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>案例 2：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="comment">//选择排序模板</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(T arr[],<span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		<span class="type">int</span> max = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[max] &lt; arr[j]) &#123;</span><br><span class="line">				max = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (max != i) &#123;</span><br><span class="line">			T temp = arr[i];</span><br><span class="line">			arr[i] = arr[max];</span><br><span class="line">			arr[max] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="comment">//打印模板</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T arr[], <span class="type">int</span> len)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">		cout &lt;&lt; arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;<span class="comment">//字符数组排序</span></span><br><span class="line">	<span class="type">char</span> charArr[] = <span class="string">&quot;badcfe&quot;</span>;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(charArr) / <span class="built_in">sizeof</span>(charArr[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">selectionSort</span>(charArr, len);</span><br><span class="line">	<span class="built_in">print</span>(charArr, len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;<span class="comment">//整型数组排序</span></span><br><span class="line">	<span class="type">int</span> intArr[] = &#123;<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line">	<span class="type">int</span> len = <span class="built_in">sizeof</span>(intArr) / <span class="built_in">sizeof</span>(intArr[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">selectionSort</span>(intArr, len);</span><br><span class="line">	<span class="built_in">print</span>(intArr, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类模板语法"><a class="markdownIt-Anchor" href="#类模板语法">#</a> 类模板语法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">类</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">NameType</span>, <span class="keyword">class</span> <span class="title class_">AgeType</span> = <span class="type">int</span>&gt;</span><br><span class="line"><span class="comment">//类模板的模板参数列表中可以有默认参数</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(NameType name, AgeType age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	NameType m_Name;</span><br><span class="line">	AgeType m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;<span class="comment">//类外实现成员函数</span></span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Person_Name:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\tPerson_Age:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用类模板创建类时，不能自动类型推导</span></span><br><span class="line">	<span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="string">&quot;Michael&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	p1.<span class="built_in">showPerson</span>();;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模板重载"><a class="markdownIt-Anchor" href="#模板重载">#</a> 模板重载</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) :<span class="built_in">m_Name</span>(name), <span class="built_in">m_Age</span>(age) &#123;&#125;;</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="comment">//此模板不能用于Person类的比较，需要重载</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a == b)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function"><span class="type">bool</span> <span class="title">myCompare</span><span class="params">(Person&amp; p1, Person&amp; p2)</span> </span>&#123;<span class="comment">//重载格式</span></span><br><span class="line">	<span class="keyword">if</span> (p1.m_Name == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Michael&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Michael&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">myCompare</span>(p1, p2))</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;p1 == p2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类模板与继承"><a class="markdownIt-Anchor" href="#类模板与继承">#</a> 类模板与继承</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//若父类为一个类模板，则子类需要指出父类中的数据类型</span></span><br><span class="line"><span class="comment">//若要子类所需的类型也为灵活类型，则子类也需要是类模板</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">AgeType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;<span class="comment">//模板基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	AgeType base_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> :<span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt; &#123;<span class="comment">//非模板派生类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">C1</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;base_Age = age;</span><br><span class="line">		<span class="keyword">this</span>-&gt;c1_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> c1_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">AgeType</span>&gt;<span class="comment">//模板派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C2</span> :<span class="keyword">public</span> Base&lt;AgeType&gt; &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">C2</span>(AgeType age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;base_Age = age;</span><br><span class="line">		<span class="keyword">this</span>-&gt;c2_Age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	AgeType c2_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">C1 <span class="title">c1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">C2&lt;<span class="type">int</span>&gt; <span class="title">c2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;C1:&quot;</span> &lt;&lt; <span class="string">&quot;\tbase_Age:&quot;</span> &lt;&lt; c1.base_Age &lt;&lt; <span class="string">&quot;\tc1_Age:&quot;</span> &lt;&lt; c1.c1_Age &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;C2:&quot;</span> &lt;&lt; <span class="string">&quot;\tbase_Age:&quot;</span> &lt;&lt; c2.base_Age &lt;&lt; <span class="string">&quot;\tc2_Age:&quot;</span> &lt;&lt; c2.c2_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类模板案例"><a class="markdownIt-Anchor" href="#类模板案例">#</a> 类模板案例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组类封装</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">DataType</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	DataType* pAddress;<span class="comment">//数组地址</span></span><br><span class="line">	<span class="type">int</span> m_Count;<span class="comment">//元素个数</span></span><br><span class="line">	<span class="type">int</span> m_Size;<span class="comment">//数组容量</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyArray</span>(<span class="type">int</span> Size) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Size = Size;</span><br><span class="line">		<span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> DataType[<span class="keyword">this</span>-&gt;m_Size];</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">		<span class="keyword">if</span> (pAddress != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">			<span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//拷贝构造，防止浅拷贝</span></span><br><span class="line">	<span class="built_in">MyArray</span>(<span class="type">const</span> MyArray&amp; arr) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Count = arr.m_Count;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">		<span class="comment">//深拷贝</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> DataType[arr.m_Size];</span><br><span class="line">		<span class="comment">//将arr中的数据都拷贝过来</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Count; i++) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//operator= 防止浅拷贝问题</span></span><br><span class="line">	MyArray&amp; <span class="keyword">operator</span>=(<span class="type">const</span> MyArray&amp; arr) &#123;</span><br><span class="line">		<span class="comment">//先判断原来堆区是否有数据，如果有，先释放</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">			<span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_Count = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Count = arr.m_Count;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">		<span class="comment">//深拷贝</span></span><br><span class="line">		<span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> DataType[arr.m_Size];</span><br><span class="line">		<span class="comment">//将arr中的数据都拷贝过来</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Count; i++) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//尾插法</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Push_Back</span><span class="params">(<span class="type">const</span> DataType&amp; val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Count == <span class="keyword">this</span>-&gt;m_Size) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Array Full!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Count] = val;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Count++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//尾删法</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Pop_Back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Count == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Count--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//通过下标方式访问数组中的元素，即重载[]运算符</span></span><br><span class="line">	DataType&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index) &#123;</span><br><span class="line">		<span class="keyword">if</span> (index &gt; <span class="keyword">this</span>-&gt;m_Count - <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_Count++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回数组大小</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回数组内元素数</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Count;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;MyArray.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>() &#123;&#125;;</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) :<span class="built_in">m_name</span>(name), <span class="built_in">m_age</span>(age) &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot;\tage: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//MyArray测试代码</span></span><br><span class="line">	<span class="function">MyArray&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">getSize</span>(); i++) &#123;</span><br><span class="line">		arr[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">getSize</span>(); i++) &#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; arr.<span class="built_in">getCount</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; arr.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line">	arr.<span class="built_in">Pop_Back</span>();</span><br><span class="line">	cout &lt;&lt; arr.<span class="built_in">getCount</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; arr.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line">	arr.<span class="built_in">Push_Back</span>(<span class="number">500</span>);</span><br><span class="line">	cout &lt;&lt; arr.<span class="built_in">getCount</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; arr.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//自定义类型测试</span></span><br><span class="line">	<span class="function">MyArray&lt;Person&gt; <span class="title">pArr</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Michael&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;lisi&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line">	pArr[<span class="number">0</span>] = p1;</span><br><span class="line">	pArr[<span class="number">1</span>] = p2;</span><br><span class="line">	pArr[<span class="number">2</span>] = p3;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pArr.<span class="built_in">getCount</span>(); i++) &#123;</span><br><span class="line">		pArr[i].<span class="built_in">show</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stl"><a class="markdownIt-Anchor" href="#stl">#</a> <mark>STL</mark></h2>
<h3 id="stl基本概念"><a class="markdownIt-Anchor" href="#stl基本概念">#</a> STL 基本概念</h3>
<p>STL(Standard Template Library)</p>
<p>STL 从广义上分为：<strong>容器 (container)、算法 (algorithm)、迭代器 (iterator)</strong></p>
<p><strong>迭代器</strong>是<strong>容器</strong>和<strong>算法</strong>的桥梁</p>
<p>STL 几乎所有代码都采用了模板类，或者模板函数</p>
<p>STL 六大组件：<mark><strong>容器、算法、迭代器、仿函数、适配器 (配接器)、空间配置器</strong></mark></p>
<ul>
<li>
<p>容器：各种数据结构，如 vector、list、deque、set、map 等，用于存放数据</p>
</li>
<li>
<p>算法：各种常用算法，如 sort、find、copy、for_each 等</p>
</li>
<li>
<p>迭代器：扮演了容器与算法之间的胶合剂</p>
</li>
<li>
<p>仿函数：行为类似函数，可作为算法的某种策略</p>
</li>
<li>
<p>适配器：一种用来修饰容器、仿函数或者迭代器接口的东西</p>
</li>
<li>
<p>空间配置器：负责空间的配置与管理</p>
</li>
</ul>
<h3 id="vector容器"><a class="markdownIt-Anchor" href="#vector容器">#</a> <mark>Vector 容器</mark></h3>
<h4 id="vector容器语法"><a class="markdownIt-Anchor" href="#vector容器语法">#</a> Vector 容器语法</h4>
<p>C++ STL 中的 verctor 好比是 C 语言中的数组，但是 vector 又具有数组没有的一些高级功能。与数组相比，vector 就是一个可以不用再初始化就必须制定大小的边长数组，当然了，它还有许多高级功能。</p>
<p><strong>Vector 也称为单端数组</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;type&gt; vectorName;<span class="comment">//创建一个vector</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="built_in">push_back</span>(element);<span class="comment">//尾插</span></span><br><span class="line">    vector[i];<span class="comment">//访问第i个元素，注意，添加元素需要使用push方法。此形式只可用于读取与修改</span></span><br><span class="line">    <span class="built_in">begin</span>();<span class="comment">//返回头</span></span><br><span class="line">    <span class="built_in">end</span>();<span class="comment">//返回尾</span></span><br><span class="line">    <span class="built_in">size</span>();<span class="comment">//返回vector的元素数</span></span><br><span class="line">    <span class="built_in">resize</span>(val);<span class="comment">//重新指定vector内元素数，若源vector超出，则截断，若不足，则补0</span></span><br><span class="line">    <span class="built_in">capacity</span>();<span class="comment">//返回vector容器的容量</span></span><br><span class="line">    <span class="built_in">clear</span>();<span class="comment">//清空vector</span></span><br><span class="line">    <span class="built_in">reserve</span>(val);<span class="comment">//预留内存空间，可以减少容器扩展次数</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>();<span class="comment">//插入元素、四种重载：</span></span><br><span class="line">    <span class="comment">//1. vector.insert(vector.begin(), value);//在头部插入value</span></span><br><span class="line">    <span class="comment">//2. vector.insert(vector.end(), number, value);//在尾部插入number个value</span></span><br><span class="line">    <span class="comment">//3. vector.insert(vector.end(), vector2.begin(), vector2.end());//在vector尾部插入整个vector2</span></span><br><span class="line">    <span class="comment">//4. vector.insert(vector.end(), &#123; value1, value2&#125;);//在其尾部插入value1与value2</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">pop_back</span>();<span class="comment">//删除尾部元素</span></span><br><span class="line">    <span class="built_in">erase</span>(element_it);<span class="comment">//传入element的迭代器it，将element删除，并返回其下一个元素的迭代器</span></span><br><span class="line">    <span class="built_in">swap</span>(vec);<span class="comment">//将vec与源vector互换,可用于收缩内存空间</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">assign</span>();<span class="comment">//两种情况：1. assign(n,val)将vector中元素变为n个val  </span></span><br><span class="line">    <span class="comment">//2. vectorName.assign(vector.begin(),vector.end())将vector中的元素赋值给vectorName</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vector容器的迭代器是支持随机访问的迭代器</span></span><br></pre></td></tr></table></figure>
<h4 id="vector容器的使用"><a class="markdownIt-Anchor" href="#vector容器的使用">#</a> Vector 容器的使用：</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例1	存储基本数据类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//创建一个vector容器</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//向容器中插入数据</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i += <span class="number">10</span>) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">////通过迭代器访问容器中的数据</span></span><br><span class="line">	<span class="comment">//vector&lt;int&gt;::iterator itBegin = v.begin();//起始迭代器，指向vector容器中的最后一个元素</span></span><br><span class="line">	<span class="comment">//vector&lt;int&gt;::iterator itEnd = v.end();//结束迭代器，指向vector容器最后一个元素的下一个位置</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">////遍历方式1</span></span><br><span class="line">	<span class="comment">//while (itBegin != itEnd) &#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; *itBegin &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//	itBegin++;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">////遍历方式2</span></span><br><span class="line">	<span class="comment">//for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++) &#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; *it &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历方式3，引入algorithm头文件，使用STL提供的遍历算法</span></span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);<span class="comment">//回调函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例2	存储自定义数据类型</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> m_age;</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) :<span class="built_in">m_name</span>(name), <span class="built_in">m_age</span>(age) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	string nameSeed[] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		<span class="function">Person <span class="title">p</span><span class="params">(nameSeed[i], <span class="number">18</span>)</span></span>;</span><br><span class="line">		v.<span class="built_in">push_back</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Person&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; it-&gt;m_name &lt;&lt; <span class="string">&quot;\tage:&quot;</span> &lt;&lt; it-&gt;m_age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例3	容器嵌套</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	vector&lt; vector&lt;<span class="type">int</span>&gt; &gt; vBase;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v3;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v3.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	vBase.<span class="built_in">push_back</span>(v1);</span><br><span class="line">	vBase.<span class="built_in">push_back</span>(v2);</span><br><span class="line">	vBase.<span class="built_in">push_back</span>(v3);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;::iterator itBase = vBase.<span class="built_in">begin</span>(); itBase != vBase.<span class="built_in">end</span>(); itBase++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = itBase-&gt;<span class="built_in">begin</span>(); it != itBase-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">			cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="string容器"><a class="markdownIt-Anchor" href="#string容器">#</a> String 容器</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基础功能：拼接之类的不再介绍</span></span><br><span class="line"><span class="comment">//string查找、替换与比较</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="type">int</span> pos = str1.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);<span class="comment">//find从左向右查找</span></span><br><span class="line">    <span class="comment">//rfind从右向左查找</span></span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) &#123;<span class="comment">//若未找到值，则会返回-1</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;value is not found&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;value&#x27;s index is &quot;</span> &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    str1.<span class="built_in">replace</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&quot;1111&quot;</span>);<span class="comment">//从下标为1的位置，将3个字符替换，替换为1111</span></span><br><span class="line">    <span class="comment">//输出结果为 a1111efg</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;hello&quot;</span>;<span class="comment">//compare函数会逐字符比对其ASCII码</span></span><br><span class="line">    string str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    string str3 = <span class="string">&quot;xello&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) == <span class="number">0</span>) &#123;<span class="comment">//如果str1==str2则返回0</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1 == str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str3) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1 &lt; str3&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果str1更大，则返回值大于0</span></span><br><span class="line">    <span class="comment">//如果str2更大，则返回值小于0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        str[i] = str.<span class="built_in">at</span>(i + <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; str.<span class="built_in">at</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="comment">//在下标为1的位置插入111</span></span><br><span class="line">    str.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;<span class="comment">//输出结果为h111ello</span></span><br><span class="line"></span><br><span class="line">    str.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//从下标为1的位置开始，删除3个字符</span></span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;<span class="comment">//输出结果为hello</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//截取复制字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string email = <span class="string">&quot;zhangsan@163.com&quot;</span>;</span><br><span class="line">    <span class="type">int</span> pos = email.<span class="built_in">find</span>(<span class="string">&quot;@&quot;</span>);</span><br><span class="line">    <span class="comment">//从0开始截取，到pos的位置</span></span><br><span class="line">    string usrName = email.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">    <span class="comment">//substr不破坏源字符串</span></span><br><span class="line">    cout &lt;&lt; usrName &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">test02</span>();</span><br><span class="line">    <span class="built_in">test03</span>();</span><br><span class="line">    <span class="built_in">test04</span>();</span><br><span class="line">    <span class="built_in">test05</span>();</span><br><span class="line">    <span class="built_in">test06</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="deque容器"><a class="markdownIt-Anchor" href="#deque容器">#</a> Deque 容器</h3>
<ul>
<li>vector 对于头部的插入、删除效率低，数据量越大，效率越低</li>
<li>deque 相对而言，对头部的插入、删除速度会比 vector 快</li>
<li>vector 访问元素时的速度会比 deque 快</li>
</ul>
<h4 id="deque容器语法"><a class="markdownIt-Anchor" href="#deque容器语法">#</a> Deque 容器语法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    deque&lt;type&gt; dequeName;</span><br><span class="line">    <span class="comment">//下面为deque的方法</span></span><br><span class="line">    <span class="built_in">push_back</span>();<span class="comment">//尾插</span></span><br><span class="line">	<span class="built_in">push_front</span>();<span class="comment">//头插</span></span><br><span class="line">	<span class="built_in">pop_back</span>();<span class="comment">//尾删</span></span><br><span class="line">	<span class="built_in">pop_front</span>();<span class="comment">//头删</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>();<span class="comment">//参考vector</span></span><br><span class="line">    </span><br><span class="line">	<span class="built_in">front</span>();<span class="comment">//获得队列头部元素。</span></span><br><span class="line">	<span class="built_in">back</span>();<span class="comment">//获得队列尾部元素。</span></span><br><span class="line">	<span class="built_in">size</span>();<span class="comment">//获得队列元素数。</span></span><br><span class="line">    <span class="built_in">resize</span>();<span class="comment">//参考vector</span></span><br><span class="line">    </span><br><span class="line">	<span class="built_in">empty</span>();<span class="comment">//参考vector</span></span><br><span class="line">    <span class="built_in">assign</span>();<span class="comment">//参考vector</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(iterator begin,iterator end);<span class="comment">//排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">clear</span>();<span class="comment">//清空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//deque容器的迭代器也是支持随机访问的迭代器</span></span><br></pre></td></tr></table></figure>
<h3 id="stack容器"><a class="markdownIt-Anchor" href="#stack容器">#</a> Stack 容器</h3>
<h4 id="stack容器语法"><a class="markdownIt-Anchor" href="#stack容器语法">#</a> Stack 容器语法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    stack&lt;type&gt; stackName;<span class="comment">//创建一个stackName栈</span></span><br><span class="line">    stackName.<span class="built_in">empty</span>();<span class="comment">//如果栈为空，则返回true，否则返回false</span></span><br><span class="line">    stackName.<span class="built_in">size</span>();<span class="comment">//返回栈中元素的个数</span></span><br><span class="line">    stackName.<span class="built_in">top</span>();<span class="comment">//返回栈顶的元素，但不删除该元素</span></span><br><span class="line">    stackName.<span class="built_in">pop</span>();<span class="comment">//弹出栈顶元素，但不返回该元素</span></span><br><span class="line">    stackName.<span class="built_in">push</span>();<span class="comment">//将元素入栈</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="queue容器"><a class="markdownIt-Anchor" href="#queue容器">#</a> Queue 容器</h3>
<h4 id="queue容器语法"><a class="markdownIt-Anchor" href="#queue容器语法">#</a> Queue 容器语法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//C++提供的队列位于头文件&lt;queue&gt;中</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;type&gt; queueName;<span class="comment">//创建一个queueName队列</span></span><br><span class="line">    queueName.<span class="built_in">empty</span>();<span class="comment">//如果队列为空，返回true，否则返回false    </span></span><br><span class="line">	queueName.<span class="built_in">size</span>();<span class="comment">//返回队列中元素的个数</span></span><br><span class="line">	queueName.<span class="built_in">pop</span>();<span class="comment">//删除队列首元素但不返回其值</span></span><br><span class="line">	queueName.<span class="built_in">front</span>();<span class="comment">//返回队首元素的值，但不删除该元素</span></span><br><span class="line">	queueName.<span class="built_in">push</span>();<span class="comment">//在队尾压入新元素</span></span><br><span class="line">	queueName.<span class="built_in">back</span>();<span class="comment">//返回队列尾元素的值，但不删除该元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="list容器"><a class="markdownIt-Anchor" href="#list容器">#</a> <mark>list 容器</mark></h3>
<p>list 翻译为列表，C++ 中的列表相当于链表 (Link List)，包含数据域和指针域</p>
<p>STL 提供的链表是双向循环链表</p>
<h4 id="list容器语法"><a class="markdownIt-Anchor" href="#list容器语法">#</a> list 容器语法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    list&lt;type&gt; listName;<span class="comment">//创建一个列表</span></span><br><span class="line">    <span class="comment">//下面为列表的方法</span></span><br><span class="line">    <span class="built_in">begin</span>();<span class="comment">//返回表头</span></span><br><span class="line">    <span class="built_in">end</span>();<span class="comment">//返回表尾的后一个，实际为空，不能访问，常作为循环结束条件</span></span><br><span class="line">    <span class="built_in">push_front</span>();<span class="comment">//从表头插入元素</span></span><br><span class="line">    <span class="built_in">push_back</span>();<span class="comment">//从表尾插入元素</span></span><br><span class="line">    <span class="built_in">empty</span>();<span class="comment">//判断列表是否为空，若空则返回true，否则返回false</span></span><br><span class="line">    <span class="built_in">resize</span>();<span class="comment">//修改列表的长度，超出长度的元素将被删除，若不足，则以0填充</span></span><br><span class="line">    <span class="built_in">clear</span>();<span class="comment">//清空列表的所有元素</span></span><br><span class="line">    <span class="built_in">front</span>();<span class="comment">//返回表头元素</span></span><br><span class="line">    <span class="built_in">back</span>();<span class="comment">//返回表尾元素</span></span><br><span class="line">    <span class="built_in">pop_front</span>();<span class="comment">//删除表头元素</span></span><br><span class="line">    <span class="built_in">pop_back</span>();<span class="comment">//删除表尾元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">assign</span>();<span class="comment">//两种情况：1. assign(n,val)将列表中元素变为n个val  </span></span><br><span class="line">    <span class="comment">//2. listName.assign(list.begin(),list.end())将list中的元素赋值给listName</span></span><br><span class="line">    <span class="built_in">swap</span>();<span class="comment">//两种写法：1. list1.swap(list2) 2. swap(list1,list2) 作用：交换两个列表</span></span><br><span class="line">    <span class="built_in">reverse</span>();<span class="comment">//逆置列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge</span>();<span class="comment">//合并两个列表并排序(默认升序).</span></span><br><span class="line">    <span class="comment">//使用：list1.merge(list2,greater&lt;int&gt;());调用后将list2的元素合并到list1，并清空list2，同时对list1排序</span></span><br><span class="line">    <span class="comment">//排序方式默认为升序，其中greater&lt;int&gt;()可省略，排序方式可修改</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>();<span class="comment">//间插，在指定位置插入一个或多个元素.</span></span><br><span class="line">    <span class="comment">//使用：list1.insert(index,number,val);在index位置插入number个val，其中number可省略，省略则为插入1个</span></span><br><span class="line">    <span class="comment">//特别：list1.insert(list1.begin(),list2.begin(),list2.end());在list1的头部插入list2的所有元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">erase</span>();<span class="comment">//删除一个元素，或一个区域的元素</span></span><br><span class="line">    <span class="comment">//1. list1.(index);将list1第index个元素删除</span></span><br><span class="line">    <span class="comment">//2. list1.(index1,index2);将list1种第index1到第index2之间的元素删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>();<span class="comment">//链表排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//list提供的迭代器是双向迭代器，而非随机访问的迭代器</span></span><br></pre></td></tr></table></figure>
<h3 id="setmultiset容器"><a class="markdownIt-Anchor" href="#setmultiset容器">#</a> set/multiset 容器</h3>
<p>set/multiset 容器又称为集合容器</p>
<p>元素插入容器时，会自动被排序。</p>
<p>set/multiset 属于<strong>关联式容器</strong>，底层结构是用二叉树实现的</p>
<p>set 和 multiset 区别：</p>
<ul>
<li>set 不允许容器中有重复元素</li>
<li>multiset 允许容器中有重复元素</li>
</ul>
<h4 id="setmultiset容器语法"><a class="markdownIt-Anchor" href="#setmultiset容器语法">#</a> set/multiset 容器语法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    set&lt;Type&gt; setName;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">size</span>();<span class="comment">//返回容器中元素的数目</span></span><br><span class="line">    <span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br><span class="line">    <span class="built_in">swap</span>(s2);<span class="comment">//交换两个集合容器</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>(val);<span class="comment">//插入元素</span></span><br><span class="line">    <span class="built_in">clear</span>();<span class="comment">//清空</span></span><br><span class="line">    <span class="built_in">erase</span>(pos);<span class="comment">//删除pos迭代器所指的元素，返回下一个元素的迭代器</span></span><br><span class="line">    <span class="built_in">erase</span>(beg,end);<span class="comment">//删除区间[beg,end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">    <span class="built_in">erase</span>(val);<span class="comment">//删除容器中值为val的元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">find</span>(key);<span class="comment">//查找key是否存在，若存在，返回该键的元素的迭代器，若不存在，则返回end();</span></span><br><span class="line">    <span class="built_in">count</span>(key);<span class="comment">//统计key的元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="set容器排序"><a class="markdownIt-Anchor" href="#set容器排序">#</a> set 容器排序</h4>
<p>set 容器默认排序规则为从升序，可以使用仿函数改变 set 容器的排序规则</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.基础数据类型排序规则改变</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySort</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>, MySort&gt; s;</span><br><span class="line">	</span><br><span class="line">	s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">	s.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (set&lt;<span class="type">int</span>, MySort&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.自定义数据类型排序规则改变</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComparePerson</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person&amp; p1, <span class="type">const</span> Person&amp; p2)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> p1.age &gt; p2.age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//自定义数据类型通常会指定排序规则</span></span><br><span class="line">	set&lt;Person, ComparePerson&gt; s;</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Michael&quot;</span>, <span class="number">18</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;John&quot;</span>, <span class="number">19</span>)</span></span>;</span><br><span class="line">	<span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;Mike&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	s.<span class="built_in">insert</span>(p1);</span><br><span class="line">	s.<span class="built_in">insert</span>(p2);</span><br><span class="line">	s.<span class="built_in">insert</span>(p3);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (set&lt;Person, ComparePerson&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; it-&gt;m_name &lt;&lt; <span class="string">&quot;\tage:&quot;</span> &lt;&lt; it-&gt;age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="pair对组"><a class="markdownIt-Anchor" href="#pair对组">#</a> pair (对组)</h3>
<h4 id="pair语法"><a class="markdownIt-Anchor" href="#pair语法">#</a> pair 语法</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pair(对组)是成对出现的数据,pair不需要包含头文件</span></span><br><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建方式1</span></span><br><span class="line">    <span class="function">pair&lt;type1, type2&gt; <span class="title">pairName</span><span class="params">(type1Data, type2Data)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建方式2</span></span><br><span class="line">    pair&lt;type1, type2&gt; pairName = <span class="built_in">make_pair</span>(type1Data, type2Data);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="pair与set"><a class="markdownIt-Anchor" href="#pair与set">#</a> pair 与 set</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用set进行插入时，会返回一个pair</span></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	pair&lt;set&lt;<span class="type">int</span>&gt;::iterator,<span class="type">bool</span>&gt; ret = s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret.second) &#123;<span class="comment">//使用first访问迭代器，使用second访问bool值</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;插入成功&quot;</span> &lt;&lt; endl;<span class="comment">//如果插入成功，则会返回true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mapmultimap容器"><a class="markdownIt-Anchor" href="#mapmultimap容器">#</a> <mark>map/multimap 容器</mark></h3>
<h4 id="简介"><a class="markdownIt-Anchor" href="#简介">#</a> 简介：</h4>
<ul>
<li>map 中所有元素都是 pair</li>
<li>pair 中第一个元素为 key (键值)，起到索引作用，第二个元素为 value (实值)</li>
<li>所有元素都会根据元素的 key (键值) 自动排序</li>
</ul>
<h4 id="本质-2"><a class="markdownIt-Anchor" href="#本质-2">#</a> 本质：</h4>
<ul>
<li>map/multimap 属于关联式容器，底层结构使用二叉树实现</li>
</ul>
<h4 id="优点"><a class="markdownIt-Anchor" href="#优点">#</a> 优点：</h4>
<ul>
<li>可以根据 key 值快速找到 value 值</li>
</ul>
<h4 id="map和multimap区别"><a class="markdownIt-Anchor" href="#map和multimap区别">#</a> map 和 multimap 区别：</h4>
<ul>
<li>map 不允许容器中有重复的 key</li>
<li>multimap 允许容器中有重复的 key</li>
</ul>
<h4 id="mapmultimap容器语法"><a class="markdownIt-Anchor" href="#mapmultimap容器语法">#</a> map/multimap 容器语法：</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造</span></span><br><span class="line">map&lt;T1, T2&gt; mapNmae;<span class="comment">//默认构造</span></span><br><span class="line"><span class="built_in">map2</span>(map);<span class="comment">//拷贝构造</span></span><br><span class="line">map3 = map2;<span class="comment">//赋值构造</span></span><br><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&amp; m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\tvalue:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">    </span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));<span class="comment">//插入方法1</span></span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));<span class="comment">//插入方法2</span></span><br><span class="line">	m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>, <span class="number">30</span>));<span class="comment">//插入方法3</span></span><br><span class="line">	m[<span class="number">4</span>] = <span class="number">40</span>;<span class="comment">//插入方法4(不推荐使用)</span></span><br><span class="line">    <span class="comment">//若检索的key不存在，则该方法会自动创建一个元素，并将其value赋为0</span></span><br><span class="line">	<span class="comment">//若插入时写错key，会导致map容器改变</span></span><br><span class="line">    </span><br><span class="line">	<span class="built_in">printMap</span>(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	map&lt;keyType, valueType&gt; mapName;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">size</span>();<span class="comment">//返回元素个数</span></span><br><span class="line">    <span class="built_in">empty</span>();<span class="comment">//判断容器是否为空</span></span><br><span class="line">    <span class="built_in">swap</span>(map);<span class="comment">//交换两个集合容器</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">insert</span>(elem);<span class="comment">//插入元素,有多种插入方法，可以参考上面的构造案例</span></span><br><span class="line">    <span class="built_in">clear</span>();<span class="comment">//清空</span></span><br><span class="line">    <span class="built_in">erase</span>(pos);<span class="comment">//删除pos迭代器所指元素，返回下一个元素的迭代器</span></span><br><span class="line">    <span class="built_in">erase</span>(beg,end);<span class="comment">//删除区间[beg,end)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">    <span class="built_in">erase</span>(key);<span class="comment">//删除key值为key的元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">find</span>(key);<span class="comment">//查找key是否存在，若存在，返回其迭代器，若无，返回end()</span></span><br><span class="line">    <span class="built_in">count</span>(key);<span class="comment">//统计key值为key的元素个数</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="map容器排序规则重载"><a class="markdownIt-Anchor" href="#map容器排序规则重载">#</a> map 容器排序规则重载：</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用伪函数重载map排序规则</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMap</span><span class="params">(map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt;&amp; m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;key:&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\tvalue:&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	map&lt;<span class="type">int</span>, <span class="type">int</span>, MyCompare&gt; m;</span><br><span class="line"></span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">	m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printMap</span>(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器">#</a> 迭代器</h3>
<p>要访问顺序容器和关联容器中的元素，需要通过 “迭代器（iterator）” 进行。</p>
<p>迭代器是一个变量，相当于容器和操纵容器的算法之间的中介。</p>
<p>迭代器可以指向容器中的某个元素，通过迭代器就可以读写它指向的元素。从这一点上看，迭代器和指针类似。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//迭代器按照定义方式分成以下四种。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1) 正向迭代器，定义方法如下：</span></span><br><span class="line"><span class="comment">//容器类名::iterator  迭代器名;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2) 常量正向迭代器，定义方法如下：</span></span><br><span class="line"><span class="comment">//容器类名::const_iterator  迭代器名;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3) 反向迭代器，定义方法如下：</span></span><br><span class="line"><span class="comment">//容器类名::reverse_iterator  迭代器名;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4) 常量反向迭代器，定义方法如下：</span></span><br><span class="line"><span class="comment">//容器类名::const_reverse_iterator  迭代器名;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过迭代器可以读取它指向的元素，*迭代器名就表示迭代器指向的元素。通过非常量迭代器还能修改其指向的元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">迭代器都可以进行++操作。反向迭代器和正向迭代器的区别在于：</span></span><br><span class="line"><span class="comment">对正向迭代器进行++操作时，迭代器会指向容器中的后一个元素；</span></span><br><span class="line"><span class="comment">而对反向迭代器进行++操作时，迭代器会指向容器中的前一个元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="stl-函数对象仿函数"><a class="markdownIt-Anchor" href="#stl-函数对象仿函数">#</a> STL - 函数对象 (仿函数)</h2>
<h3 id="仿函数概念"><a class="markdownIt-Anchor" href="#仿函数概念">#</a> 仿函数概念</h3>
<p>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></p>
<p><strong>函数对象</strong>使用重载的 () 时，行为类似函数调用，也叫<strong>仿函数</strong></p>
<p>** 本质：** 函数对象 (仿函数) 是一个类，而不是一个函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAdd</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">MyAdd</span>() &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;count++;</span><br><span class="line">		<span class="keyword">return</span> v1 + v2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	MyAdd myAdd;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">myAdd</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; myAdd.count &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="谓词"><a class="markdownIt-Anchor" href="#谓词">#</a> 谓词</h3>
<p>返回 bool 类型的仿函数称为<strong>谓词</strong></p>
<p>如果 operator () 接受一个参数，叫做一元谓词</p>
<p>如果 operator () 接收两个参数，叫做二元谓词</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一元谓词</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterFive</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//查找大于5的数</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//algorithm中的查找算法，按照条件查找，会返回一个迭代器</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterFive</span>());<span class="comment">//第三个参数 _Pr _Pred 即需要一个谓词</span></span><br><span class="line">	cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二元谓词</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCompare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//降序排列</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> v1,<span class="type">int</span> v2)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">MyCompare</span>());</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stl内建函数对象"><a class="markdownIt-Anchor" href="#stl内建函数对象">#</a> STL 内建函数对象</h3>
<p>使用内建函数对象时，需要引入头文件 &lt;functional&gt;</p>
<h4 id="算术仿函数"><a class="markdownIt-Anchor" href="#算术仿函数">#</a> 算术仿函数</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T plus&lt;T&gt;			<span class="comment">//加法仿函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T minus&lt;T&gt;		<span class="comment">//减法</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T multiplies&lt;T&gt;	<span class="comment">//乘法</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T divides&lt;T&gt;		<span class="comment">//除法</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T modulus&lt;T&gt;		<span class="comment">//求余</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; T negate&lt;T&gt;    	<span class="comment">//取反</span></span><br><span class="line"><span class="comment">//其中只有negate是一元运算</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">	negate&lt;<span class="type">int</span>&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">n</span>(<span class="number">50</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	plus&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">p</span>(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="关系仿函数"><a class="markdownIt-Anchor" href="#关系仿函数">#</a> 关系仿函数</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> equal_to&lt;T&gt;			<span class="comment">//等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> not_equal_to&lt;T&gt;		<span class="comment">//不等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> greater&lt;T&gt;			<span class="comment">//大于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> greater_equal&lt;T&gt;		<span class="comment">//大于等于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> less&lt;T&gt;				<span class="comment">//小于</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> less_equal&lt;T&gt;    	<span class="comment">//小于等于</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COUNT 5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(<span class="built_in">rand</span>() % <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="逻辑仿函数"><a class="markdownIt-Anchor" href="#逻辑仿函数">#</a> 逻辑仿函数</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> logical_and&lt;T&gt;	<span class="comment">//逻辑与</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> logical_or&lt;T&gt;	<span class="comment">//逻辑或</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="type">bool</span> logical_not&lt;T&gt;	<span class="comment">//逻辑非</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">bool</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">bool</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用逻辑非	将容器v 搬运到容器v2中，并执行取反操作</span></span><br><span class="line">	vector&lt;<span class="type">bool</span>&gt; v2;</span><br><span class="line">	v2.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());</span><br><span class="line">	<span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), <span class="built_in">logical_not</span>&lt;<span class="type">bool</span>&gt;());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">bool</span>&gt;::iterator it = v2.<span class="built_in">begin</span>(); it != v2.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stl常用算法"><a class="markdownIt-Anchor" href="#stl常用算法">#</a> STL 常用算法</h2>
<h3 id="for_each"><a class="markdownIt-Anchor" href="#for_each">#</a> for_each</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="comment">//语法：for_each(遍历起始位置，遍历终止位置，回调函数)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		cout &lt;&lt; val &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//for_each(v.begin(), v.end(), print);</span></span><br><span class="line">	<span class="comment">//或者使用仿函数</span></span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">MyPrint</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="transform"><a class="markdownIt-Anchor" href="#transform">#</a> transform</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="comment">//语法：transform(copy源起始位置，copy源终止位置，目标起始位置，copy规则)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPrint</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val + <span class="number">1</span>;<span class="comment">//对操作数+1，若不改变，可直接返回原值</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line">	vTarget.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());<span class="comment">//开辟空间，便于目标容器接收</span></span><br><span class="line">	<span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>(), <span class="built_in">MyPrint</span>());</span><br><span class="line"></span><br><span class="line">	for_each(vTarget.<span class="built_in">begin</span>(), vTarget.<span class="built_in">end</span>(), print);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找算法"><a class="markdownIt-Anchor" href="#查找算法">#</a> 查找算法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简介</span></span><br><span class="line">find;				<span class="comment">//查找元素</span></span><br><span class="line">find_if;			<span class="comment">//按条件查找元素</span></span><br><span class="line">adjacent_find;		<span class="comment">//查找相邻重复元素</span></span><br><span class="line">binar_search;		<span class="comment">//二分查找(仅适用于升序)</span></span><br><span class="line">count;				<span class="comment">//统计元素个数</span></span><br><span class="line">count_if;			<span class="comment">//按条件统计元素个数</span></span><br></pre></td></tr></table></figure>
<h4 id="find"><a class="markdownIt-Anchor" href="#find">#</a> <strong>find：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name,<span class="type">int</span> age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重载 == 使底层find知道如何对比Person数据类型</span></span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>== (<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_name == p.m_name &amp;&amp; <span class="keyword">this</span>-&gt;age == p.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查找容器中是否存在 5 这个元素，若存在，返回其迭代器，若不存在，返回end()</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">5</span>);</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;not found&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;存在&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">	vector&lt;Person&gt;::iterator it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Person</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>));</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;not found&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; it-&gt;m_name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; it-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//test01();</span></span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="find_if"><a class="markdownIt-Anchor" href="#find_if">#</a> <strong>find_if：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterFive</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greater20</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Person&amp; p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (p.age &gt; <span class="number">20</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterFive</span>());</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;not found&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; *it;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">	vector&lt;Person&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Greater20</span>());</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;not found&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; it-&gt;m_name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; it-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="adjacent_find"><a class="markdownIt-Anchor" href="#adjacent_find">#</a> <strong>adjacent_find：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">120</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">103</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);<span class="comment">//会返回这个元素的迭代器</span></span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="number">103</span>);</span><br><span class="line"></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">adjacent_find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;not found&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; *it;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="binary_search"><a class="markdownIt-Anchor" href="#binary_search">#</a> <strong>binary_search：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意：二分查找法返回的并非迭代器，而是布尔值</span></span><br><span class="line"><span class="comment">//注意2：STL提供的二分查找法仅适用于  升序排列</span></span><br><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//查找元素9</span></span><br><span class="line">	<span class="type">bool</span> ret = <span class="built_in">binary_search</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">9</span>);</span><br><span class="line">	<span class="keyword">if</span> (ret)</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;9存在&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;9不存在&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="count"><a class="markdownIt-Anchor" href="#count">#</a> <strong>count：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>== (<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_name == p.m_name &amp;&amp; <span class="keyword">this</span>-&gt;age == p.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">reserve</span>(<span class="number">22</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">6</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;6的个数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;ccc&quot;</span>, <span class="number">40</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">	<span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), p);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;与p相同的人共有：&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;个&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="count_if"><a class="markdownIt-Anchor" href="#count_if">#</a> <strong>count_if：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterFive</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Person</span>(string name, <span class="type">int</span> age) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>== (<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_name == p.m_name &amp;&amp; <span class="keyword">this</span>-&gt;age == p.age)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgeGreater20</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person&amp; p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (p.age &gt; <span class="number">20</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">reserve</span>(<span class="number">22</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//4个</span></span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;<span class="comment">//1个</span></span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterFive</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;大于5的元素的个数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Person&gt; v;</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>));</span><br><span class="line">	v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(<span class="string">&quot;eee&quot;</span>, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">AgeGreater20</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;年龄大于20的人共有：&quot;</span> &lt;&lt; num &lt;&lt; <span class="string">&quot;个&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="built_in">test02</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="排序算法"><a class="markdownIt-Anchor" href="#排序算法">#</a> 排序算法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简介</span></span><br><span class="line"><span class="built_in">sort</span>(itBegin, itEnd, _Pred);				<span class="comment">//对容器内元素进行排序</span></span><br><span class="line"><span class="built_in">random_shuffle</span>(itBegin, itEnd);				<span class="comment">//洗牌 指定范围内的元素随机调整次序</span></span><br><span class="line"><span class="built_in">merge</span>(itBeg1, itEnd1, itBeg2, itEnd2, itTarget);<span class="comment">//有序容器元素合并，并存储到另一容器中</span></span><br><span class="line"><span class="built_in">reverse</span>(itBeg, itEnd);						<span class="comment">//反转指定范围的元素</span></span><br></pre></td></tr></table></figure>
<h4 id="sort"><a class="markdownIt-Anchor" href="#sort">#</a> <strong>sort：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//4个</span></span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;<span class="comment">//1个</span></span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//默认升序</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//降序</span></span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="random_shuffle"><a class="markdownIt-Anchor" href="#random_shuffle">#</a> <strong>random_shuffle：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//注意，若要每次都随机需要使用srand</span></span><br><span class="line">	<span class="built_in">random_shuffle</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>merge：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，容器1与2必须是有序的，且排序方式相同</span></span><br><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//目标容器</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line">	vTarget.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>());</span><br><span class="line">	<span class="built_in">merge</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(vTarget.<span class="built_in">begin</span>(), vTarget.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="reverse"><a class="markdownIt-Anchor" href="#reverse">#</a> <strong>reverse：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;反转前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;反转后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拷贝与替换算法"><a class="markdownIt-Anchor" href="#拷贝与替换算法">#</a> 拷贝与替换算法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简介</span></span><br><span class="line"><span class="built_in">copy</span>(itBeg, itEnd, itTargetBeg);		<span class="comment">//容器内指定范围的元素拷贝到另一容器</span></span><br><span class="line"><span class="built_in">replace</span>(itBeg, itEnd, oldVal, newVal);	<span class="comment">//将容器内指定范围的旧元素修改为新元素</span></span><br><span class="line"><span class="built_in">replace_if</span>(itBeg, itEnd, _Pred, newVal);<span class="comment">//容器内指定范围，满足条件的元素替换为新元素</span></span><br><span class="line"><span class="built_in">swap</span>(container c1, container c2);		<span class="comment">//互换两个容器的元素</span></span><br></pre></td></tr></table></figure>
<h4 id="copy"><a class="markdownIt-Anchor" href="#copy">#</a> <strong>copy：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	v2.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>());</span><br><span class="line">	<span class="built_in">copy</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>());</span><br><span class="line">	for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="replace"><a class="markdownIt-Anchor" href="#replace">#</a> <strong>replace：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;替换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将2替换为20</span></span><br><span class="line">	<span class="built_in">replace</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;替换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="replace_if"><a class="markdownIt-Anchor" href="#replace_if">#</a> <strong>replace_if：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterFive</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (val &gt; <span class="number">5</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;替换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将大于5的元素替换为10</span></span><br><span class="line">	<span class="built_in">replace_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterFive</span>(), <span class="number">10</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;替换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="swap"><a class="markdownIt-Anchor" href="#swap">#</a> <strong>swap：</strong></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意：交换时使用同种类型的容器</span></span><br><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i * <span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">swap</span>(v1, v2);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	for_each(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="算术生成算法numeric"><a class="markdownIt-Anchor" href="#算术生成算法numeric">#</a> 算术生成算法 (numeric)</h3>
<h4 id="accumulate"><a class="markdownIt-Anchor" href="#accumulate">#</a> accumulate：</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//累加算法</span></span><br><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="built_in">accumulate</span>(itBeg, itEnd, value);<span class="comment">//value为累加起始值</span></span><br><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">		v.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> result = <span class="built_in">accumulate</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	cout &lt;&lt; result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>(6.2)fill：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向容器中填充指定的元素</span></span><br><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="built_in">fill</span>(itBeg, itEnd, value);</span><br><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">	v.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">fill</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">100</span>);</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用集合算法"><a class="markdownIt-Anchor" href="#常用集合算法">#</a> 常用集合算法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简介</span></span><br><span class="line"><span class="comment">//包含在头文件algorithm下</span></span><br><span class="line"><span class="built_in">set_intersection</span>(beg1,end1,beg2,end2,begTar);	<span class="comment">//求两个容器中的交集</span></span><br><span class="line"><span class="built_in">set_union</span>(beg1,end1,beg2,end2,begTar);			<span class="comment">//求两个容器的并集</span></span><br><span class="line"><span class="built_in">set_difference</span>(beg1,end1,beg2,end2,begTar);		<span class="comment">//求两个容器的差集</span></span><br></pre></td></tr></table></figure>
<h4 id="set_intersection"><a class="markdownIt-Anchor" href="#set_intersection">#</a> set_intersection：</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vT;</span><br><span class="line">	vT.<span class="built_in">resize</span>(<span class="built_in">min</span>(v1.<span class="built_in">size</span>(), v2.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="comment">//set_intersection会返回交集的itEnd</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator itEnd = <span class="built_in">set_intersection</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vT.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = vT.<span class="built_in">begin</span>(); it != itEnd; it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="set_union"><a class="markdownIt-Anchor" href="#set_union">#</a> set_union：</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意：两个集合必须是有序序列</span></span><br><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vT;</span><br><span class="line">	vT.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>());</span><br><span class="line">	<span class="comment">//set_union会返回交集的itEnd</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator itEnd = <span class="built_in">set_union</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vT.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = vT.<span class="built_in">begin</span>(); it != itEnd; it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="set_difference"><a class="markdownIt-Anchor" href="#set_difference">#</a> set_difference：</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意：两个集合必须是有序序列</span></span><br><span class="line"><span class="comment">//使用案例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">		v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">		v2.<span class="built_in">push_back</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; vT;</span><br><span class="line">	vT.<span class="built_in">resize</span>(<span class="built_in">max</span>(v1.<span class="built_in">size</span>(), v2.<span class="built_in">size</span>()));</span><br><span class="line">	<span class="comment">//set_difference会返回交集的itEnd</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;::iterator itEnd = <span class="built_in">set_difference</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vT.<span class="built_in">begin</span>());</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator it = vT.<span class="built_in">begin</span>(); it != itEnd; it++) &#123;</span><br><span class="line">		cout &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">test01</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文件读写"><a class="markdownIt-Anchor" href="#文件读写">#</a> <mark>文件读写</mark></h2>
<p>C++ 中对文件操作需要包含头文件 &lt;fstream&gt;</p>
<p>文件类型分为两种：</p>
<ul>
<li>** 文本文件 - ** 文件以文本的<mark> ASCII 码</mark>形式存储在计算机中。</li>
<li>** 二进制文件 - ** 文件以文本的<mark>二进制</mark>形式存储在计算机中，用户一般不能直接读懂它们。</li>
</ul>
<p>操作文件分为三大类：</p>
<p>1.ofstrean：写操作</p>
<p>2.ifstream：读操作</p>
<p>3.fstream：读写操作</p>
<h3 id="文件打开方式"><a class="markdownIt-Anchor" href="#文件打开方式">#</a> 文件打开方式</h3>
<table>
<thead>
<tr>
<th style="text-align:center">打开方式</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ios::in</td>
<td style="text-align:center">为读文件而打开文件</td>
</tr>
<tr>
<td style="text-align:center">ios::out</td>
<td style="text-align:center">为写文件而打开文件</td>
</tr>
<tr>
<td style="text-align:center">ios::ate</td>
<td style="text-align:center">初始位置：文件尾</td>
</tr>
<tr>
<td style="text-align:center">ios::app</td>
<td style="text-align:center">追加方式写文件</td>
</tr>
<tr>
<td style="text-align:center">ios::trunc</td>
<td style="text-align:center">如果文件存在，先删除，再创建</td>
</tr>
<tr>
<td style="text-align:center">ios::binary</td>
<td style="text-align:center">二进制方式</td>
</tr>
</tbody>
</table>
<p>注：文件打开方式可以配合使用，利用 | 操作符。</p>
<p>例如：用二进制方式写文件：<mark>ios::binary | ios::out</mark></p>
<h3 id="写文件"><a class="markdownIt-Anchor" href="#写文件">#</a> 写文件</h3>
<p>步骤如下：</p>
<p>1. 包含头文件</p>
<p>2. 创建流对象  // 如：ofstream ofs;</p>
<p>3. 打开文件  // 如：ofs.open (“filePath”,openStyle);</p>
<p>4. 写数据  // 如：ofs &lt;&lt;“写入数据”;</p>
<p>5. 关闭文件  // 如：ofs.close ();</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(<span class="string">&quot;./test.txt&quot;</span>, ios::out);</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;测试文本1&quot;</span> &lt;&lt; endl;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;测试文本2&quot;</span> &lt;&lt; endl;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读文件"><a class="markdownIt-Anchor" href="#读文件">#</a> 读文件</h3>
<p>步骤如下：</p>
<p>1. 包含头文件</p>
<p>2. 创建流对象</p>
<p>3. 打开文件，并判断是否打开成功</p>
<p>4. 读数据</p>
<p>5. 关闭文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(<span class="string">&quot;./test.txt&quot;</span>, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		<span class="comment">//is_open函数判断文件是否打开成功，若成功则返回true</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读数据方式1：</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs &gt;&gt; buf) &#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//读数据方式2：</span></span><br><span class="line">	<span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">	<span class="comment">//while (ifs.getline(buf, sizeof(buf))) &#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="comment">//读数据方式3：</span></span><br><span class="line">	string buf;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">getline</span>(ifs, buf)) &#123;</span><br><span class="line">		cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//读数据方式4(不推荐)：</span></span><br><span class="line">	<span class="comment">//char c;</span></span><br><span class="line">	<span class="comment">//while ((c = ifs.get()) != EOF)//EOF：end of file</span></span><br><span class="line">	<span class="comment">//&#123;</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; c;</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二进制形式读写文件"><a class="markdownIt-Anchor" href="#二进制形式读写文件">#</a> 二进制形式读写文件</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> m_Name[<span class="number">64</span>];</span><br><span class="line">	<span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Person p = &#123; <span class="string">&quot;张三&quot;</span>, <span class="number">18</span> &#125;;</span><br><span class="line">	fstream fs;</span><br><span class="line">	<span class="comment">//二进制方式写文件</span></span><br><span class="line">	fs.<span class="built_in">open</span>(<span class="string">&quot;./Person.txt&quot;</span>, ios::out | ios::binary);</span><br><span class="line">	fs.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span>*)&amp;p, <span class="built_in">sizeof</span>(Person));</span><br><span class="line">	fs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="comment">//二进制方式读文件</span></span><br><span class="line">	fs.<span class="built_in">open</span>(<span class="string">&quot;./Person.txt&quot;</span>, ios::in | ios::binary);</span><br><span class="line">	<span class="keyword">if</span> (!fs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件打开失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Person p2;</span><br><span class="line">	fs.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;p2, <span class="built_in">sizeof</span>(Person));</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; p2.m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;年龄&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; endl;</span><br><span class="line">	fs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="案例"><a class="markdownIt-Anchor" href="#案例">#</a> 案例</h1>
<h2 id="职工管理系统"><a class="markdownIt-Anchor" href="#职工管理系统">#</a> 职工管理系统</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">公司中职工分为三类：普通员工，经理，老板，显示信息时，需要显示职工编号、职工姓名、职工岗位、以及职责。</span></span><br><span class="line"><span class="comment">普通员工职责：完成经理下发的任务。</span></span><br><span class="line"><span class="comment">经理职责：完成老板下发的任务，并下发任务给员工。</span></span><br><span class="line"><span class="comment">老板职责：管理公司所有事务。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">管理系统要求实现如下功能：</span></span><br><span class="line"><span class="comment">退出管理程序：退出当前管理系统</span></span><br><span class="line"><span class="comment">增加职工信息：实现批量添加职工功能，将信息录入到文件中，职工信息为：职工编号、姓名、部门编号。</span></span><br><span class="line"><span class="comment">显示职工信息：显示公司内所有职工的信息</span></span><br><span class="line"><span class="comment">删除离职职工：按照编号删除指定的职工</span></span><br><span class="line"><span class="comment">修改职工信息：按照编号修改职工个人信息</span></span><br><span class="line"><span class="comment">查找职工信息：按照职工编号或姓名查找相关人员的信息</span></span><br><span class="line"><span class="comment">排序功能：按照职工编号进行排序</span></span><br><span class="line"><span class="comment">清空所有文档：清空文件中记录的所有职工信息(并拥有防误删功能)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;wokerManager.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	wokerManager wm;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		wm.<span class="built_in">start</span>();</span><br><span class="line">		<span class="type">char</span> key = wm.<span class="built_in">cinFunction</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">switch</span> (key) &#123;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;0&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">end</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">addEmp</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">showInfo</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">deleteEmp</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">mod_Emp</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">find_Emp</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">sort_Emp</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">renameId</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:</span><br><span class="line">			wm.<span class="built_in">clear</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//wokerManager.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Woker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Employee.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Boss.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME <span class="string">&quot;empFile.txt&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wokerManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">wokerManager</span>();</span><br><span class="line">	~<span class="built_in">wokerManager</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">char</span> <span class="title">cinFunction</span><span class="params">(<span class="type">int</span> mod)</span></span>;<span class="comment">//控制键入</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">start</span><span class="params">()</span></span>;<span class="comment">//开始函数，打印开始菜单</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">end</span><span class="params">()</span></span>;<span class="comment">//结束函数</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addEmp</span><span class="params">()</span></span>;<span class="comment">//添加职工</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;<span class="comment">//显示职工信息</span></span><br><span class="line">	<span class="function">Woker** <span class="title">loadFile</span><span class="params">()</span></span>;<span class="comment">//读取文件</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>;<span class="comment">//保存文件</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getEmpNum</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">deleteEmp</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">isExist</span><span class="params">(<span class="type">int</span> id)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">mod_Emp</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">find_Emp</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">sort_Emp</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Sort</span><span class="params">(<span class="type">int</span> mod)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">renameId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> empNum;</span><br><span class="line">	Woker** wokerArr;</span><br><span class="line">	<span class="type">bool</span> m_FileIsEmpty;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//wokerManager.CPP</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;wokerManager.h&quot;</span></span></span><br><span class="line">wokerManager::<span class="built_in">wokerManager</span>() &#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;empNum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;wokerArr = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	ifs &gt;&gt; ch;</span><br><span class="line">	<span class="keyword">if</span> (ifs.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;empNum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;wokerArr = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>-&gt;empNum = <span class="built_in">getEmpNum</span>();</span><br><span class="line">	<span class="keyword">this</span>-&gt;wokerArr = <span class="built_in">loadFile</span>();</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">wokerManager::~<span class="built_in">wokerManager</span>() &#123;</span><br><span class="line">	<span class="keyword">if</span> (wokerArr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;wokerArr;</span><br><span class="line">		<span class="keyword">this</span>-&gt;wokerArr = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">wokerManager::getEmpNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line">	<span class="type">int</span> id, DeptId;</span><br><span class="line">	string name;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; DeptId) &#123;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****欢迎使用职工管理系统!****&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********0.退出管理系统********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********1.增加职工信息********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********2.显示职工信息********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********3.删除离职职工********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********4.修改职工信息********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********5.查找职工信息********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********6.按照编号排序********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********7.重置职工编号********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;********8.清空所有文档********&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您确定要退出吗?(Y/N)：&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="type">char</span> choice;</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;N&#x27;</span> || choice == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">wokerManager::cinFunction</span><span class="params">(<span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="type">char</span> key;</span><br><span class="line">		cin &gt;&gt; key;</span><br><span class="line">		<span class="keyword">switch</span> (key) &#123;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;0&#x27;</span>:</span><br><span class="line">			<span class="keyword">if</span> (mod == <span class="number">2</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;1&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;2&#x27;</span>:</span><br><span class="line">			<span class="keyword">if</span> (mod == <span class="number">2</span>)</span><br><span class="line">				<span class="keyword">return</span> key;</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;3&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;4&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;5&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;6&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;7&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span><span class="number">&#x27;8&#x27;</span>:</span><br><span class="line">			<span class="keyword">if</span> (mod == <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">return</span> key;</span><br><span class="line">		&#125;</span><br><span class="line">		cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::addEmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入你要添加的职工数：&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="type">int</span> addNum = <span class="number">0</span>;</span><br><span class="line">		cin &gt;&gt; addNum;</span><br><span class="line">		cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="keyword">if</span> (addNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="type">int</span> newSize = <span class="keyword">this</span>-&gt;empNum + addNum;</span><br><span class="line">			Woker** newSpace = <span class="keyword">new</span> Woker * [newSize];</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;wokerArr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; empNum; i++) &#123;</span><br><span class="line">					newSpace[i] = <span class="keyword">this</span>-&gt;wokerArr[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; addNum; i++) &#123;</span><br><span class="line">				<span class="type">int</span> id, DeptId;</span><br><span class="line">				string name;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个职工的编号：&quot;</span>;</span><br><span class="line">				cin &gt;&gt; id;</span><br><span class="line">				cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个职工的姓名：&quot;</span>;</span><br><span class="line">				cin &gt;&gt; name;</span><br><span class="line">				cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;请选择该职工的岗位\t&quot;</span></span><br><span class="line">					&lt;&lt; <span class="string">&quot;1.普通员工&quot;</span> &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; <span class="string">&quot;3.老板\t：&quot;</span>;</span><br><span class="line">				cin &gt;&gt; DeptId;</span><br><span class="line">				cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">				Woker* woker = <span class="literal">NULL</span>;</span><br><span class="line">				<span class="keyword">switch</span> (DeptId) &#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">					woker = <span class="keyword">new</span> <span class="built_in">Employee</span>(id, name, DeptId);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">					woker = <span class="keyword">new</span> <span class="built_in">Manager</span>(id, name, DeptId);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">					woker = <span class="keyword">new</span> <span class="built_in">Boss</span>(id, name, DeptId);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				newSpace[empNum + i] = woker;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;wokerArr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">				<span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;wokerArr;</span><br><span class="line">				<span class="keyword">this</span>-&gt;wokerArr = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>-&gt;wokerArr = newSpace;</span><br><span class="line">			<span class="keyword">this</span>-&gt;empNum += addNum;</span><br><span class="line">			<span class="built_in">save</span>();</span><br><span class="line">			<span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;添加完成！&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (wokerArr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;暂无职工信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; empNum; i++) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;wokerArr[i]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Woker** <span class="title">wokerManager::loadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(FILENAME, ios::in);</span><br><span class="line">	<span class="type">int</span> id, DeptId, index = <span class="number">0</span>;</span><br><span class="line">	string name;</span><br><span class="line">	Woker** newSpace = <span class="keyword">new</span> Woker * [<span class="keyword">this</span>-&gt;empNum];</span><br><span class="line">	<span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; DeptId) &#123;</span><br><span class="line">		Woker* woker = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">switch</span> (DeptId) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			woker = <span class="keyword">new</span> <span class="built_in">Employee</span>(id, name, DeptId);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			woker = <span class="keyword">new</span> <span class="built_in">Manager</span>(id, name, DeptId);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			woker = <span class="keyword">new</span> <span class="built_in">Boss</span>(id, name, DeptId);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		newSpace[index] = woker;</span><br><span class="line">		index++;</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="keyword">return</span> newSpace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::save</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(FILENAME, ios::trunc);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; empNum; i++) &#123;</span><br><span class="line">		ofs &lt;&lt; <span class="keyword">this</span>-&gt;wokerArr[i]-&gt;m_Id &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">			&lt;&lt; <span class="keyword">this</span>-&gt;wokerArr[i]-&gt;m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">			&lt;&lt; <span class="keyword">this</span>-&gt;wokerArr[i]-&gt;m_DeptId &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::deleteEmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入要删除的职工的编号：&quot;</span>;</span><br><span class="line">	<span class="type">int</span> index;</span><br><span class="line">	cin &gt;&gt; index;</span><br><span class="line">	index = <span class="built_in">isExist</span>(index);</span><br><span class="line">	<span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;职工编号未找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; empNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">		wokerArr[i] = wokerArr[i + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">	<span class="keyword">this</span>-&gt;empNum--;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;删除成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">wokerManager::isExist</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;empNum; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;wokerArr[i]-&gt;m_Id == id) &#123;</span><br><span class="line">			index = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::mod_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入要修改的职工的编号：&quot;</span>;</span><br><span class="line">	<span class="type">int</span> index;</span><br><span class="line">	cin &gt;&gt; index;</span><br><span class="line">	index = <span class="built_in">isExist</span>(index);</span><br><span class="line">	<span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;职工编号未找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;修改前信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">	wokerArr[index]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">	<span class="type">int</span> id, DeptId;</span><br><span class="line">	string name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入修改后职工的编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; id;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入修改后职工的姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择修改后职工的岗位\t&quot;</span></span><br><span class="line">		&lt;&lt; <span class="string">&quot;1.普通员工&quot;</span> &lt;&lt; <span class="string">&quot;2.经理&quot;</span> &lt;&lt; <span class="string">&quot;3.老板\t：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; DeptId;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	Woker* woker = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">switch</span> (DeptId) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		woker = <span class="keyword">new</span> <span class="built_in">Employee</span>(id, name, DeptId);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		woker = <span class="keyword">new</span> <span class="built_in">Manager</span>(id, name, DeptId);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		woker = <span class="keyword">new</span> <span class="built_in">Boss</span>(id, name, DeptId);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	wokerArr[index] = woker;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;修改完成！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::find_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择查找方式：1.按照编号、2.按照姓名：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice = <span class="built_in">cinFunction</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;请输入职工的编号：&quot;</span>;</span><br><span class="line">		<span class="type">int</span> index;</span><br><span class="line">		cin &gt;&gt; index;</span><br><span class="line">		index = <span class="built_in">isExist</span>(index);</span><br><span class="line">		<span class="keyword">if</span> (index == <span class="number">-1</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;职工编号未找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		wokerArr[index]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;请输入职工的姓名：&quot;</span>;</span><br><span class="line">		string name;</span><br><span class="line">		cin &gt;&gt; name;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;empNum; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;wokerArr[i]-&gt;m_Name == name) &#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;wokerArr[i]-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;员工未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::sort_Emp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (wokerArr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;暂无职工信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入排序方式：1.升序、2.降序：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice = <span class="built_in">cinFunction</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">		<span class="built_in">Sort</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">		<span class="built_in">Sort</span>(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::Sort</span><span class="params">(<span class="type">int</span> mod)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (mod == <span class="number">1</span>) &#123;<span class="comment">//升序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="keyword">this</span>-&gt;empNum; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="comment">//假设最大值的下标为0</span></span><br><span class="line">			<span class="type">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">				<span class="comment">//从1开始遍历至i，当有大于arr[maxIndex]的值时</span></span><br><span class="line">				<span class="comment">//将标记最大值的下标指向它</span></span><br><span class="line">				<span class="keyword">if</span> (wokerArr[j]-&gt;m_Id &gt; wokerArr[maxIndex]-&gt;m_Id) maxIndex = j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将最大值交换到找到的位置</span></span><br><span class="line">			Woker* temp = wokerArr[i - <span class="number">1</span>];<span class="comment">//使用i时减一防止越界</span></span><br><span class="line">			wokerArr[i - <span class="number">1</span>] = wokerArr[maxIndex];</span><br><span class="line">			wokerArr[maxIndex] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (mod == <span class="number">2</span>) &#123;<span class="comment">//降序</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="keyword">this</span>-&gt;empNum; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="comment">//假设最大值的下标为0</span></span><br><span class="line">			<span class="type">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">				<span class="comment">//从1开始遍历至i，当有大于arr[maxIndex]的值时</span></span><br><span class="line">				<span class="comment">//将标记最大值的下标指向它</span></span><br><span class="line">				<span class="keyword">if</span> (wokerArr[j]-&gt;m_Id &lt; wokerArr[maxIndex]-&gt;m_Id) maxIndex = j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//将最大值交换到找到的位置</span></span><br><span class="line">			Woker* temp = wokerArr[i - <span class="number">1</span>];<span class="comment">//使用i时减一防止越界</span></span><br><span class="line">			wokerArr[i - <span class="number">1</span>] = wokerArr[maxIndex];</span><br><span class="line">			wokerArr[maxIndex] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::renameId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;wokerArr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;暂无职工信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; empNum; i++) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;wokerArr[i]-&gt;m_Id = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;重置完成!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">wokerManager::clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您确定要清空文件吗?(Y/N)：&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		<span class="type">char</span> choice;</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">			empNum = <span class="number">0</span>;</span><br><span class="line">			<span class="built_in">save</span>();</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;清除成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;N&#x27;</span> || choice == <span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Woker.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Woker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//显示员工信息</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//获取部门名称</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> string <span class="title">getDeptName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> m_Id;<span class="comment">//职工编号</span></span><br><span class="line">	string m_Name;<span class="comment">//职工姓名</span></span><br><span class="line">	<span class="type">int</span> m_DeptId;<span class="comment">//部门编号</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Employee.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Woker.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:<span class="keyword">public</span> Woker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Employee</span>(<span class="type">int</span> id,string name,<span class="type">int</span> DeptId);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;<span class="comment">//展示职工信息</span></span><br><span class="line">	<span class="function">string <span class="title">getDeptName</span><span class="params">()</span></span>;<span class="comment">//获取员工部门名称</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Employee.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Employee.h&quot;</span></span></span><br><span class="line">Employee::<span class="built_in">Employee</span>(<span class="type">int</span> id, string name, <span class="type">int</span> DeptId) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_DeptId = DeptId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employee::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工部门：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getDeptName</span>()</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工职责：完成经理下发的任务&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee::getDeptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;员工&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Manager.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Woker.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>:<span class="keyword">public</span> Woker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Manager</span>(<span class="type">int</span> id, string name, <span class="type">int</span> DeptId);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Manager.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Manager.h&quot;</span></span></span><br><span class="line">Manager::<span class="built_in">Manager</span>(<span class="type">int</span> id, string name, <span class="type">int</span> DeptId) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_DeptId = DeptId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工部门：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getDeptName</span>()</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工职责：完成老板下发的任务，并下发任务给员工&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Manager::getDeptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;老板&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Boss.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Woker.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boss</span>:<span class="keyword">public</span> Woker</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Boss</span>(<span class="type">int</span> id, string name, <span class="type">int</span> DeptId);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getDeptName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Boss.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Boss.h&quot;</span></span></span><br><span class="line">Boss::<span class="built_in">Boss</span>(<span class="type">int</span> id, string name, <span class="type">int</span> DeptId) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_DeptId = DeptId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Boss::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工部门：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;<span class="built_in">getDeptName</span>()</span><br><span class="line">		&lt;&lt; <span class="string">&quot;\t职工职责：管理公司所有事务&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Boss::getDeptName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;老板&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="stl案例"><a class="markdownIt-Anchor" href="#stl案例">#</a> STL 案例</h2>
<h3 id="stl案例1评委打分"><a class="markdownIt-Anchor" href="#stl案例1评委打分">#</a> STL 案例 1：评委打分</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例描述：</span></span><br><span class="line"><span class="comment">现有ABCDE 五个选手，需要分别对其进行打分</span></span><br><span class="line"><span class="comment">10名评委对其打分，打分后删除最高分与最低分，取剩余值的平均分作为选手分数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Competitor</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Competitor</span>(string name,<span class="type">int</span> score) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_score = score;</span><br><span class="line">	&#125;</span><br><span class="line">	string m_name;</span><br><span class="line">	<span class="type">int</span> m_score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createCompetitor</span><span class="params">(vector&lt;Competitor&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	string nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		string name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">		name += nameSeed[i];</span><br><span class="line">		<span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">		<span class="function">Competitor <span class="title">c</span><span class="params">(name, score)</span></span>;</span><br><span class="line">		v.<span class="built_in">push_back</span>(c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(vector&lt;Competitor&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> score = <span class="built_in">rand</span>() % <span class="number">41</span> + <span class="number">60</span>;</span><br><span class="line">			d.<span class="built_in">push_back</span>(score);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">		</span><br><span class="line">		d.<span class="built_in">pop_back</span>();</span><br><span class="line">		d.<span class="built_in">pop_front</span>();</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::iterator dit = d.<span class="built_in">begin</span>(); dit != d.<span class="built_in">end</span>(); dit++) &#123;</span><br><span class="line">			sum += *dit;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> avg = sum / d.<span class="built_in">size</span>();</span><br><span class="line">		it-&gt;m_score = avg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(vector&lt;Competitor&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; it-&gt;m_name &lt;&lt; <span class="string">&quot;\tscore:&quot;</span> &lt;&lt; it-&gt;m_score &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Competitor&gt; v;</span><br><span class="line">	<span class="built_in">createCompetitor</span>(v);</span><br><span class="line">	<span class="built_in">myPrint</span>(v);</span><br><span class="line">	<span class="built_in">setScore</span>(v);</span><br><span class="line">	<span class="built_in">myPrint</span>(v);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stl案例2员工分组"><a class="markdownIt-Anchor" href="#stl案例2员工分组">#</a> STL 案例 2：员工分组</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">案例描述：</span></span><br><span class="line"><span class="comment">公司招聘了10名员工(ABCDEFGHIJ)，10名员工进入公司后，需要指派其部门</span></span><br><span class="line"><span class="comment">员工信息包括：姓名、工资</span></span><br><span class="line"><span class="comment">部门分为：策划、美术、研发</span></span><br><span class="line"><span class="comment">假设员工均全能，随机为其分配部门与工资</span></span><br><span class="line"><span class="comment">分部门显示员工信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORKER_NUM 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CEHUA 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEISHU 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YANFA 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">int</span> m_Salary;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createWorker</span><span class="params">(vector&lt;Worker&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">	string nameSeed = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; WORKER_NUM; i++) &#123;</span><br><span class="line">		Worker worker;</span><br><span class="line">		worker.m_Name = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">		worker.m_Name += nameSeed[i];</span><br><span class="line"></span><br><span class="line">		worker.m_Salary = <span class="built_in">rand</span>() % <span class="number">10000</span> + <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">		v.<span class="built_in">push_back</span>(worker);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setGroup</span><span class="params">(vector&lt;Worker&gt;&amp; v, multimap&lt;<span class="type">int</span>, Worker&gt;&amp; m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Worker&gt;::iterator it = v.<span class="built_in">begin</span>(); it != v.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="type">int</span> deptId = <span class="built_in">rand</span>() % <span class="number">3</span>;</span><br><span class="line">		m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, Worker&gt;(deptId, *it));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showWorkerByGroup</span><span class="params">(multimap&lt;<span class="type">int</span>, Worker&gt;&amp; m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m.<span class="built_in">begin</span>() == m.<span class="built_in">end</span>())</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	multimap&lt;<span class="type">int</span>, Worker&gt;::iterator pos = m.<span class="built_in">find</span>(CEHUA);</span><br><span class="line">	<span class="type">int</span> count = m.<span class="built_in">count</span>(CEHUA), index = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;策划部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (; pos != m.<span class="built_in">end</span>() &amp;&amp; index &lt; count; pos++, index++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\tsalary:&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pos = m.<span class="built_in">find</span>(MEISHU);</span><br><span class="line">	count = m.<span class="built_in">count</span>(MEISHU);</span><br><span class="line">	index = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;美术部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (; pos != m.<span class="built_in">end</span>() &amp;&amp; index &lt; count; pos++, index++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\tsalary:&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pos = m.<span class="built_in">find</span>(YANFA);</span><br><span class="line">	count = m.<span class="built_in">count</span>(YANFA);</span><br><span class="line">	index = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;研发部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (; pos != m.<span class="built_in">end</span>() &amp;&amp; index &lt; count; pos++, index++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\tsalary:&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	vector&lt;Worker&gt; vWorker;</span><br><span class="line">	<span class="built_in">createWorker</span>(vWorker);</span><br><span class="line">	</span><br><span class="line">	multimap&lt;<span class="type">int</span>, Worker&gt; mWorker;</span><br><span class="line">	<span class="built_in">setGroup</span>(vWorker, mWorker);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">showWorkerByGroup</span>(mWorker);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="演讲比赛流程管理系统"><a class="markdownIt-Anchor" href="#演讲比赛流程管理系统">#</a> 演讲比赛流程管理系统</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">学校举行一场演讲比赛，共有12人参加。比赛共两轮，第一轮为淘汰赛，第二轮为决赛</span></span><br><span class="line"><span class="comment">每名选手都有对应的编号，如10001~10012</span></span><br><span class="line"><span class="comment">比赛方式：分组比赛，每组6人</span></span><br><span class="line"><span class="comment">第一轮分为两个小组，整体按照选手编号进行抽签后顺序演讲</span></span><br><span class="line"><span class="comment">十个评委分别打分，去除最低分和最高分，求平均分为本轮选手成绩</span></span><br><span class="line"><span class="comment">小组演讲结束后，淘汰末三名，前三名晋级</span></span><br><span class="line"><span class="comment">第二轮为决赛，前三名胜出</span></span><br><span class="line"><span class="comment">每轮比赛过后显示晋级选手的信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Competitor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ManageSystem.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	ManageSystem ms;</span><br><span class="line">	<span class="type">bool</span> loop = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (loop) &#123;</span><br><span class="line">		ms.<span class="built_in">StartMenu</span>();</span><br><span class="line">		<span class="type">int</span> key = <span class="number">-1</span>;</span><br><span class="line">		string temp;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">		<span class="keyword">while</span> (!ms.<span class="built_in">IsRegexInput</span>(temp)) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; temp;</span><br><span class="line">		&#125;</span><br><span class="line">		key = <span class="built_in">stoi</span>(temp);</span><br><span class="line">		<span class="keyword">switch</span> (key) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">if</span> (ms.<span class="built_in">Exit</span>())</span><br><span class="line">				loop = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			ms.<span class="built_in">Start</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			ms.<span class="built_in">LoadCompetitionResult</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			ms.<span class="built_in">Clear</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Competitior.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Competitor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Competitor</span>(string name, <span class="type">float</span> score, <span class="type">int</span> number, <span class="type">int</span> m_Group);</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(<span class="type">float</span> score)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">float</span> <span class="title">getScore</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">setGroup</span><span class="params">(<span class="type">int</span> group)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getGroup</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showInfo</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	string m_Name;</span><br><span class="line">	<span class="type">float</span> m_Score;</span><br><span class="line">	<span class="type">int</span> m_Number;</span><br><span class="line">	<span class="type">int</span> m_Group;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Competitor.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Competitor.h&quot;</span></span></span><br><span class="line">Competitor::<span class="built_in">Competitor</span>(string name, <span class="type">float</span> score, <span class="type">int</span> number, <span class="type">int</span> Group) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Score = score;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Number = number;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Group = Group;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Competitor::setScore</span><span class="params">(<span class="type">float</span> score)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">Competitor::getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Competitor::setGroup</span><span class="params">(<span class="type">int</span> group)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Group = group;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Competitor::getGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Group;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Competitor::showInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;选手信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Number &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\t评分：&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, <span class="keyword">this</span>-&gt;m_Score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Competitor::getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ManageSystem.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Competitor.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMPETITOR_NUM 12</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> START_NUM 10001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUP 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUP_1 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUP_2 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GROUP_FINAL 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCORE_TIMES 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PATH <span class="string">&quot;./CompetitionRecord.txt&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATAPATH <span class="string">&quot;./Data.txt&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ManageSystem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">ManageSystem</span>();</span><br><span class="line">	~<span class="built_in">ManageSystem</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">StartMenu</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Start</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">CreateCompetitor</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetGroup</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ShowInfoByGroup</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SetScore</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">UpCompetitor</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">UpComShow</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">FinalShow</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SaveData</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">SaveResult</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">LoadCompetitionResult</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">Exit</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">IsRegexInput</span><span class="params">(string str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	vector&lt;Competitor&gt;* ComVector;</span><br><span class="line">	<span class="type">int</span> Count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ManageSystem.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ManageSystem.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CompareByScore</span><span class="params">(Competitor&amp; c1, Competitor&amp; c2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> c1.<span class="built_in">getScore</span>() &gt; c2.<span class="built_in">getScore</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ManageSystem::<span class="built_in">ManageSystem</span>() &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;ComVector = <span class="keyword">new</span> vector&lt;Competitor&gt;;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(DATAPATH, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;Count = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> temp = <span class="number">1</span>;</span><br><span class="line">		string sTemp;</span><br><span class="line">		<span class="keyword">while</span> (ifs &gt;&gt; sTemp);</span><br><span class="line">		temp = <span class="built_in">stoi</span>(sTemp);</span><br><span class="line">		<span class="keyword">this</span>-&gt;Count = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ManageSystem::~<span class="built_in">ManageSystem</span>() &#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;ComVector != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">delete</span> <span class="keyword">this</span>-&gt;ComVector;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ComVector = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::StartMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;**************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*****欢迎参加演讲比赛*****&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******1.开始演讲比赛******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******2.查看往届记录******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******3.清空比赛记录******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;******0.退出比赛程序******&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;**************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::Start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第 &lt;&lt; 1 &gt;&gt; 轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">CreateCompetitor</span>();</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">SetGroup</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;抽签后演讲顺序如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; it-&gt;<span class="built_in">getNumber</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-------------第1轮正式比赛开始-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">SetScore</span>();</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">ShowInfoByGroup</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-------------第1轮正式比赛结束-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-------------第1轮晋级选手信息-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">UpCompetitor</span>();</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">UpComShow</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第 &lt;&lt; 2 &gt;&gt; 轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">random_shuffle</span>(<span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(), <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>());</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;抽签后演讲顺序如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span>(it-&gt;<span class="built_in">getGroup</span>() == GROUP_FINAL)</span><br><span class="line">			cout &lt;&lt; it-&gt;<span class="built_in">getNumber</span>() &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;---------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-------------第2轮正式比赛开始-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">SetScore</span>();</span><br><span class="line">	<span class="built_in">sort</span>(<span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(), <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(), CompareByScore);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;决赛名次：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">UpComShow</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-------------第2轮正式比赛结束-------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">FinalShow</span>();</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">SaveResult</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::CreateCompetitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string nameSeed = <span class="string">&quot;ABCDEFGHIJKLMNOPQRTSUVWXYZ&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; COMPETITOR_NUM; i++) &#123;</span><br><span class="line">		string name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">		name += nameSeed[i];</span><br><span class="line">		<span class="function">Competitor <span class="title">c</span><span class="params">(name, <span class="number">0</span>, START_NUM + i, GROUP)</span></span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">push_back</span>(c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::SetGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">random_shuffle</span>(<span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(), <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>());</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (count &lt; COMPETITOR_NUM / <span class="number">2</span>) &#123;</span><br><span class="line">			it-&gt;<span class="built_in">setGroup</span>(GROUP_1);</span><br><span class="line">			count++;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		it-&gt;<span class="built_in">setGroup</span>(GROUP_2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::ShowInfoByGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第一组选手信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (it-&gt;<span class="built_in">getGroup</span>() == GROUP_1)</span><br><span class="line">			it-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第二组选手信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (it-&gt;<span class="built_in">getGroup</span>() == GROUP_2)</span><br><span class="line">			it-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::SetScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		deque&lt;<span class="type">float</span>&gt; d;</span><br><span class="line"></span><br><span class="line">		<span class="type">float</span> score = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SCORE_TIMES; i++)</span><br><span class="line">			d.<span class="built_in">push_back</span>((<span class="type">float</span>)(<span class="built_in">rand</span>() % <span class="number">40</span> + <span class="number">61</span>));	</span><br><span class="line"></span><br><span class="line">		<span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">		d.<span class="built_in">pop_front</span>();</span><br><span class="line">		d.<span class="built_in">pop_back</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; SCORE_TIMES - <span class="number">2</span>; i++) &#123;</span><br><span class="line">			sum += d.<span class="built_in">back</span>();</span><br><span class="line">			d.<span class="built_in">pop_back</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		score = sum / (SCORE_TIMES - <span class="number">2</span>);</span><br><span class="line">		</span><br><span class="line">		it-&gt;<span class="built_in">setScore</span>(score);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::UpCompetitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(), <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(), CompareByScore);</span><br><span class="line">	<span class="type">int</span> group1 = <span class="number">0</span>, group2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (group1 &lt; <span class="number">3</span> &amp;&amp; it-&gt;<span class="built_in">getGroup</span>() == GROUP_1) &#123;</span><br><span class="line">			it-&gt;<span class="built_in">setGroup</span>(GROUP_FINAL);</span><br><span class="line">			group1++;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (group2 &lt; <span class="number">3</span> &amp;&amp; it-&gt;<span class="built_in">getGroup</span>() == GROUP_2) &#123;</span><br><span class="line">			it-&gt;<span class="built_in">setGroup</span>(GROUP_FINAL);</span><br><span class="line">			group2++;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::UpComShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (it-&gt;<span class="built_in">getGroup</span>() == GROUP_FINAL)</span><br><span class="line">			it-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::FinalShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;冠军：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	it-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">	it++;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;亚军：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	it-&gt;<span class="built_in">showInfo</span>(); </span><br><span class="line">	it++;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;季军：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	it-&gt;<span class="built_in">showInfo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::SaveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(DATAPATH, ios::out | ios::trunc);</span><br><span class="line">	ofs &lt;&lt; <span class="keyword">this</span>-&gt;Count &lt;&lt; endl;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::SaveResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(PATH, ios::out | ios::app);</span><br><span class="line">	<span class="keyword">if</span> (!ofs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;比赛结果保存失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	vector&lt;Competitor&gt;::iterator it = <span class="keyword">this</span>-&gt;ComVector-&gt;<span class="built_in">begin</span>();</span><br><span class="line">	string rank[] = &#123; <span class="string">&quot;冠军：&quot;</span>,<span class="string">&quot;亚军：&quot;</span>,<span class="string">&quot;季军：&quot;</span> &#125;;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;Count &lt;&lt; <span class="string">&quot;届：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">this</span>-&gt;Count++;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">SaveData</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">		ofs &lt;&lt; rank[i] &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;<span class="built_in">getNumber</span>() &lt;&lt; <span class="string">&quot;、得分：&quot;</span> &lt;&lt; it-&gt;<span class="built_in">getScore</span>() &lt;&lt; endl;</span><br><span class="line">		it++;</span><br><span class="line">	&#125;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;比赛记录已保存，可在查看往届记录中查看&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::LoadCompetitionResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;Count == <span class="number">1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;暂无比赛记录&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(PATH, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;读取失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	string buf;</span><br><span class="line">	<span class="keyword">while</span> (ifs &gt;&gt; buf) &#123;</span><br><span class="line">		cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::Clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;你确认要清空往届比赛记录吗?(不可恢复!!)[Y/N]：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">	cin &gt;&gt; choice;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;y&#x27;</span> || choice == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">		ofstream ofs;</span><br><span class="line">		ofs.<span class="built_in">open</span>(PATH, ios::trunc);</span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">this</span>-&gt;Count = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">this</span>-&gt;<span class="built_in">SaveData</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;已全部清除!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ManageSystem::Exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;你确认要退出吗?(Y/N)：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	cin &gt;&gt; choice;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;y&#x27;</span> || choice == <span class="string">&#x27;Y&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ManageSystem::IsRegexInput</span><span class="params">(string str1)</span></span>&#123;<span class="comment">// 使用正则表达式进行匹配</span></span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="function">regex <span class="title">r</span><span class="params">(<span class="string">&quot;\\d&#123;0,3&#125;&quot;</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (!(flag = <span class="built_in">regex_match</span>(str1, r)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="机房预约系统"><a class="markdownIt-Anchor" href="#机房预约系统">#</a> 机房预约系统</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">项目介绍：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">身份简介：</span></span><br><span class="line"><span class="comment">分别有三种身份使用该程序</span></span><br><span class="line"><span class="comment">学生代表：申请使用机房</span></span><br><span class="line"><span class="comment">教师：审核学生的预约申请</span></span><br><span class="line"><span class="comment">管理员：给学生、教师创建账号</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">机房简介</span></span><br><span class="line"><span class="comment">机房总共有3间</span></span><br><span class="line"><span class="comment">1.1号机房	最大容量20人</span></span><br><span class="line"><span class="comment">2.2号机房	最多容量50人</span></span><br><span class="line"><span class="comment">3.3号机房	最大容量100人</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">申请简介：</span></span><br><span class="line"><span class="comment">申请的订单每周由管理员负责清空</span></span><br><span class="line"><span class="comment">学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段(上午、下午)</span></span><br><span class="line"><span class="comment">教师来审核预约，依据实际情况审核预约通过或者不通过</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">系统具体需求：</span></span><br><span class="line"><span class="comment">首先进入登录界面，登录身份可选：</span></span><br><span class="line"><span class="comment">学生代表</span></span><br><span class="line"><span class="comment">老师</span></span><br><span class="line"><span class="comment">管理员</span></span><br><span class="line"><span class="comment">退出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">每个身份都需要进行验证后，进入子菜单</span></span><br><span class="line"><span class="comment">学生需要输入：学号，姓名，密码</span></span><br><span class="line"><span class="comment">老师需要输入：职工号，姓名，密码</span></span><br><span class="line"><span class="comment">管理员需要输入：管理员ID，密码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">学生子菜单：</span></span><br><span class="line"><span class="comment">申请预约	--预约机房</span></span><br><span class="line"><span class="comment">查看自身的预约		--查看自己的预约状态</span></span><br><span class="line"><span class="comment">查看所有预约		--查看全部预约信息以及预约状态</span></span><br><span class="line"><span class="comment">取消预约		--取消自身的预约，预约成功或审核中的预约均可取消</span></span><br><span class="line"><span class="comment">注销登录		--退出登录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">教师子菜单：</span></span><br><span class="line"><span class="comment">查看所有预约		--查看全部预约信息以及预约状态</span></span><br><span class="line"><span class="comment">审核预约		--对学生的预约进行审核</span></span><br><span class="line"><span class="comment">注销登录		--退出登录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">管理员具体功能</span></span><br><span class="line"><span class="comment">添加账号		--添加学生或教师的账号，需要检测学生编号或教师职工号是否重复</span></span><br><span class="line"><span class="comment">查看账号		--可以选择查看学生或教师的全部信息</span></span><br><span class="line"><span class="comment">查看机房		--查看所有机房的信息</span></span><br><span class="line"><span class="comment">清空预约		--清空所有预约记录</span></span><br><span class="line"><span class="comment">注销登录		--退出登录</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>这个案例是我开始学代码到现在，代码量最大的，感觉写的很乱，很屎山。自己有都点看不下去 =.=</strong></p>
<p><strong>运行环境为 Windows11，VS2022</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ManageSystem.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(ADMIN_PATH, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		<span class="comment">//如果未打开AdminData.txt文件，则创建AdminData.txt文件，并写入默认管理员账号</span></span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		ofstream ofs;</span><br><span class="line">		ofs.<span class="built_in">open</span>(ADMIN_PATH, ios::out);</span><br><span class="line">		ofs &lt;&lt; <span class="number">9527</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;Admin&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line">	&#125;</span><br><span class="line">    ifs.<span class="built_in">close</span>();</span><br><span class="line">	ifs.<span class="built_in">open</span>(MACHINE_PATH, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		<span class="comment">//如果未打开MachineRoom.txt文件，则创建AdminData.txt文件，并写入默认机房信息</span></span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		ofstream ofs;</span><br><span class="line">		ofs.<span class="built_in">open</span>(MACHINE_PATH, ios::out);</span><br><span class="line">		ofs &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">		ofs &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">50</span>;</span><br><span class="line">		ofs &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">100</span>;</span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	ManageSystem ms;</span><br><span class="line">	<span class="type">int</span> choice = <span class="number">-1</span>;</span><br><span class="line">	string temp;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(MACHINE_PATH, ios::out | ios::app);</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">	ofs.<span class="built_in">open</span>(RESERVATION_PATH, ios::out | ios::app);</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		ms.<span class="built_in">StartMenu</span>();</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">		<span class="keyword">while</span> (!ms.<span class="built_in">CinJudgement</span>(temp, R_TYPE1)) &#123;<span class="comment">//使用正则判断输入正确性</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; temp;</span><br><span class="line">		&#125;</span><br><span class="line">		choice = <span class="built_in">stoi</span>(temp);</span><br><span class="line">		<span class="keyword">if</span> (choice &gt; <span class="number">9</span>) &#123;</span><br><span class="line">			choice %= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		ms.<span class="built_in">Login</span>(choice);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//globalDefine.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STU_PATH <span class="string">&quot;./StudentRepData.txt&quot;</span></span></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_PATH <span class="string">&quot;./TeacherData.txt&quot;</span></span></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADMIN_PATH <span class="string">&quot;./AdminData.txt&quot;</span></span></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MACHINE_PATH <span class="string">&quot;./MachineRoom.txt&quot;</span></span></span><br><span class="line"><span class="comment">//预约信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RESERVATION_PATH <span class="string">&quot;./Reservation.txt&quot;</span></span></span><br><span class="line"><span class="comment">//正则TYPE1:0,3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_TYPE1 1</span></span><br><span class="line"><span class="comment">//正则TYPE2:0,4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_TYPE2 2</span></span><br><span class="line"><span class="comment">//正则TYPE3:0,9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_TYPE3 3</span></span><br><span class="line"><span class="comment">//正则TYPE4:0,2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> R_TYPE4 4</span></span><br><span class="line"><span class="comment">//审核状态</span></span><br><span class="line"><span class="comment">//审核中</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STATUS_ING 1</span></span><br><span class="line"><span class="comment">//审核通过</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STATUS_PASS 2</span></span><br><span class="line"><span class="comment">//审核未通过</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STATUS_FAIL 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ManageSystem.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;StudentRep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Admin.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ReservationRecord.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;MachineRoom.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ManageSystem</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	vector&lt;StudentRep&gt; v_sr;<span class="comment">//用于管理学生代表类</span></span><br><span class="line">	vector&lt;Teacher&gt; <span class="type">v_t</span>;<span class="comment">//用于管理教师类</span></span><br><span class="line">	vector&lt;Admin&gt; v_a;<span class="comment">//用于管理管理员类</span></span><br><span class="line">	vector&lt;MachineRoom&gt; v_mr;<span class="comment">//用于管理机房信息</span></span><br><span class="line">	ReservationRecord* resRec;<span class="comment">//用于管理预约信息</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">ManageSystem</span>();</span><br><span class="line">	~<span class="built_in">ManageSystem</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">LoadFile</span><span class="params">(<span class="type">int</span> type)</span></span>;<span class="comment">//用于从文本读取文件信息到程序</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">StartMenu</span><span class="params">()</span></span>;<span class="comment">//开始菜单</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">CinJudgement</span><span class="params">(string s1, <span class="type">int</span> type)</span></span>;<span class="comment">//正则表达式判断输入信息</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Login</span><span class="params">(<span class="type">int</span> choice)</span></span>;<span class="comment">//登录判断</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">MachineRoomUpdate</span><span class="params">()</span></span>;<span class="comment">//机房信息更新</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">ChildMenu</span><span class="params">(Base* person, <span class="type">int</span> type)</span></span>;<span class="comment">//各类子菜单进入接口</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">Exit</span><span class="params">()</span></span>;<span class="comment">//退出程序</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ManageSystem.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ManageSystem.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::LoadFile</span><span class="params">(<span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	<span class="keyword">switch</span> (type) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;v_sr.<span class="built_in">empty</span>())</span><br><span class="line">			<span class="keyword">this</span>-&gt;v_sr.<span class="built_in">clear</span>();</span><br><span class="line">		ifs.<span class="built_in">open</span>(STU_PATH, ios::in);</span><br><span class="line">		<span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">			<span class="type">int</span> fId;</span><br><span class="line">			string fName, fPasswd;</span><br><span class="line">			<span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPasswd) &#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;v_sr.<span class="built_in">push_back</span>(<span class="built_in">StudentRep</span>(fId, fName, fPasswd));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;<span class="type">v_t</span>.<span class="built_in">empty</span>())</span><br><span class="line">			<span class="keyword">this</span>-&gt;<span class="type">v_t</span>.<span class="built_in">clear</span>();</span><br><span class="line">		ifs.<span class="built_in">open</span>(TEACHER_PATH, ios::in);</span><br><span class="line">		<span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">			<span class="type">int</span> fId;</span><br><span class="line">			string fName, fPasswd;</span><br><span class="line">			<span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPasswd) &#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;<span class="type">v_t</span>.<span class="built_in">push_back</span>(<span class="built_in">Teacher</span>(fId, fName, fPasswd));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;v_a.<span class="built_in">empty</span>())</span><br><span class="line">			<span class="keyword">this</span>-&gt;v_a.<span class="built_in">clear</span>();</span><br><span class="line">		ifs.<span class="built_in">open</span>(ADMIN_PATH, ios::in);</span><br><span class="line">		<span class="keyword">if</span> (ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">			<span class="type">int</span> fId;</span><br><span class="line">			string fName, fPasswd;</span><br><span class="line">			<span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPasswd) &#123;</span><br><span class="line">				<span class="keyword">this</span>-&gt;v_a.<span class="built_in">push_back</span>(<span class="built_in">Admin</span>(fId, fName, fPasswd));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		ifs.<span class="built_in">open</span>(MACHINE_PATH, ios::in);</span><br><span class="line">		<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;机房信息读取失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			ifs.<span class="built_in">close</span>();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> room = <span class="number">0</span>, machineNum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (ifs &gt;&gt; room &amp;&amp; ifs &gt;&gt; machineNum) &#123;</span><br><span class="line">			<span class="keyword">this</span>-&gt;v_mr.<span class="built_in">push_back</span>(<span class="built_in">MachineRoom</span>(room, machineNum));</span><br><span class="line">		&#125;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ManageSystem::<span class="built_in">ManageSystem</span>() &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">LoadFile</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">LoadFile</span>(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">LoadFile</span>(<span class="number">3</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">LoadFile</span>(<span class="number">4</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;resRec = <span class="keyword">new</span> ReservationRecord;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ManageSystem::~<span class="built_in">ManageSystem</span>() &#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;v_sr.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;v_sr.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;<span class="type">v_t</span>.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;<span class="type">v_t</span>.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;v_a.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;v_a.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>-&gt;v_mr.<span class="built_in">clear</span>();</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;resRec != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">delete</span> <span class="keyword">this</span>-&gt;resRec;</span><br><span class="line">		<span class="keyword">this</span>-&gt;resRec = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ManageSystem::CinJudgement</span><span class="params">(string s1, <span class="type">int</span> type)</span> </span>&#123;<span class="comment">// 使用正则表达式进行匹配</span></span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="function">regex <span class="title">r</span><span class="params">(<span class="string">&quot;\\d&#123;0,3&#125;&quot;</span>)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (type == R_TYPE1) &#123;</span><br><span class="line">		r = <span class="built_in">regex</span>(<span class="string">&quot;\\d&#123;0,3&#125;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (type == R_TYPE2) &#123;</span><br><span class="line">		r = <span class="built_in">regex</span>(<span class="string">&quot;\\d&#123;0,4&#125;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (type == R_TYPE3) &#123;</span><br><span class="line">		r = <span class="built_in">regex</span>(<span class="string">&quot;\\d&#123;0,9&#125;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!(flag = <span class="built_in">regex_match</span>(s1, r)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::StartMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;======================= 欢迎来到传智播客机预约系统 ==============&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;请输入您的身份&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             1.学生代表                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             2.教   师                    |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             3.管 理 员                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             0.退   出                    |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::Login</span><span class="params">(<span class="type">int</span> choice)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;<span class="built_in">Exit</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Base* person;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		ifs.<span class="built_in">open</span>(STU_PATH, ios::in);</span><br><span class="line">		<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;文件不存在!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			ifs.<span class="built_in">close</span>();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		ifs.<span class="built_in">open</span>(TEACHER_PATH, ios::in);</span><br><span class="line">		<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;文件不存在!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			ifs.<span class="built_in">close</span>();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		ifs.<span class="built_in">open</span>(ADMIN_PATH, ios::in);</span><br><span class="line">		<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;文件不存在!&quot;</span> &lt;&lt; endl;</span><br><span class="line">			ifs.<span class="built_in">close</span>();</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line">	string temp;</span><br><span class="line">	string passwd;</span><br><span class="line">	</span><br><span class="line">	string usrType[<span class="number">3</span>] = &#123; <span class="string">&quot;学生代表&quot;</span>,<span class="string">&quot;教师&quot;</span>,<span class="string">&quot;管理员&quot;</span> &#125;;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的&quot;</span> &lt;&lt; usrType[choice - <span class="number">1</span>] &lt;&lt; <span class="string">&quot;账号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE3)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	id = <span class="built_in">stoi</span>(temp);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的&quot;</span> &lt;&lt; usrType[choice - <span class="number">1</span>] &lt;&lt; <span class="string">&quot;密码：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; passwd;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> fId;</span><br><span class="line">	string fName, fPasswd;</span><br><span class="line">	<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPasswd) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id == fId &amp;&amp; passwd == fPasswd) &#123;</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; fName &lt;&lt; <span class="string">&quot;，欢迎您!&quot;</span> &lt;&lt; endl;</span><br><span class="line">				person = <span class="keyword">new</span> <span class="built_in">StudentRep</span>(fId, fName, fPasswd);</span><br><span class="line">				<span class="keyword">this</span>-&gt;<span class="built_in">ChildMenu</span>(person, <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPasswd) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id == fId &amp;&amp; passwd == fPasswd) &#123;</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; fName &lt;&lt; <span class="string">&quot;，欢迎您!&quot;</span> &lt;&lt; endl;</span><br><span class="line">				person = <span class="keyword">new</span> <span class="built_in">Teacher</span>(fId, fName, fPasswd);</span><br><span class="line">				<span class="keyword">this</span>-&gt;<span class="built_in">ChildMenu</span>(person, <span class="number">2</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPasswd) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id == fId &amp;&amp; passwd == fPasswd) &#123;</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;登录成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; fName &lt;&lt; <span class="string">&quot;，欢迎您!&quot;</span> &lt;&lt; endl;</span><br><span class="line">				person = <span class="keyword">new</span> <span class="built_in">Admin</span>(fId, fName, fPasswd);</span><br><span class="line">				<span class="keyword">this</span>-&gt;<span class="built_in">ChildMenu</span>(person, <span class="number">3</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;验证错误，登录失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::MachineRoomUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(MACHINE_PATH, ios::out | ios::trunc);</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;MachineRoom&gt;::iterator it = <span class="keyword">this</span>-&gt;v_mr.<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;v_mr.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		ofs &lt;&lt; it-&gt;roomNum &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;machineNum &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::ChildMenu</span><span class="params">(Base* person, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">		StudentRep* studentRep = (StudentRep*)person;</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="type">int</span> choice = studentRep-&gt;<span class="built_in">System</span>();</span><br><span class="line">			<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">				<span class="keyword">if</span> (studentRep-&gt;<span class="built_in">Logout</span>()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				studentRep-&gt;<span class="built_in">applyReservation</span>(<span class="keyword">this</span>-&gt;v_mr, *(<span class="keyword">this</span>-&gt;resRec));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				studentRep-&gt;<span class="built_in">showMyReservation</span>(*(<span class="keyword">this</span>-&gt;resRec));</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				studentRep-&gt;<span class="built_in">showAllReservation</span>(*(<span class="keyword">this</span>-&gt;resRec));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				studentRep-&gt;<span class="built_in">cancelReservation</span>(<span class="keyword">this</span>-&gt;v_mr, *(<span class="keyword">this</span>-&gt;resRec));</span><br><span class="line">				<span class="keyword">this</span>-&gt;<span class="built_in">MachineRoomUpdate</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">		Teacher* teacher = (Teacher*)person;</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="type">int</span> choice = teacher-&gt;<span class="built_in">System</span>();</span><br><span class="line">			<span class="type">bool</span> pass = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">				<span class="keyword">if</span> (teacher-&gt;<span class="built_in">Logout</span>()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				teacher-&gt;<span class="built_in">showAllReservation</span>(*(<span class="keyword">this</span>-&gt;resRec));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				pass = teacher-&gt;<span class="built_in">auditReservation</span>(<span class="keyword">this</span>-&gt;v_mr, *(<span class="keyword">this</span>-&gt;resRec));</span><br><span class="line">				<span class="keyword">if</span> (pass)</span><br><span class="line">					<span class="keyword">this</span>-&gt;<span class="built_in">MachineRoomUpdate</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>) &#123;</span><br><span class="line">		Admin* admin = (Admin*)person;</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="type">int</span> choice = admin-&gt;<span class="built_in">System</span>();</span><br><span class="line">			<span class="type">int</span> type = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">				<span class="keyword">if</span> (admin-&gt;<span class="built_in">Logout</span>()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				type = admin-&gt;<span class="built_in">addAccount</span>(<span class="keyword">this</span>-&gt;v_sr, <span class="keyword">this</span>-&gt;<span class="type">v_t</span>, <span class="keyword">this</span>-&gt;v_a);</span><br><span class="line">				<span class="keyword">this</span>-&gt;<span class="built_in">LoadFile</span>(type);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				admin-&gt;<span class="built_in">showAccount</span>(<span class="keyword">this</span>-&gt;v_sr, <span class="keyword">this</span>-&gt;<span class="type">v_t</span>, <span class="keyword">this</span>-&gt;v_a);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				admin-&gt;<span class="built_in">showMachine</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				admin-&gt;<span class="built_in">clearReservation</span>(<span class="keyword">this</span>-&gt;v_mr);</span><br><span class="line">				<span class="keyword">this</span>-&gt;<span class="built_in">MachineRoomUpdate</span>();</span><br><span class="line">				<span class="keyword">this</span>-&gt;resRec-&gt;<span class="built_in">LoadFile</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ManageSystem::Exit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您确定要退出吗?[Y/N]：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice;</span><br><span class="line">	cin &gt;&gt; choice;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;欢迎再次使用本系统&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Base.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;globalDefine.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_Id;<span class="comment">//账号</span></span><br><span class="line">	string m_Name;<span class="comment">//用户名</span></span><br><span class="line">	string m_Passwd;<span class="comment">//密码</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">openMenu</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//类子菜单</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">System</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//类管理</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">Logout</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//登出</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">CinJudgement</span><span class="params">(string s1, <span class="type">int</span> type)</span></span>;<span class="comment">//正则判断</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Base.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Base.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Base::CinJudgement</span><span class="params">(string s1, <span class="type">int</span> type)</span></span>&#123;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="function">regex <span class="title">r</span><span class="params">(<span class="string">&quot;\\d&#123;0,3&#125;&quot;</span>)</span></span>;</span><br><span class="line">	<span class="keyword">switch</span> (type) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		r = <span class="built_in">regex</span>(<span class="string">&quot;\\d&#123;0,3&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		r = <span class="built_in">regex</span>(<span class="string">&quot;\\d&#123;0,4&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		r = <span class="built_in">regex</span>(<span class="string">&quot;\\d&#123;0,9&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		r = <span class="built_in">regex</span>(<span class="string">&quot;\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!(flag = <span class="built_in">regex_match</span>(s1, r))) &#123;</span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StudentRep.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Base.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ReservationRecord.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;MachineRoom.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentRep</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">StudentRep</span>(<span class="type">int</span> id, string name, string passwd);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">System</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">openMenu</span><span class="params">()</span></span>;<span class="comment">//学生代表子菜单</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">applyReservation</span><span class="params">(vector&lt;MachineRoom&gt;&amp; v_mr, ReservationRecord&amp; resRec)</span></span>;<span class="comment">//申请预约</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showMyReservation</span><span class="params">(ReservationRecord&amp; resRec)</span></span>;<span class="comment">//展示我的预约</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showAllReservation</span><span class="params">(ReservationRecord&amp; resRec)</span></span>;<span class="comment">//展示所有预约</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">cancelReservation</span><span class="params">(vector&lt;MachineRoom&gt;&amp; v_mr, ReservationRecord&amp; resRec)</span></span>;<span class="comment">//取消我的预约</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">Logout</span><span class="params">()</span></span>;<span class="comment">//登出</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StudentRep.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StudentRep.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">StudentRep::<span class="built_in">StudentRep</span>(<span class="type">int</span> id, string name, string passwd) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Passwd = passwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StudentRep::System</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">openMenu</span>();</span><br><span class="line">	string temp;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE2)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> choice = <span class="built_in">stoi</span>(temp);</span><br><span class="line">	<span class="keyword">if</span> (choice &gt; <span class="number">9</span>) &#123;</span><br><span class="line">		choice %= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StudentRep::openMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;学生代表操作系统：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             1.申请预约                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             2.查看我的预约               |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             3.查看所有预约	           |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             4.取消预约                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             0.注销登录                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StudentRep::applyReservation</span><span class="params">(vector&lt;MachineRoom&gt; &amp;v_mr, ReservationRecord&amp; resRec)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;机房开放时间为周一至周五：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1、周一\t2、周二\t3、周三\t4、周四\t5、周五&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择预约的时间：&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> date = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="type">char</span> choice;</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">			date = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">			date = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">			date = <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">			date = <span class="number">4</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">			date = <span class="number">5</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择申请预约的时间段：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1、上午\t2、下午：&quot;</span>;</span><br><span class="line">	<span class="type">int</span> time = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="type">char</span> choice;</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">if</span> (choice == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">			time = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">			time = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1号机房剩余机器：&quot;</span> &lt;&lt; v_mr[<span class="number">0</span>].machineNum &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2号机房剩余机器：&quot;</span> &lt;&lt; v_mr[<span class="number">1</span>].machineNum &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3号机房剩余机器：&quot;</span> &lt;&lt; v_mr[<span class="number">2</span>].machineNum &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择机房：&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> room = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="type">char</span> choice;</span><br><span class="line">		cin &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">if</span> (choice == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">			room = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">			room = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">			room = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (v_mr[room].machineNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;机房已满，预约失败!&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(RESERVATION_PATH, ios::app);</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; date &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;time:&quot;</span> &lt;&lt; time &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; room &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; STATUS_ING &lt;&lt; endl;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	resRec.<span class="built_in">LoadFile</span>();</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;申请预约成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StudentRep::showMyReservation</span><span class="params">(ReservationRecord&amp; resRec)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt;::iterator it = resRec.resRec.<span class="built_in">begin</span>(); it != resRec.resRec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;stuId&quot;</span>]) == <span class="keyword">this</span>-&gt;m_Id) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;日期:&quot;</span>;</span><br><span class="line">			<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;date&quot;</span>])) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周一 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周二 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周三 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周四 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周五 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;时间段:&quot;</span>;</span><br><span class="line">			<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;time&quot;</span>])) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;上午 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;下午 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;学生账号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;学生姓名:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;房间号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核状态:&quot;</span>;</span><br><span class="line">			<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;status&quot;</span>])) &#123;</span><br><span class="line">			<span class="keyword">case</span> STATUS_ING:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;审核中&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> STATUS_PASS:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;审核通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> STATUS_FAIL:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;审核未通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StudentRep::showAllReservation</span><span class="params">(ReservationRecord&amp; resRec)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt;::iterator it = resRec.resRec.<span class="built_in">begin</span>(); it != resRec.resRec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;日期:&quot;</span>;</span><br><span class="line">		<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;date&quot;</span>])) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周一 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周二 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周三 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周四 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周五 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;时间段:&quot;</span>;</span><br><span class="line">		<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;time&quot;</span>])) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;上午 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;下午 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生账号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生姓名:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;房间号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;审核状态:&quot;</span>;</span><br><span class="line">		<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;status&quot;</span>])) &#123;</span><br><span class="line">		<span class="keyword">case</span> STATUS_ING:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核中&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> STATUS_PASS:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> STATUS_FAIL:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核未通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StudentRep::cancelReservation</span><span class="params">(vector&lt;MachineRoom&gt;&amp; v_mr, ReservationRecord&amp; resRec)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">showMyReservation</span>(resRec);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择你要取消的预约(输入记录序号)：&quot;</span>;</span><br><span class="line">	string temp;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE3)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> index = <span class="built_in">stoi</span>(temp);</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="type">bool</span> findFlag = <span class="literal">false</span>;</span><br><span class="line">	map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it = resRec.resRec.<span class="built_in">begin</span>(); it != resRec.resRec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;stuId&quot;</span>]) == <span class="keyword">this</span>-&gt;m_Id) &#123;</span><br><span class="line">			count++;</span><br><span class="line">			<span class="keyword">if</span> (index == count) &#123;</span><br><span class="line">				findFlag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (findFlag) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;status&quot;</span>]) == STATUS_PASS) &#123;</span><br><span class="line">			<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;roomId&quot;</span>])) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				v_mr[<span class="number">0</span>].machineNum++;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				v_mr[<span class="number">1</span>].machineNum++;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				v_mr[<span class="number">2</span>].machineNum++;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		resRec.resRec.<span class="built_in">erase</span>(it);</span><br><span class="line">		resRec.m_Size--;</span><br><span class="line">		resRec.<span class="built_in">update</span>();</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;取消成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;记录未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StudentRep::Logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您确定要注销登录吗?[Y/N]：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice;</span><br><span class="line">	cin &gt;&gt; choice;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;注销成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;取消登出&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Teacher.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Base.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;MachineRoom.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ReservationRecord.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Teacher</span>(<span class="type">int</span> id, string name, string passwd);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">System</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">openMenu</span><span class="params">()</span></span>;<span class="comment">//教师子菜单</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showAllReservation</span><span class="params">(ReservationRecord&amp; resRec)</span></span>;<span class="comment">//展示所有预约信息</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">auditReservation</span><span class="params">(vector&lt;MachineRoom&gt;&amp; v_mr, ReservationRecord&amp; resRec)</span></span>;<span class="comment">//审核预约信息</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">Logout</span><span class="params">()</span></span>;<span class="comment">//登出</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Teacher.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Teacher.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Teacher::<span class="built_in">Teacher</span>(<span class="type">int</span> id, string name, string passwd) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Passwd = passwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Teacher::System</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">openMenu</span>();</span><br><span class="line">	string temp;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE4)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> choice = <span class="built_in">stoi</span>(temp);</span><br><span class="line">	<span class="keyword">if</span> (choice &gt; <span class="number">9</span>) &#123;</span><br><span class="line">		choice %= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::openMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;教师操作系统：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             1.查看所有预约	           |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             2.审核预约                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             0.注销登录                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Teacher::showAllReservation</span><span class="params">(ReservationRecord&amp; resRec)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt;::iterator it = resRec.resRec.<span class="built_in">begin</span>(); it != resRec.resRec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;日期:&quot;</span>;</span><br><span class="line">		<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;date&quot;</span>])) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周一 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周二 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周三 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周四 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;周五 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;时间段:&quot;</span>;</span><br><span class="line">		<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;time&quot;</span>])) &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;上午 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;下午 &quot;</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生账号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;学生姓名:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;房间号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;审核状态:&quot;</span>;</span><br><span class="line">		<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;status&quot;</span>])) &#123;</span><br><span class="line">		<span class="keyword">case</span> STATUS_ING:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核中&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> STATUS_PASS:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> STATUS_FAIL:</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核未通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Teacher::auditReservation</span><span class="params">(vector&lt;MachineRoom&gt;&amp; v_mr, ReservationRecord&amp; resRec)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt;::iterator it = resRec.resRec.<span class="built_in">begin</span>(); it != resRec.resRec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;status&quot;</span>]) == STATUS_ING) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;日期:&quot;</span>;</span><br><span class="line">			<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;date&quot;</span>])) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周一 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周二 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周三 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周四 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;周五 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;时间段:&quot;</span>;</span><br><span class="line">			<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;time&quot;</span>])) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;上午 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;下午 &quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;学生账号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;学生姓名:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;房间号:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;审核状态:审核中&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入你要审核的预约信息(输入记录序号)：&quot;</span>;</span><br><span class="line"></span><br><span class="line">	string temp;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE3)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> index = <span class="built_in">stoi</span>(temp);</span><br><span class="line">	<span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="type">bool</span> findFlag = <span class="literal">false</span>;</span><br><span class="line">	map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt;::iterator it;</span><br><span class="line">	<span class="keyword">for</span> (it = resRec.resRec.<span class="built_in">begin</span>(); it != resRec.resRec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;status&quot;</span>]) == STATUS_ING) &#123;</span><br><span class="line">			count++;</span><br><span class="line">			<span class="keyword">if</span> (index == count) &#123;</span><br><span class="line">				findFlag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (findFlag) &#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;请输入审核是否通过(Y/N)：&quot;</span>;</span><br><span class="line">			<span class="type">char</span> choice;</span><br><span class="line">			cin &gt;&gt; choice;</span><br><span class="line">			<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">				it-&gt;second[<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;审核完成&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="keyword">switch</span> (<span class="built_in">stoi</span>(it-&gt;second[<span class="string">&quot;roomId&quot;</span>])) &#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">					v_mr[<span class="number">0</span>].machineNum--;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">					v_mr[<span class="number">1</span>].machineNum--;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">					v_mr[<span class="number">2</span>].machineNum--;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">				resRec.<span class="built_in">update</span>();</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="string">&#x27;n&#x27;</span> || choice == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">				it-&gt;second[<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;审核完成&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">				cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">				resRec.<span class="built_in">update</span>();</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;记录未找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Teacher::Logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您确定要注销登录吗?[Y/N]：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice;</span><br><span class="line">	cin &gt;&gt; choice;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;注销成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;取消登出&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Admin.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Base.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;StudentRep.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Admin</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Admin</span>(<span class="type">int</span> id, string name, string passwd);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">System</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">openMenu</span><span class="params">()</span></span>;<span class="comment">//管理员子菜单</span></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">addAccount</span><span class="params">(vector&lt;StudentRep&gt;&amp; v_sr, vector&lt;Teacher&gt;&amp; <span class="type">v_t</span>, vector&lt;Admin&gt;&amp; v_a)</span></span>;<span class="comment">//账户添加功能</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showAccount</span><span class="params">(vector&lt;StudentRep&gt;&amp; v_sr, vector&lt;Teacher&gt;&amp; <span class="type">v_t</span>, vector&lt;Admin&gt;&amp; v_a)</span></span>;<span class="comment">//展示所有账户功能</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showMachine</span><span class="params">()</span></span>;<span class="comment">//展示机房信息功能</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">clearReservation</span><span class="params">(vector&lt;MachineRoom&gt;&amp; v_mr)</span></span>;<span class="comment">//清空预约信息</span></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">Logout</span><span class="params">()</span></span>;<span class="comment">//登出</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Admin.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Admin.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">Admin::<span class="built_in">Admin</span>(<span class="type">int</span> id, string name, string passwd) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Passwd = passwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Admin::System</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">openMenu</span>();</span><br><span class="line">	string temp;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE2)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> choice = <span class="built_in">stoi</span>(temp);</span><br><span class="line">	<span class="keyword">if</span> (choice &gt; <span class="number">9</span>) &#123;</span><br><span class="line">		choice %= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Admin::openMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;管理员操作系统：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             1.添加账号                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             2.查看账号                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             3.查看机房                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             4.清空预约                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|             0.注销登录                   |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t|                                          |\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t--------------------------------------------\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SaveAccountData</span><span class="params">(string fileName, Base* person)</span> </span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	ofs.<span class="built_in">open</span>(fileName, ios::out | ios::app);</span><br><span class="line">	<span class="keyword">if</span> (!ofs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Saving fail&quot;</span> &lt;&lt; endl;</span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ofs &lt;&lt; person-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; person-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; person-&gt;m_Passwd &lt;&lt; endl;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;添加成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Admin::addAccount</span><span class="params">(vector&lt;StudentRep&gt;&amp; v_sr, vector&lt;Teacher&gt;&amp; <span class="type">v_t</span>, vector&lt;Admin&gt;&amp; v_a)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> id = <span class="number">-1</span>;</span><br><span class="line">	string name, passwd;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;-------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1.添加学生代表账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2.添加教师账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3.添加管理员账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;0.取消添加&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">	string temp;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE1)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> choice = <span class="built_in">stoi</span>(temp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	string usrType[<span class="number">3</span>] = &#123; <span class="string">&quot;学生代表&quot;</span>,<span class="string">&quot;教师&quot;</span>,<span class="string">&quot;管理员&quot;</span> &#125;;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入&quot;</span> &lt;&lt; usrType[choice <span class="number">-1</span>] &lt;&lt; <span class="string">&quot;账号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; temp;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">CinJudgement</span>(temp, R_TYPE3)) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	id = <span class="built_in">stoi</span>(temp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">for</span> (vector&lt;StudentRep&gt;::iterator it = v_sr.<span class="built_in">begin</span>(); it != v_sr.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id == it-&gt;m_Id) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;账号已存在，创建失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">for</span> (vector&lt;Teacher&gt;::iterator it = <span class="type">v_t</span>.<span class="built_in">begin</span>(); it != <span class="type">v_t</span>.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id == it-&gt;m_Id) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;账号已存在，创建失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		<span class="keyword">for</span> (vector&lt;Admin&gt;::iterator it = v_a.<span class="built_in">begin</span>(); it != v_a.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id == it-&gt;m_Id) &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;账号已存在，创建失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">				<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入&quot;</span> &lt;&lt; usrType[choice - <span class="number">1</span>] &lt;&lt; <span class="string">&quot;姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入&quot;</span> &lt;&lt; usrType[choice - <span class="number">1</span>] &lt;&lt; <span class="string">&quot;密码：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; passwd;</span><br><span class="line"></span><br><span class="line">	Base* person = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		person = <span class="keyword">new</span> <span class="built_in">StudentRep</span>(id, name, passwd);</span><br><span class="line">		<span class="built_in">SaveAccountData</span>(STU_PATH, person);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		person = <span class="keyword">new</span> <span class="built_in">Teacher</span>(id, name, passwd);</span><br><span class="line">		<span class="built_in">SaveAccountData</span>(TEACHER_PATH, person);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		person = <span class="keyword">new</span> <span class="built_in">Admin</span>(id, name, passwd);</span><br><span class="line">		<span class="built_in">SaveAccountData</span>(ADMIN_PATH, person);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span> person;</span><br><span class="line">	person = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Admin::showAccount</span><span class="params">(vector&lt;StudentRep&gt; &amp;v_sr, vector&lt;Teacher&gt;&amp; <span class="type">v_t</span>, vector&lt;Admin&gt;&amp; v_a)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;学生代表信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;StudentRep&gt;::iterator it = v_sr.<span class="built_in">begin</span>(); it != v_sr.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;账号：&quot;</span> &lt;&lt; it-&gt;m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; it-&gt;m_Passwd &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n教师信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Teacher&gt;::iterator it = <span class="type">v_t</span>.<span class="built_in">begin</span>(); it != <span class="type">v_t</span>.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;账号：&quot;</span> &lt;&lt; it-&gt;m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; it-&gt;m_Passwd &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n管理员信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">for</span> (vector&lt;Admin&gt;::iterator it = v_a.<span class="built_in">begin</span>(); it != v_a.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;账号：&quot;</span> &lt;&lt; it-&gt;m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Admin::showMachine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(MACHINE_PATH, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;File open failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> roomNum = <span class="number">0</span>, machineNum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ifs &gt;&gt; roomNum &amp;&amp; ifs &gt;&gt; machineNum) &#123;</span><br><span class="line">		cout &lt;&lt; roomNum &lt;&lt; <span class="string">&quot;号机房机器数：&quot;</span> &lt;&lt; machineNum &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Admin::clearReservation</span><span class="params">(vector&lt;MachineRoom&gt; &amp;v_mr)</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您确定要清空预约吗?[Y/N]：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice;</span><br><span class="line">	cin &gt;&gt; choice;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">		ofstream ofs;</span><br><span class="line">		ofs.<span class="built_in">open</span>(RESERVATION_PATH, ios::trunc);</span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">		v_mr[<span class="number">0</span>].machineNum = <span class="number">20</span>;</span><br><span class="line">		v_mr[<span class="number">1</span>].machineNum = <span class="number">50</span>;</span><br><span class="line">		v_mr[<span class="number">2</span>].machineNum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;取消清空&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Admin::Logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您确定要注销登录吗?[Y/N]：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> choice;</span><br><span class="line">	cin &gt;&gt; choice;</span><br><span class="line">	<span class="keyword">if</span> (choice == <span class="string">&#x27;Y&#x27;</span> || choice == <span class="string">&#x27;y&#x27;</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;注销成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cin.<span class="built_in">ignore</span>(numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;取消登出&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MachineRoom.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;globalDefine.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MachineRoom</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> roomNum;</span><br><span class="line">	<span class="type">int</span> machineNum;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">MachineRoom</span>(<span class="type">int</span> room, <span class="type">int</span> machineNum);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MachineRoom.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MachineRoom.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MachineRoom::<span class="built_in">MachineRoom</span>(<span class="type">int</span> room, <span class="type">int</span> machineNum) &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;roomNum = room;</span><br><span class="line">	<span class="keyword">this</span>-&gt;machineNum = machineNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ReservationRecord.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;globalDefine.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReservationRecord</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="type">int</span> m_Size;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">ReservationRecord</span>();</span><br><span class="line">	~<span class="built_in">ReservationRecord</span>();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">LoadFile</span><span class="params">()</span></span>;<span class="comment">//预约信息文件读取</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span></span>;<span class="comment">//更新预约信息文件</span></span><br><span class="line">	</span><br><span class="line">	map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt; resRec;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ReservationRecord.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ReservationRecord.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(map&lt;string, string&gt;&amp; m, string data)</span> </span>&#123;</span><br><span class="line">	string key, value;</span><br><span class="line">	<span class="type">int</span> pos = data.<span class="built_in">find</span>(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">		key = data.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">		value = data.<span class="built_in">substr</span>(pos + <span class="number">1</span>, data.<span class="built_in">size</span>() - pos - <span class="number">1</span>);</span><br><span class="line">		m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, string&gt;(key, value));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReservationRecord::LoadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">	string date;</span><br><span class="line">	string time;</span><br><span class="line">	string stuId;</span><br><span class="line">	string stuName;</span><br><span class="line">	string roomId;</span><br><span class="line">	string status;</span><br><span class="line"></span><br><span class="line">	ifstream ifs;</span><br><span class="line">	ifs.<span class="built_in">open</span>(RESERVATION_PATH, ios::in);</span><br><span class="line">	<span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;file open failed&quot;</span> &lt;&lt; endl;</span><br><span class="line">		ifs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;resRec.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;resRec.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; time &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt; stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp; ifs &gt;&gt; status) &#123;</span><br><span class="line">		map&lt;string, string&gt; m;</span><br><span class="line">		<span class="built_in">divide</span>(m, date);</span><br><span class="line">		<span class="built_in">divide</span>(m, time);</span><br><span class="line">		<span class="built_in">divide</span>(m, stuId);</span><br><span class="line">		<span class="built_in">divide</span>(m, stuName);</span><br><span class="line">		<span class="built_in">divide</span>(m, roomId);</span><br><span class="line">		<span class="built_in">divide</span>(m, status);</span><br><span class="line">		<span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">		<span class="keyword">this</span>-&gt;resRec.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="keyword">this</span>-&gt;m_Size, m));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReservationRecord::<span class="built_in">ReservationRecord</span>() &#123;</span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">LoadFile</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReservationRecord::~<span class="built_in">ReservationRecord</span>() &#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;resRec.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;resRec.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReservationRecord::update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ofstream ofs;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>) &#123;</span><br><span class="line">		ofs.<span class="built_in">open</span>(RESERVATION_PATH, ios::out | ios::trunc);</span><br><span class="line">		ofs.<span class="built_in">close</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ofs.<span class="built_in">open</span>(RESERVATION_PATH, ios::out | ios::trunc);</span><br><span class="line">	<span class="keyword">for</span> (map&lt;<span class="type">int</span>, map&lt;string, string&gt;&gt;::iterator it = <span class="keyword">this</span>-&gt;resRec.<span class="built_in">begin</span>(); it != <span class="keyword">this</span>-&gt;resRec.<span class="built_in">end</span>();it++) &#123;</span><br><span class="line">		ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		ofs &lt;&lt; <span class="string">&quot;time:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;time&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; it-&gt;second[<span class="string">&quot;status&quot;</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>-&gt;<span class="built_in">LoadFile</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣算法每日一练</title>
    <url>/2023/06/11/LeetCodeLearn/</url>
    <content><![CDATA[<p><strong>记录一下每日一个 LeetCode 算法题</strong></p>
<p><strong>注：题解大多参考官方或评论区给的答案，我只是补了补注释</strong></p>
<h1 id="题目"><a class="markdownIt-Anchor" href="#题目">#</a> 题目</h1>
<h2 id="1170比较字符串最小字母出现频次"><a class="markdownIt-Anchor" href="#1170比较字符串最小字母出现频次">#</a> (1170) 比较字符串最小字母出现频次</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306111555153.png" alt="image-20230611155543051"></p>
<h2 id="1171从链表中删去总和值为零的连续节点"><a class="markdownIt-Anchor" href="#1171从链表中删去总和值为零的连续节点">#</a> (1171) 从链表中删去总和值为零的连续节点</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306111557518.png" alt="image-20230611155708477"></p>
<h2 id="1483树节点的第-k-个祖先"><a class="markdownIt-Anchor" href="#1483树节点的第-k-个祖先">#</a> (1483) 树节点的第 K 个祖先</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306121546126.png" alt="image-20230612154617009"></p>
<h2 id="2475数组中不等三元组的数目"><a class="markdownIt-Anchor" href="#2475数组中不等三元组的数目">#</a> (2475) 数组中不等三元组的数目</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306131913693.png" alt="image-20230613191343597"></p>
<h2 id="1375二进制字符串前缀一致的次数"><a class="markdownIt-Anchor" href="#1375二进制字符串前缀一致的次数">#</a> (1375) 二进制字符串前缀一致的次数</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306142001793.png" alt="image-20230614200116681"></p>
<h2 id="1494并行课程"><a class="markdownIt-Anchor" href="#1494并行课程">#</a> (1494) 并行课程</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306161917472.png" alt="image-20230616191743344"></p>
<h2 id="2481分割圆的最少切割次数"><a class="markdownIt-Anchor" href="#2481分割圆的最少切割次数">#</a> (2481) 分割圆的最少切割次数</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306172056765.png" alt="image-20230617205619654"></p>
<h2 id="1254统计封闭岛屿的数目"><a class="markdownIt-Anchor" href="#1254统计封闭岛屿的数目">#</a> (1254) 统计封闭岛屿的数目</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306181829784.png" alt="image-20230618182455788"></p>
<h2 id="18四数之和"><a class="markdownIt-Anchor" href="#18四数之和">#</a> (18) 四数之和</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/image-20230715190624987.png" alt="image-20230715190624987"></p>
<h2 id="1851包含每个查询的最小区间"><a class="markdownIt-Anchor" href="#1851包含每个查询的最小区间">#</a> (1851) 包含每个查询的最小区间</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202307182253640.png" alt="image-20230718225301420"></p>
<h2 id="143重排链表"><a class="markdownIt-Anchor" href="#143重排链表">#</a> (143) 重排链表</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202307311701560.png" alt="image-20230731170105443"></p>
<h2 id="722删除注释"><a class="markdownIt-Anchor" href="#722删除注释">#</a> (722) 删除注释</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202308032342679.png" alt="image-20230803234218554"></p>
<h2 id="23合并-k-个升序链表"><a class="markdownIt-Anchor" href="#23合并-k-个升序链表">#</a> (23) 合并 K 个升序链表</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202308121359399.png" alt="image-20230812135901264"></p>
<h2 id="2048下一个更大的数值平衡数"><a class="markdownIt-Anchor" href="#2048下一个更大的数值平衡数">#</a> (2048) 下一个更大的数值平衡数</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202312091423964.png" alt="image-20231209141056489"></p>
<h1 id="题解"><a class="markdownIt-Anchor" href="#题解">#</a> 题解</h1>
<h2 id="1170比较字符串最小字母出现频次-2"><a class="markdownIt-Anchor" href="#1170比较字符串最小字母出现频次-2">#</a> (1170) 比较字符串最小字母出现频次</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">numSmallerByFrequency</span><span class="params">(vector&lt;string&gt;&amp; queries, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (string&amp; w : words)&#123;</span><br><span class="line">            <span class="comment">//统计words中每个string的最小字母出现的次数的情况，最多有10种情况，所以count的长度为11(因为使用下标从1开始)</span></span><br><span class="line">            <span class="type">int</span> req = <span class="built_in">f</span>(w);</span><br><span class="line">            <span class="comment">//每出现一次对应的情况，将其出现次数加1</span></span><br><span class="line">            count[req]++;</span><br><span class="line">            <span class="comment">//当f(queries[i])等于2时，那么对于words大于2的情况，都是大于f(queries[i])的</span></span><br><span class="line">            <span class="comment">//只需要将f(words[i]) &gt; 2的情况全部相加，即count[3] + count[4] + .... + count[10](因为words[i].length &lt; 10)</span></span><br><span class="line">            <span class="comment">//就是f(queries[i]) &lt; f(words[i])的数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> sum_len = count.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sum</span><span class="params">(<span class="number">11</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; sum_len; i++)&#123;</span><br><span class="line">            <span class="comment">//将f(words[i])的count提前计算好</span></span><br><span class="line">            <span class="comment">//当f(queries[i])为4时，需要计算count[5]加到count[10]</span></span><br><span class="line">            <span class="comment">//只需要用sum[10] - sum[5]即可</span></span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + count[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">answer</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="comment">//先计算f(queries[i])</span></span><br><span class="line">            <span class="type">int</span> req = <span class="built_in">f</span>(queries[i]);</span><br><span class="line">            <span class="comment">//将sum相减计算的最后结果存储到answer中</span></span><br><span class="line">            answer[i] = sum[<span class="number">10</span>] - sum[req];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(string&amp; str)</span></span>&#123;</span><br><span class="line">        <span class="comment">//统计数</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当前最小字母</span></span><br><span class="line">        <span class="type">char</span> cur_c = EOF;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>&amp; c : str)&#123;</span><br><span class="line">            <span class="comment">//如果c的值更小，则重新开始计算</span></span><br><span class="line">            <span class="keyword">if</span> (cur_c == EOF || cur_c &gt; c)&#123;</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">                cur_c = c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果当前的最小字母和遍历到的c相同，则统计数增加</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur_c == c)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1171从链表中删去总和值为零的连续节点-2"><a class="markdownIt-Anchor" href="#1171从链表中删去总和值为零的连续节点-2">#</a> (1171) 从链表中删去总和值为零的连续节点</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeZeroSumSublists</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 第一个为前缀和  第二个为链表结点</span></span><br><span class="line">        map&lt;<span class="type">int</span>,ListNode*&gt; map;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以避免一些特殊情况 比如:[1,-1]</span></span><br><span class="line">        ListNode * root = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);  </span><br><span class="line">        ListNode * node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先找出具有相同前缀和的结点 把最后前缀和相同的结点保存到map中</span></span><br><span class="line">        <span class="keyword">for</span>(node = root;node != <span class="literal">NULL</span>;node = node-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += node-&gt;val;</span><br><span class="line">            map[sum] = node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对于当前节点的前缀和如果在map中被查找到有相同的（前缀和相同节点之间的节点和为0）就删除之间的所有节点</span></span><br><span class="line">        <span class="keyword">for</span>(node = root,sum = <span class="number">0</span>;node != <span class="literal">NULL</span>;node = node-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += node-&gt;val;</span><br><span class="line">            <span class="keyword">if</span>(map.<span class="built_in">find</span>(sum) != map.<span class="built_in">end</span>())</span><br><span class="line">                node-&gt;next = map[sum]-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1483树节点的第-k-个祖先-2"><a class="markdownIt-Anchor" href="#1483树节点的第-k-个祖先-2">#</a> (1483) 树节点的第 K 个祖先</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeAncestor</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//因为至多查询5 * 10^4次，所以定义最大2^k 的k为16(2^16 = 65536 &gt; 50000)</span></span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">static</span> <span class="type">int</span> Log = <span class="number">16</span>;</span><br><span class="line">    <span class="comment">//记录倍增的数组</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ancestors;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TreeAncestor</span>(<span class="type">int</span> n, vector&lt;<span class="type">int</span>&gt;&amp; parent) &#123;</span><br><span class="line">        <span class="comment">//创建一个二维vector容器，并初始化值为-1，赋值给ancestors</span></span><br><span class="line">        ancestors = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(Log, <span class="number">-1</span>));</span><br><span class="line">        <span class="comment">//先将ancestors[i][0]是parent[i]的父节点;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ancestors[i][<span class="number">0</span>] = parent[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算倍增，并将其存储到ancestors</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; Log; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ancestors[i][j - <span class="number">1</span>] != <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="comment">//对于ancestors[i]向上跳跃[j]步，相当于ancestors[i]向上跳跃[j-1]步(即跳跃到ancestors[i][j - 1])</span></span><br><span class="line">                    <span class="comment">//然后将ancestors[i][j - 1]再向上跳[j - 1]次(即ancestors[ancestors[i][j - 1]][j - 1])</span></span><br><span class="line">                    ancestors[i][j] = ancestors[ancestors[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;            </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getKthAncestor</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; Log; j++) &#123;</span><br><span class="line">            <span class="comment">//将k右移j位，例如：对于9，其二进制为1001右移1位，变为100，也就是4，再右移1位，变成10，也就是2</span></span><br><span class="line">            <span class="keyword">if</span> ((k &gt;&gt; j) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//&amp;:与操作，例如：对于9，其二进制为1001，对于1，其二进制为0001</span></span><br><span class="line">                <span class="comment">//          1001</span></span><br><span class="line">                <span class="comment">//          0001</span></span><br><span class="line">                <span class="comment">//取&amp;结果为:0001    1&amp;1 = 1, (1 &amp; 0) = (0 &amp; 0) = 0;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//令node = 其跳跃到的父节点</span></span><br><span class="line">                node = ancestors[node][j];</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="number">-1</span>) &#123;<span class="comment">//如果node=-1，说明倍增时没有赋值到，也就是其父节点为空</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TreeAncestor object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TreeAncestor* obj = new TreeAncestor(n, parent);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj-&gt;getKthAncestor(node,k);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="2475数组中不等三元组的数目-2"><a class="markdownIt-Anchor" href="#2475数组中不等三元组的数目-2">#</a> (2475) 数组中不等三元组的数目</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">unequalTriplets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用不排序map处理nums数组，</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; temp;</span><br><span class="line">        <span class="type">int</span> length = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">            <span class="comment">//将nums[i]作为key，记录其出现次数</span></span><br><span class="line">            temp[nums[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对于该题，数组元素的相对顺序并不影响结果，例如4,4,2,4,3</span></span><br><span class="line">        <span class="comment">//其答案为(0,2,3),(1,2,4),(2,3,4)共3种结果</span></span><br><span class="line">        <span class="comment">//将其排序为2,3,4,4,4</span></span><br><span class="line">        <span class="comment">//其答案为(0,1,2),(0,1,3),(0,1,4)同样3种结果</span></span><br><span class="line">        <span class="comment">//而且对于其中相同的元素4来说，假设先前元素的个数为t，当前元素个数为v</span></span><br><span class="line">        <span class="comment">//则有t * v * (n - t - v)个三元组符合要求</span></span><br><span class="line">        <span class="comment">//例如对于1,1,3,3,3,5,5,5</span></span><br><span class="line">        <span class="comment">//如果是3，显然0和1是两(t)种i组成,2,3,4是三(v)种j组成,5,6,7是三(n - t - v)种k组成</span></span><br><span class="line">        <span class="comment">//所以对于3有2*3*3种情况符合题目要求</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//answer记录答案，pre记录计算过的key值的出现次数</span></span><br><span class="line">        <span class="type">int</span> answer = <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = temp.<span class="built_in">begin</span>();it != temp.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            <span class="comment">//用record记录删去已经计算过的key值的出现次数，和当前循环key值出现次数，剩余的数字的个数</span></span><br><span class="line">            <span class="type">int</span> record = length - pre - it-&gt;second;</span><br><span class="line">            <span class="comment">//元组数累计</span></span><br><span class="line">            answer += pre * it-&gt;second * record;</span><br><span class="line">            <span class="comment">//将当前循环的key值出现次数累计到pre中</span></span><br><span class="line">            pre += it-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1375二进制字符串前缀一致的次数-2"><a class="markdownIt-Anchor" href="#1375二进制字符串前缀一致的次数-2">#</a> (1375) 二进制字符串前缀一致的次数</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTimesAllBlue</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; flips)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//maxe为字符串最靠右的1</span></span><br><span class="line">        <span class="type">int</span> length = flips.<span class="built_in">size</span>(), count = <span class="number">0</span>, maxe = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//要让[1, i+1]的范围都为1，说明此时最靠右的1的位置正好等于变1操作的步数</span></span><br><span class="line">            <span class="comment">//若最靠右的1的位置大于已经操作的步数，说明在最靠右的1的位置之前，还存在着没有改成变成1的0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//取已操作过的flips中的最大值，记作已被操作过的最靠右的1的位置</span></span><br><span class="line">            maxe = <span class="built_in">max</span>(maxe, flips[i]);</span><br><span class="line">            <span class="comment">//比较，如果恰好相等，说明符合题目要求</span></span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> == maxe)</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1494并行课程-2"><a class="markdownIt-Anchor" href="#1494并行课程-2">#</a> (1494) 并行课程</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//答案看不懂，直接复制过来了</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minNumberOfSemesters</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; relations, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(<span class="number">1</span> &lt;&lt; n, INT_MAX)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">need</span><span class="params">(<span class="number">1</span> &lt;&lt; n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; edge : relations) &#123;</span><br><span class="line">            need[(<span class="number">1</span> &lt;&lt; (edge[<span class="number">1</span>] - <span class="number">1</span>))] |= <span class="number">1</span> &lt;&lt; (edge[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) &#123;</span><br><span class="line">            need[i] = need[i &amp; (i - <span class="number">1</span>)] | need[i &amp; (-i)];</span><br><span class="line">            <span class="keyword">if</span> ((need[i] | i) != i) &#123; <span class="comment">// i 中有任意一门课程的前置课程没有完成学习</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> valid = i ^ need[i]; <span class="comment">// 当前学期可以进行学习的课程集合</span></span><br><span class="line">            <span class="keyword">if</span> (__builtin_popcount(valid) &lt;= k) &#123; <span class="comment">// 如果个数小于 k，则可以全部学习，不再枚举子集</span></span><br><span class="line">                dp[i] = <span class="built_in">min</span>(dp[i], dp[i ^ valid] + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则枚举当前学期需要进行学习的课程集合</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> sub = valid; sub; sub = (sub - <span class="number">1</span>) &amp; valid) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (__builtin_popcount(sub) &lt;= k) &#123;</span><br><span class="line">                        dp[i] = <span class="built_in">min</span>(dp[i], dp[i ^ sub] + <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="2481分割圆的最少切割次数-2"><a class="markdownIt-Anchor" href="#2481分割圆的最少切割次数-2">#</a> (2481) 分割圆的最少切割次数</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//纯简单题，没啥好说的，记得考虑n == 1的特殊情况就行</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfCuts</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1254统计封闭岛屿的数目-2"><a class="markdownIt-Anchor" href="#1254统计封闭岛屿的数目-2">#</a> (1254) 统计封闭岛屿的数目</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//没看懂0.o</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">closedIsland</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; qu;</span><br><span class="line">                    grid[i][j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="type">bool</span> closed = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                    qu.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(i, j));</span><br><span class="line">                    <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="keyword">auto</span> [cx, cy] = qu.<span class="built_in">front</span>();</span><br><span class="line">                        qu.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="keyword">if</span> (cx == <span class="number">0</span> || cy == <span class="number">0</span> || cx == m - <span class="number">1</span> || cy == n - <span class="number">1</span>) &#123;</span><br><span class="line">                            closed = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                            <span class="type">int</span> nx = cx + dir[i][<span class="number">0</span>];</span><br><span class="line">                            <span class="type">int</span> ny = cy + dir[i][<span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                                grid[nx][ny] = <span class="number">1</span>;</span><br><span class="line">                                qu.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">                        ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="18四数之和-2"><a class="markdownIt-Anchor" href="#18四数之和-2">#</a> (18) 四数之和</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在解决四数之和问题前，我们先来解决其前置题目，三数之和。</span></span><br><span class="line"><span class="comment">//三数之和,给你一个nums数组，判断其中是否有三个数的和为0，将所有三个数和为0的数组返回，答案中不能包含重复的三元组。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*该题目要求答案三元组不能重复，因此不能单纯的使用三重循环暴力求解。因为如果数组nums[] = &#123;0, 0, 0, 0, 0, ...&#125;时，那么就会得到O(N ^ 3)个三元组，然后需要再对其去重，这样的开销显然非常大。</span></span><br><span class="line"><span class="comment">		重新思考重复三元组，可以发现，假设有a,b,c三个数符合要求，那么就会有三元组&#123;a, b, c&#125;, &#123;b, a, c&#125;, &#123;c, a, b&#125;...等三元组符合要求，其实也就是a,b,c三个数的排列组合，应该会有6种(A33 = 3!)，如果对其进行限制，从第一个数到第三个数的大小应当是逐渐变大的，那么就能够剔除到5种排列组合，仅保留一种。例如对于-2 + -1 + 3 = 0，要求三元组从小到大，那么只有&#123;-2，-1，3&#125;是符合要求的。所以在获取答案之前，可以将nums数组进行排序，以便于操作。</span></span><br><span class="line"><span class="comment">		但这样会导致&#123;0, 0, 0&#125;三元组等于0的情况被排除，也就是重复数三元组会被意外排除。</span></span><br><span class="line"><span class="comment">		为了避免意外排除需要的答案，所以仅限制为a &lt;= b &lt;= c，但这样仍然无法解决nums[] = &#123;0, 0, 0, 0&#125;，即重复数的问题，这个问题可以通过if判断重复数，然后跳过循环来解决。</span></span><br><span class="line"><span class="comment">		到这里便完成了这个问题的解答，下面给出代码：</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(std::vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//对nums数组进行排序</span></span><br><span class="line">		<span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">		<span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">		<span class="comment">//用于存储答案</span></span><br><span class="line">		std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; len - <span class="number">2</span>; a++) &#123;</span><br><span class="line">			<span class="comment">//如果nums[a]和上一个数相同，即重复数，那么跳过重复数</span></span><br><span class="line">			<span class="keyword">if</span> (a == <span class="number">0</span> || nums[a] != nums[a - <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> b = a + <span class="number">1</span>; b &lt; len - <span class="number">1</span>; b++) &#123;</span><br><span class="line">					<span class="comment">//如果nums[b]和上一个数相同，即重复数，那么跳过重复数</span></span><br><span class="line">					<span class="keyword">if</span> (b == a + <span class="number">1</span> || nums[b] != nums[b - <span class="number">1</span>]) &#123;</span><br><span class="line">						<span class="keyword">for</span> (<span class="type">int</span> c = b + <span class="number">1</span>; c &lt; len; c++) &#123;</span><br><span class="line">							<span class="comment">//如果nums[c]和上一个数相同，即重复数，那么跳过重复数</span></span><br><span class="line">							<span class="keyword">if</span> (c == b + <span class="number">1</span> || nums[c] != nums[c - <span class="number">1</span>]) &#123;</span><br><span class="line">								<span class="comment">//检查是否有nums[a]+nums[b]+nums[c] == 0</span></span><br><span class="line">								<span class="keyword">if</span> (nums[a] + nums[b] + nums[c] == <span class="number">0</span>) &#123;</span><br><span class="line">									<span class="comment">//如果有，将其加入到答案中</span></span><br><span class="line">									ans.<span class="built_in">push_back</span>(&#123; nums[a], nums[b], nums[c] &#125;);</span><br><span class="line">								&#125;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*但是该解法使用的三重循环就是一个非常复杂的算法，其时间开销十分巨大(O(n^3)，这个算法力扣直接给报超时)</span></span><br><span class="line"><span class="comment">所以继续对该算法进行优化。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">可以发现对于a+b+c==0，如果固定了a和b，那么c也就是确定了，当三重循环找到了c后，应该就可以直接结束了，因为c是唯一确定的。</span></span><br><span class="line"><span class="comment">然后改变b，将b向后移动为b&#x27;，可以确定b&#x27;一定大于b，那么对于a+b&#x27;+c&#x27;=0，可以确定唯一的c&#x27;，并且可以断言，c&#x27;一定是小于c的(因为b增大了，那么c就要减小)。</span></span><br><span class="line"><span class="comment">因此便可以想到：</span></span><br><span class="line"><span class="comment">1.假设同时取左指针left指向b，右指针right指向c，将b固定，如果a+b+c &gt; 0，只要将right左移，减小c的值即可</span></span><br><span class="line"><span class="comment">2.当找到唯一确定的c之后，那么b的left指针就可以右移，即把b变为b&#x27;了，然后重复上一操作寻找c&#x27;即可</span></span><br><span class="line"><span class="comment">3.当right与left重合时，判断就结束了</span></span><br><span class="line"><span class="comment">这个过程有些类似于快速排序。</span></span><br><span class="line"><span class="comment">下面是代码实现：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(std::vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">		<span class="comment">//排序nums数组</span></span><br><span class="line">		<span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">		<span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">		<span class="comment">//用于存储答案</span></span><br><span class="line">		std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; len - <span class="number">2</span>; a++) &#123;</span><br><span class="line">			<span class="comment">//对于a去除重复数</span></span><br><span class="line">			<span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; nums[a] == nums[a - <span class="number">1</span>])</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="comment">//定义右标</span></span><br><span class="line">			<span class="type">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">			<span class="comment">//此for循环用于枚举b</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> left = a + <span class="number">1</span>; left &lt; len - <span class="number">1</span>; left++) &#123;</span><br><span class="line">				<span class="comment">//对于b去除重复数</span></span><br><span class="line">				<span class="keyword">if</span> (left &gt; a + <span class="number">1</span> &amp;&amp; nums[left] == nums[left - <span class="number">1</span>])</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				<span class="comment">//保证left在right的左侧，然后寻找符合要求的c</span></span><br><span class="line">				<span class="keyword">while</span> (left &lt; right &amp;&amp; nums[a] + nums[left] + nums[right] &gt; <span class="number">0</span>)</span><br><span class="line">					right--;</span><br><span class="line">				<span class="comment">//当左指针与右指针相等时，左指针继续右移，此时b&gt;c，不符合要求的a&lt;=b&lt;=c，所以直接退出循环即可</span></span><br><span class="line">				<span class="keyword">if</span> (left == right)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">if</span> (nums[a] + nums[left] + nums[right] == <span class="number">0</span>)</span><br><span class="line">					<span class="comment">//如果找到匹配的三元组，那么就将其存入答案</span></span><br><span class="line">					ans.<span class="built_in">push_back</span>(&#123; nums[a], nums[left], nums[right] &#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这样改进后时间复杂度就变为了O(n^2)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//理解了三数之和的  排序+双指针  解决方法后，再回来看四数之和的解决方案</span></span><br><span class="line"><span class="comment">//其方法与三数和类似，首先考虑四重循环，然后将c和d的循环用双指针变为单重循环，这样便可以实现一个时间复杂度为O(n^3)的算法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(std::vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;</span><br><span class="line">		<span class="comment">//排序nums数组</span></span><br><span class="line">		<span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">		<span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">		<span class="comment">//用于存储答案</span></span><br><span class="line">		std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> a = <span class="number">0</span>; a &lt; len - <span class="number">3</span>; a++) &#123;</span><br><span class="line">			<span class="comment">//对于a去除重复数</span></span><br><span class="line">			<span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; nums[a] == nums[a - <span class="number">1</span>])</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> b = a + <span class="number">1</span>; b &lt; len - <span class="number">2</span>; b++) &#123;</span><br><span class="line">				<span class="comment">//对于b去除重复数</span></span><br><span class="line">				<span class="keyword">if</span> (b &gt; a + <span class="number">1</span> &amp;&amp; nums[b] == nums[b - <span class="number">1</span>])</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">//定义右标</span></span><br><span class="line">				<span class="type">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">				<span class="comment">//此for循环用于枚举c</span></span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> left = b + <span class="number">1</span>; left &lt; len - <span class="number">1</span>; left++) &#123;</span><br><span class="line">					<span class="comment">//对于c去除重复数</span></span><br><span class="line">					<span class="keyword">if</span> (left &gt; b + <span class="number">1</span> &amp;&amp; nums[left] == nums[left - <span class="number">1</span>])</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="comment">//保证left在right的左侧，然后寻找符合要求的d</span></span><br><span class="line">					<span class="comment">//下面强转为long，因为力扣的测试中有输入&#123;1000000000,1000000000,1000000000,1000000000&#125;的例子，相加时会超出int范围。</span></span><br><span class="line">					<span class="keyword">while</span> (left &lt; right &amp;&amp; (<span class="type">long</span>) nums[a] + nums[b] + nums[left] + nums[right] &gt; target)</span><br><span class="line">						right--;</span><br><span class="line">					<span class="comment">//当左指针与右指针相等时，左指针继续右移，此时b&gt;c，不符合要求的a&lt;=b&lt;=c，所以直接退出循环即可</span></span><br><span class="line">					<span class="keyword">if</span> (left == right)</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> ((<span class="type">long</span>) nums[a] + nums[b] + nums[left] + nums[right] == target)</span><br><span class="line">						<span class="comment">//如果找到匹配的三元组，那么就将其存入答案</span></span><br><span class="line">						ans.<span class="built_in">push_back</span>(&#123; nums[a], nums[b], nums[left], nums[right] &#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//在所有C++提交中击败了20.18%的用户，我人都懵了，果然还是菜，大佬太多了</span></span><br></pre></td></tr></table></figure>
<h2 id="1851包含每个查询的最小区间-2"><a class="markdownIt-Anchor" href="#1851包含每个查询的最小区间-2">#</a> (1851) 包含每个查询的最小区间</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">minInterval</span><span class="params">(std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals, std::vector&lt;<span class="type">int</span>&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建辅助数组qindex用来存储排序后的queries数组</span></span><br><span class="line">		<span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">qindex</span><span class="params">(queries.size())</span></span>;</span><br><span class="line">		<span class="comment">//初始化qindex，将其内部全部赋0</span></span><br><span class="line">		<span class="built_in">iota</span>(qindex.<span class="built_in">begin</span>(), qindex.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//使用lambda表达式(匿名函数)，将升序排序后的queries数组赋给qindex</span></span><br><span class="line">		<span class="built_in">sort</span>(qindex.<span class="built_in">begin</span>(), qindex.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> i, <span class="type">int</span> j)-&gt;<span class="type">bool</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> queries[i] &lt; queries[j];</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//使用lambda表达式(匿名函数)，按照interval的左值升序排序intervals数组</span></span><br><span class="line">		<span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>(), [](<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; it1, <span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; it2)-&gt;<span class="type">bool</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> it1[<span class="number">0</span>] &lt; it2[<span class="number">0</span>];</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建优先队列pq</span></span><br><span class="line">		std::priority_queue&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; pq;</span><br><span class="line">		<span class="comment">//创建答案数组ans</span></span><br><span class="line">		<span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(queries.size(), <span class="number">-1</span>)</span></span>;</span><br><span class="line">		<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//遍历qindex</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> qi : qindex) &#123;</span><br><span class="line">			<span class="comment">//1.当i等于intervals的长度或者lefti &gt; queries[j]，停止循环</span></span><br><span class="line">			<span class="keyword">while</span> (i &lt; intervals.<span class="built_in">size</span>() &amp;&amp; intervals[i][<span class="number">0</span>] &lt;= queries[qi]) &#123;</span><br><span class="line">				<span class="comment">//l为intervals区间长度</span></span><br><span class="line">				<span class="type">int</span> l = intervals[i][<span class="number">1</span>] - intervals[i][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">				<span class="comment">//将intervals的区间存入优先队列，其优先级按照区间长度进行降序排序，所以对l取反存入</span></span><br><span class="line">				pq.<span class="built_in">push</span>(&#123; -l, intervals[i][<span class="number">0</span>], intervals[i][<span class="number">1</span>] &#125;);</span><br><span class="line">				i++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//优先队列不为空时，并且优先队列中优先级最高的intervals区间右值小于queries，那么将其排除</span></span><br><span class="line">			<span class="keyword">while</span> (!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>()[<span class="number">2</span>] &lt; queries[qi]) &#123;</span><br><span class="line">				pq.<span class="built_in">pop</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//此时剩余的优先队列中优先级最高的就是所求区间，将其存入的区间长度取反即可</span></span><br><span class="line">			<span class="keyword">if</span> (!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">				ans[qi] = -pq.<span class="built_in">top</span>()[<span class="number">0</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="143重排链表-2"><a class="markdownIt-Anchor" href="#143重排链表-2">#</a> (143) 重排链表</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reorderList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果是空链表，直接返回即可</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建vector容器存储链表，使用线性表可以随机读写的特性去操作链表</span></span><br><span class="line">        vector&lt;ListNode *&gt; vec;</span><br><span class="line">        ListNode *node = head;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="comment">//emplace_back是C++11新增的，其作用与push_back相同，但相较于push_back</span></span><br><span class="line">            <span class="comment">//emplace_back直接使用拷贝将值拷贝到容器末尾</span></span><br><span class="line">            <span class="comment">//而push_back则是先将值拷贝出来，然后再把拷贝好的值移动到容器末尾</span></span><br><span class="line">            <span class="comment">//相较而言，emplace_back有更高的性能，因此更推荐使用emplace_back</span></span><br><span class="line">            <span class="comment">//但考虑到兼容性，也可以在一些场景使用push_back</span></span><br><span class="line">            vec.<span class="built_in">emplace_back</span>(node);</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//i，j双指针，一个正向读一个反向读，修改链表</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = vec.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">            vec[i]-&gt;next = vec[j];</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (i == j)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vec[j]-&gt;next = vec[i];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        vec[i]-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="722删除注释-2"><a class="markdownIt-Anchor" href="#722删除注释-2">#</a> (722) 删除注释</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">removeComments</span><span class="params">(vector&lt;string&gt;&amp; source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//答案</span></span><br><span class="line">        vector&lt;string&gt; res;</span><br><span class="line">        <span class="comment">//中间变量new_line</span></span><br><span class="line">        string new_line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//用布尔变量in_block来标记现在是否在块注释中</span></span><br><span class="line">        <span class="type">bool</span> in_block = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//遍历source</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; line : source) &#123;</span><br><span class="line">            <span class="comment">//遍历source中的string</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (in_block) &#123;</span><br><span class="line">                    <span class="comment">//如果现在在块注释中，进行如下判断：</span></span><br><span class="line">                    <span class="comment">//如果下一个字符不大于字符串长度(为了避免读取*/时，使用i+1越界)，并且接下来的两个字符是*/</span></span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; line.<span class="built_in">size</span>() &amp;&amp; line[i] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; line[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//那么退出块注释状态，将in_block设置为false</span></span><br><span class="line">                        in_block = <span class="literal">false</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果不在块注释内，进行如下判断：</span></span><br><span class="line">                    <span class="comment">//如果下一个字符不大于字符串长度(为了避免读取/*时，使用i+1越界)，并且接下来的两个字符是/*</span></span><br><span class="line">                    <span class="keyword">if</span> (i + <span class="number">1</span> &lt; line.<span class="built_in">size</span>() &amp;&amp; line[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; line[i + <span class="number">1</span>] == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//那么进去块注释状态，将in_block设置为true</span></span><br><span class="line">                        in_block = <span class="literal">true</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i + <span class="number">1</span> &lt; line.<span class="built_in">size</span>() &amp;&amp; line[i] == <span class="string">&#x27;/&#x27;</span> &amp;&amp; line[i + <span class="number">1</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        <span class="comment">//或者接下来的两个字符是//，那么直接结束该行即可</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果既不是块注释也不是行注释，那么把该字符加入到new_line当中</span></span><br><span class="line">                        new_line += line[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当一行字符遍历结束时，如果此时不在块注释内，并且new_line不为空，将其加入到答案里</span></span><br><span class="line">            <span class="keyword">if</span> (!in_block &amp;&amp; new_line != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(new_line);</span><br><span class="line">                <span class="comment">//重置new_line</span></span><br><span class="line">                new_line = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="23合并-k-个升序链表-2"><a class="markdownIt-Anchor" href="#23合并-k-个升序链表-2">#</a> (23) 合并 K 个升序链表</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//方法1：顺序合并</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//合并a,b两个链表</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode *a, ListNode *b)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果a链表为空，或者b链表为空</span></span><br><span class="line">        <span class="comment">//如果a为空返回b，如果b为空返回a</span></span><br><span class="line">        <span class="keyword">if</span> ((!a) || (!b)) <span class="keyword">return</span> a ? a : b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明ans的头节点head，与指向ans链表结尾的tail指针</span></span><br><span class="line">        <span class="comment">//使用aPtr和bPtr来操作a链表和b链表</span></span><br><span class="line">        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//只要aPtr或者bPtr任意一个指向空，那么就结束循环</span></span><br><span class="line">        <span class="keyword">while</span> (aPtr &amp;&amp; bPtr)&#123;</span><br><span class="line">            <span class="comment">//如果aPtr的值更小，那么将aPtr的节点赋给tail的next，并向后继续读a链表</span></span><br><span class="line">            <span class="keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val)&#123;</span><br><span class="line">                tail-&gt;next = aPtr;</span><br><span class="line">                aPtr = aPtr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果bPtr的更小，那么将bPtr的节点赋给tail的next，并向后继续读b链表</span></span><br><span class="line">                tail-&gt;next = bPtr;</span><br><span class="line">                bPtr = bPtr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新tail</span></span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环结束后，a链表为空或者b链表为空，将不为空的链表剩余部分归入ans</span></span><br><span class="line">        tail-&gt;next = (aPtr ? aPtr : bPtr);</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        ListNode *ans = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; lists.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="comment">//从前往后将ans链表和lists[i]看作两个链表的合并逐个调用mergeTwoLists</span></span><br><span class="line">            ans = <span class="built_in">mergeTwoLists</span>(ans, lists[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法2：分治合并</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//合并a,b两个链表</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode *a, ListNode *b)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果a链表为空，或者b链表为空</span></span><br><span class="line">        <span class="comment">//如果a为空返回b，如果b为空返回a</span></span><br><span class="line">        <span class="keyword">if</span> ((!a) || (!b)) <span class="keyword">return</span> a ? a : b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明ans的头节点head，与指向ans链表结尾的tail指针</span></span><br><span class="line">        <span class="comment">//使用aPtr和bPtr来操作a链表和b链表</span></span><br><span class="line">        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//只要aPtr或者bPtr任意一个指向空，那么就结束循环</span></span><br><span class="line">        <span class="keyword">while</span> (aPtr &amp;&amp; bPtr)&#123;</span><br><span class="line">            <span class="comment">//如果aPtr的值更小，那么将aPtr的节点赋给tail的next，并向后继续读a链表</span></span><br><span class="line">            <span class="keyword">if</span> (aPtr-&gt;val &lt; bPtr-&gt;val)&#123;</span><br><span class="line">                tail-&gt;next = aPtr;</span><br><span class="line">                aPtr = aPtr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果bPtr的更小，那么将bPtr的节点赋给tail的next，并向后继续读b链表</span></span><br><span class="line">                tail-&gt;next = bPtr;</span><br><span class="line">                bPtr = bPtr-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新tail</span></span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环结束后，a链表为空或者b链表为空，将不为空的链表剩余部分归入ans</span></span><br><span class="line">        tail-&gt;next = (aPtr ? aPtr : bPtr);</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">merge</span><span class="params">(vector&lt;ListNode*&gt; &amp;lists, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用左右指针与取中值，将链表组分为左半部分与右半部分，然后将二者作为整体进行递归归并</span></span><br><span class="line">        <span class="comment">//不停的左右划分，直到左右部分仅剩一个链表，则返回其本身即可</span></span><br><span class="line">        <span class="comment">//或者剩余两个链表，那么使用mergeTwoLists将其合并为一个链表并返回</span></span><br><span class="line">        <span class="comment">//最后收束归并链表组</span></span><br><span class="line">        <span class="keyword">if</span> (l == r) <span class="keyword">return</span> lists[l];</span><br><span class="line">        <span class="comment">//如果左值已经超过右值，那么返回空即可</span></span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="comment">//(l + r) &gt;&gt; 1即(l + r) / 2</span></span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">mergeTwoLists</span>(<span class="built_in">merge</span>(lists, l, mid), <span class="built_in">merge</span>(lists, mid + <span class="number">1</span>, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge</span>(lists, <span class="number">0</span>, lists.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="2048下一个更大的数值平衡数-2"><a class="markdownIt-Anchor" href="#2048下一个更大的数值平衡数-2">#</a> (2048) 下一个更大的数值平衡数</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nextBeautifulNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">        <span class="comment">//用于记录某个数的出现次数</span></span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> i = ++n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//flag用于标记是否找到平衡数，结束循环</span></span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//temp用于标记某一位数字是否出现过</span></span><br><span class="line">            map&lt;<span class="type">int</span>, <span class="type">bool</span>&gt; temp;</span><br><span class="line">            <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123; </span><br><span class="line">                <span class="comment">//如果出现0，说明该数字不符合要求（因为0的出现次数已经为1，不可能满足出现次数为0的要求）</span></span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//如果某数是第一次出现</span></span><br><span class="line">                <span class="keyword">if</span> (temp[i % <span class="number">10</span>] == <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="comment">//则将该数设置为已经出现过</span></span><br><span class="line">                    temp[i % <span class="number">10</span>] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//并将该数对应的map[]设置为需要出现的次数</span></span><br><span class="line">                    m[i % <span class="number">10</span>] = i % <span class="number">10</span> - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果该数已经出现过，则将其对应的map[] 需要出现的次数减1</span></span><br><span class="line">                    m[i % <span class="number">10</span>]--;</span><br><span class="line">                &#125;</span><br><span class="line">                i /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt; <span class="number">0</span>; j /= <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">//遍历map，如果均为0说明出现次数匹配，如果不为0，则说明有数字的出现次数不对，把flag调成false</span></span><br><span class="line">                <span class="keyword">if</span> (m[j % <span class="number">10</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//根据flag返回查找到的平衡数</span></span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">            n++;</span><br><span class="line">            i = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="comment">//遍历题目给出的n的范围（0 &lt;= n &lt;= 1000000)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        i = s.<span class="built_in">nextBeautifulNumber</span>(i);</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过上述算法计算出所有结果的可能，然后使用vector存储，用二分查找获取结果并返回，如下：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; balance &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">22</span>, <span class="number">122</span>, <span class="number">212</span>, <span class="number">221</span>, <span class="number">333</span>, <span class="number">1333</span>, <span class="number">3133</span>, <span class="number">3313</span>, <span class="number">3331</span>, <span class="number">4444</span>,</span><br><span class="line">        <span class="number">14444</span>, <span class="number">22333</span>, <span class="number">23233</span>, <span class="number">23323</span>, <span class="number">23332</span>, <span class="number">32233</span>, <span class="number">32323</span>, <span class="number">32332</span>,</span><br><span class="line">        <span class="number">33223</span>, <span class="number">33232</span>, <span class="number">33322</span>, <span class="number">41444</span>, <span class="number">44144</span>, <span class="number">44414</span>, <span class="number">44441</span>, <span class="number">55555</span>,</span><br><span class="line">        <span class="number">122333</span>, <span class="number">123233</span>, <span class="number">123323</span>, <span class="number">123332</span>, <span class="number">132233</span>, <span class="number">132323</span>, <span class="number">132332</span>,</span><br><span class="line">        <span class="number">133223</span>, <span class="number">133232</span>, <span class="number">133322</span>, <span class="number">155555</span>, <span class="number">212333</span>, <span class="number">213233</span>, <span class="number">213323</span>,</span><br><span class="line">        <span class="number">213332</span>, <span class="number">221333</span>, <span class="number">223133</span>, <span class="number">223313</span>, <span class="number">223331</span>, <span class="number">224444</span>, <span class="number">231233</span>,</span><br><span class="line">        <span class="number">231323</span>, <span class="number">231332</span>, <span class="number">232133</span>, <span class="number">232313</span>, <span class="number">232331</span>, <span class="number">233123</span>, <span class="number">233132</span>,</span><br><span class="line">        <span class="number">233213</span>, <span class="number">233231</span>, <span class="number">233312</span>, <span class="number">233321</span>, <span class="number">242444</span>, <span class="number">244244</span>, <span class="number">244424</span>,</span><br><span class="line">        <span class="number">244442</span>, <span class="number">312233</span>, <span class="number">312323</span>, <span class="number">312332</span>, <span class="number">313223</span>, <span class="number">313232</span>, <span class="number">313322</span>,</span><br><span class="line">        <span class="number">321233</span>, <span class="number">321323</span>, <span class="number">321332</span>, <span class="number">322133</span>, <span class="number">322313</span>, <span class="number">322331</span>, <span class="number">323123</span>,</span><br><span class="line">        <span class="number">323132</span>, <span class="number">323213</span>, <span class="number">323231</span>, <span class="number">323312</span>, <span class="number">323321</span>, <span class="number">331223</span>, <span class="number">331232</span>,</span><br><span class="line">        <span class="number">331322</span>, <span class="number">332123</span>, <span class="number">332132</span>, <span class="number">332213</span>, <span class="number">332231</span>, <span class="number">332312</span>, <span class="number">332321</span>,</span><br><span class="line">        <span class="number">333122</span>, <span class="number">333212</span>, <span class="number">333221</span>, <span class="number">422444</span>, <span class="number">424244</span>, <span class="number">424424</span>, <span class="number">424442</span>,</span><br><span class="line">        <span class="number">442244</span>, <span class="number">442424</span>, <span class="number">442442</span>, <span class="number">444224</span>, <span class="number">444242</span>, <span class="number">444422</span>, <span class="number">515555</span>,</span><br><span class="line">        <span class="number">551555</span>, <span class="number">555155</span>, <span class="number">555515</span>, <span class="number">555551</span>, <span class="number">666666</span>, <span class="number">1224444</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nextBeautifulNumber</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">upper_bound</span>(balance.<span class="built_in">begin</span>(), balance.<span class="built_in">end</span>(), n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法练习</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础</title>
    <url>/2023/02/22/Linux-Foundation/</url>
    <content><![CDATA[<h1 id="部分可能会查询的常用指令"><a class="markdownIt-Anchor" href="#部分可能会查询的常用指令">#</a> 部分可能会查询的常用指令</h1>
<p><strong><mark>该笔记中给出 [选项] 仅为部分常用选项</mark></strong></p>
<h2 id="杂项"><a class="markdownIt-Anchor" href="#杂项">#</a> <mark>杂项</mark></h2>
<p><strong>init [0123456]	切换运行级别</strong></p>
<p><strong>man [命令或配置文件]	获取相关帮助信息</strong></p>
<p><strong>help [命令]	查看命令的帮助信息</strong></p>
<p><strong>clear	清屏</strong></p>
<p><strong>Ctrl+C	终止指令</strong></p>
<p><strong>ps [选项]	查看进程。a 显示当前终端所有进程，u 以用户的格式显示进程，x 显示后台进程运行的参数</strong></p>
<p><strong>top [选项]	动态查看进程。P 以 CPU 使用率排序 (默认)，M 以内存使用率排序，N 以 PID 排序，q 退出。</strong></p>
<p><strong>netstat [选项]	查看系统网络情况，an 按一定顺序排列输出，p 显示哪个进程在调用</strong></p>
<p><strong>chkconfig	给每个服务的各个运行级别设置自动启动 / 关闭</strong></p>
<p><strong>ls -i:PORT	检查 PORT 端口号占用</strong></p>
<h2 id="文件目录类"><a class="markdownIt-Anchor" href="#文件目录类">#</a> <mark>文件目录类</mark></h2>
<p><strong>pwd	显示当前工作目录的绝对路径</strong></p>
<p><strong>ls [选项] [目录或是文件]	-a 显示当前目录所有的文件和目录，-l 使之纵向排布</strong></p>
<p><strong>cd [参数]	表示 change directory，切换目录。~ 回到自己的家目录 … 回到上一级目录</strong></p>
<p><strong>mkdir [选项] 要创建的目录	创建目录，-p 创建多级目录</strong></p>
<p><strong>rmdir [选项] 要删除的空目录	删除一个空目录</strong></p>
<p><strong>rm -rf 要删除的目录	删除一个非空的目录。-r 为递归删除整个文件夹，-f 为强制删除不提示</strong></p>
<p><strong>touch 文件名称	创建一个空文件</strong></p>
<p><strong>cp [选项] 源文件 指定目录	拷贝源文件到指定目录。-r 递归复制整个文件夹</strong></p>
<p><strong>\cp 为强制拷贝，覆盖同名文件，并且不提示</strong></p>
<p><strong>mv 旧文件名 新文件名	给当前路径下的文件重命名</strong></p>
<p><strong>mv 文件名 指定目录	将当前目录下文件移动到指定目录</strong></p>
<p><strong>cat [选项] 文件名	以只读的方式打开文件。-n 为显示行号</strong></p>
<p><strong>more 文件名	以全屏方式按页显示文本内容，空格为下一页，回车为下一行，q 表示离开 Ctrl+F 向下滚动一屏，Ctrl+B 返回上一屏，= 输出当前的行号，:f 输出文件名和当前的行号</strong></p>
<p><strong>less	类似于 more，但仅加载需要显示的内容，查看大型文件更有效率。pageup 上一页，pagedown 下一页。/ 关键字 查找内容。n 向下查找，N 向上查找</strong></p>
<p><strong>&gt;	输出重定向	会将原来的文件的内容覆盖。如 ll &gt;a.txt 若无该文件，则会创建</strong></p>
<p><strong>&gt;&gt;	追加内容	会在原来的文件中追加内容</strong></p>
<p><strong>echo [选项] “内容”	输出内容，可以配合 &gt; 或 &gt;&gt; 将内容写入文件，$PATH 可以输出环境变量的路径</strong></p>
<p><strong>head [选项] 文件	查看文件的前 10 行 (默认)。-n 5 可以查看前 5 行</strong></p>
<p><strong>tail [选项] 文件	查看文件尾，-f 实时追踪该文档的所有更新</strong></p>
<p><strong>ln -s [源文件或目录] [软链接名称]	给源文件创建一个软链接 (快捷方式)</strong></p>
<p><strong>history [指令个数]	查看执行过的指令，! 行号，执行该行号指令</strong></p>
<h2 id="时间日期类"><a class="markdownIt-Anchor" href="#时间日期类">#</a> <mark>时间日期类</mark></h2>
<p><strong>date [“+ 选项”]	显示当前日期，% Y 显示当前年份，% m 月份，% d 日，% H 时，% M 分，% S 秒</strong></p>
<p><strong>date -s 字符串时间	设置时间，如 date -s &quot;2020-12-13 21:46:06&quot;</strong></p>
<p><strong>cal [年份]	显示当前日历或显示某一年日历</strong></p>
<h2 id="搜索查找类"><a class="markdownIt-Anchor" href="#搜索查找类">#</a> <mark>搜索查找类</mark></h2>
<p>*<em>find [搜索范围] [选项]	查找文件，-name 按文件名搜索，-user 按文件拥有者查找，-size [+ 或 - 大小] 按文件大小查找，-name <em>. 后缀 使用通配符查找</em></em></p>
<p><strong>locate [文件]	查找文件，使用该指令前须使用 updatedb 创建 locate 数据库</strong></p>
<p><strong>grep [选项] 查找内容 源文件	过滤查找，-n 显示匹配行及行号，-i 忽略字母大小写</strong></p>
<p><strong>|	管道符，表示将前一个命令的处理结果输出传递给后面的命令处理</strong></p>
<p><strong>操作案例：cat hello.txt | grep -n xxx</strong></p>
<h2 id="压缩和解压缩类"><a class="markdownIt-Anchor" href="#压缩和解压缩类">#</a> <mark>压缩和解压缩类</mark></h2>
<p><em><em>gzip 文件	将文件压缩为</em>.gz (压缩时会删除源文件)</em>*</p>
<p><strong>gunzip 文件.gz	将 gz 文件解压缩</strong></p>
<p><strong>zip [选项] 压缩文件名 源文件 / 目录	压缩为.zip，-r 递归压缩 (压缩时保留源文件)</strong></p>
<p><strong>unzip [选项] 指定目录 源文件.zip	将源文件.zip 解压到指定目录</strong></p>
<p><strong>tar [选项] *.tar.gz [源文件 1 源文件 2]	打包指令，将源文件压缩成 *.tar.gz 文件。-c 产生打包文件，-v 显示详细信息，-f 指定压缩后的文件名，-z 打包同时压缩，-x 解包.tar 文件。注：zcvf (打包) 或 zxvf (解包) 通常同时使用</strong></p>
<h1 id="linux根目录下部分文件及其存储内容简单介绍"><a class="markdownIt-Anchor" href="#linux根目录下部分文件及其存储内容简单介绍">#</a> Linux 根目录下部分文件及其存储内容简单介绍</h1>
<p><strong><mark>加粗高亮为重要文件；高亮不加粗为操作难度较高的内核文件，不建议修改。</mark></strong></p>
<p><strong><mark>boot</mark></strong>	// 存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</p>
<p><strong><mark>bin</mark></strong>	//Binary 的缩写，这个目录存放着最经常使用的命令</p>
<p><strong><mark>root</mark></strong>	// 该目录为系统管理员，也称作超级权限者的用户主目录</p>
<p><strong><mark>etc</mark></strong>	// 所有的系统管理所需要的配置文件和子目录</p>
<p><strong><mark>home</mark></strong>	// 存放普通用户的主目录，在 Linux 中每个用户都又一个自己的目录，一般该目录名以用户的账号命名</p>
<p><strong><mark>usr</mark></strong>	// 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 Windows 下的 program files 目录</p>
<p><strong><mark>media</mark></strong>	//Linux 系统会自动识别一些设备，例如 U 盘、光驱等，当识别后，Linux 会把识别的设备挂载到这个目录</p>
<p><strong><mark>mnt</mark></strong>	// 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载到 /mnt/ 上，然后进入该目录就可以查看里面的内容了。</p>
<p><strong><mark>usr/local</mark></strong>	// 这是另一个给主机额外安装软件所安装的目录。一般是通过编译码方式安装的程序。</p>
<p><strong><mark>var</mark></strong>	// 这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</p>
<p><mark>proc</mark>	// 这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p>
<p><mark>srv</mark>	//service 缩写，该目录存放一些服务启动之后需要提取的数据</p>
<p><mark>sys</mark>	<a href="//xn--linux2-h02mp66y.xn--6-0n6a4e06lm9bi7a15uijn25szv6aea">// 这是 linux2.6 内核的一个很大的变化</a>。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs。</p>
<p>dev	// 类似于 Windows 的设备管理器，把所有的硬件用文件的形式存储。</p>
<p>lib	// 系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p>
<p>lib64	// 库文件</p>
<p>opt	// 这是给主机额外安装软件所摆放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空</p>
<p>sbin	//Super User Binary，这里存放的是系统管理员使用的系统管理程序</p>
<p>selinux	//SELinux 是一种安全子系统，它能控制程序只能访问特定文件。</p>
<p>tmp	// 这个目录是用来存放一些临时文件的</p>
<p>lost+found	// 这个目录一般情况下是空，当系统非法关机后，这里就存放了一些文件。</p>
<p><strong><mark>重点：</mark></strong></p>
<p><strong>1.Linux 的目录中有且只有一个根目录。是 /</strong></p>
<p><strong>2.Linux 的各个目录存放的内容是规划好的，不要乱放文件。</strong></p>
<p><strong>3.Linux 是以文件的形式管理设备的，因此 Liux 系统，一切皆文件。</strong></p>
<p><strong>4.Linux 的各个文件目录下存放什么内容，必须有一个认识。</strong></p>
<h1 id="使用xshell和xftp"><a class="markdownIt-Anchor" href="#使用xshell和xftp">#</a> 使用 XSHELL 和 XFTP</h1>
<p>1. 需要打开 Linux 的 SSHD 服务。服务器会开放默认端口 22 以供远程登录。</p>
<p>SSHD 开启方法：</p>
<p>Linux 系统下，使用 root 账户</p>
<p>setup</p>
<p>System servers</p>
<p><strong>XSHELL 设置：协议使用 SSH 协议，端口为默认端口 22，地址在服务器使用 ifconfig 查询</strong></p>
<p><strong>XFTP 设置：协议使用 SFTP，端口为默认端口 22，地址同上</strong></p>
<h1 id="vi和vim编辑器"><a class="markdownIt-Anchor" href="#vi和vim编辑器">#</a> Vi 和 Vim 编辑器</h1>
<p><strong>Vi 和 Vim 的三种常见模式：</strong></p>
<p>1. 正常模式</p>
<p>可使用快捷键</p>
<p>2. 编辑模式 / 插入模式</p>
<p>正常模式下，按下 i,Io,O,a,A,r,R 等任何一个字母后进入编辑模式。</p>
<p>3. 命令行模式</p>
<p>插入模式下按 Esc 进入正常模式，按：或 / 进入命令行模式</p>
<p><strong>Vi 和 Vim 常用的快捷键（更多自行查询）</strong></p>
<p>yy，复制当前行，并向下粘贴。5yy 即粘贴 5 行。</p>
<p>dd，删除当前行。5dd 即删除当前行与向下的 4 行。</p>
<p>命令行下 / 关键字，查找第一个关键字，输入 n 查找下一个。</p>
<p>命令行下 set nu 开启行号，set nonu 关闭行号。</p>
<p>gg 前往首行，G 前往末行。注意这些都是在正常模式下的快捷键。</p>
<p>输入 u 撤销编辑内容到上次正常模式。</p>
<p>正常模式下，行号，shift+g 跳转到该行号</p>
<h1 id="linux的关机-重启指令与用户的登录与注销"><a class="markdownIt-Anchor" href="#linux的关机-重启指令与用户的登录与注销">#</a> Linux 的关机、重启指令与用户的登录与注销</h1>
<p>shutdown -h now	表示立即关机</p>
<p>shutdown -h 1	表示 1 分钟后关机</p>
<p>shutdown -r now	表示立即重启</p>
<p>halt	停机，效果等价于关机</p>
<p>reboot	重启系统</p>
<p>sync	把内存数据同步到磁盘上（建议关机或重启前进行数据保存）</p>
<p>Linux 系统下通常不使用 root 账户登录，而是使用普通用户登录，再使用 su - 用户名进行登录</p>
<p>使用 logout 注销当前账户	logout 在图形运行级别无效，在运行级别 3 下有效</p>
<h1 id="用户管理"><a class="markdownIt-Anchor" href="#用户管理">#</a> 用户管理</h1>
<h2 id="部分指令"><a class="markdownIt-Anchor" href="#部分指令">#</a> 部分指令</h2>
<p>1.Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>
<p>2.Linux 的用户需要至少属于一个组。</p>
<p><strong>添加用户 ([] 代表选填)：</strong></p>
<p><strong>useradd [] 用户名</strong></p>
<p>此时会在 home 下创建（用户名）家目录</p>
<p>若不指定组则自动创建同名组，并将用户归属于该组</p>
<p><strong>使用 user -g 组名 用户名	创建一个用户，并给他指定组</strong></p>
<p>若组不存在，则创建该组</p>
<p><strong>使用 useradd -d 指定目录 用户名	来指定用户的家目录创建位置</strong></p>
<p><strong>使用 passwd 用户名	给用户设置密码</strong>	注：设置密码过于简单会失败</p>
<p><strong>使用 userdel 用户名	来删除用户，该命令仅删除用户，不删除用户家目录</strong></p>
<p><strong>使用 userdel -r 用户名	删除用户及其家目录</strong></p>
<p><strong>使用 id 用户名	来查询用户信息</strong></p>
<p>获得信息 uid gid groups，为用户 id，组 id，和其所属组。</p>
<p><strong>使用 su - 用户名	可以切换用户</strong></p>
<p><strong>使用 exit 可以退回到原用户</strong></p>
<p><strong>使用 whoami	可以查看当前使用的用户</strong></p>
<h2 id="用户组"><a class="markdownIt-Anchor" href="#用户组">#</a> 用户组</h2>
<p><strong>使用 groupadd 组名	来创建一个组</strong></p>
<p><strong>使用 groupdel 组名	来删除一个组</strong></p>
<p><strong>使用 usermod -g 组名 用户名	修改用户的组</strong></p>
<h2 id="用户信息和组信息的配置文件"><a class="markdownIt-Anchor" href="#用户信息和组信息的配置文件">#</a> 用户信息和组信息的配置文件</h2>
<p>用户配置文件	/etc/passwd</p>
<p>组配置文件	/etc/group</p>
<p>口令配置文件 (加密)	/etc/shadow</p>
<h1 id="运行级别共7级"><a class="markdownIt-Anchor" href="#运行级别共7级">#</a> 运行级别 (共 7 级)</h1>
<p>0：关机</p>
<p>1：单用户 (找回丢失密码)</p>
<p>2：多用户无网络服务</p>
<p>3：多用户有网络服务</p>
<p>4：暂空</p>
<p>5：图形界面</p>
<p>6：重启</p>
<p>如何找回丢失的 root 密码：</p>
<p>1. 进入到单用户模式（单用户模式登录不需要输入密码）</p>
<p>2. 修改 root 密码</p>
<p>在选择内核时输入 e，进入 GRUB 引导，选择 kernel 行，切换运行级别为 1，随后按 b</p>
<h1 id="组管理和权限管理"><a class="markdownIt-Anchor" href="#组管理和权限管理">#</a> 组管理和权限管理</h1>
<h2 id="组管理"><a class="markdownIt-Anchor" href="#组管理">#</a> 组管理</h2>
<p>文件：</p>
<p>所有者 (拥有者)</p>
<p>所在组 (拥有组)</p>
<p>其他组</p>
<p><strong>ls -ahl	查看文件所有者</strong></p>
<p><strong>chown 用户名：组名 文件名	修改文件所有者、所有组，: 组名可以不改，-R 递归修改</strong></p>
<p><strong>chgrp 组名 文件名	修改文件所在组，-R 递归修改</strong></p>
<p><strong>usermod -g 组名 用户名	改变用户的组</strong></p>
<p><strong>usermod -d 目录名 用户名	改变该用户的初始登录目录</strong></p>
<h2 id="权限管理重要"><a class="markdownIt-Anchor" href="#权限管理重要">#</a> 权限管理 ==(重要！！)==</h2>
<p>查看一个文件时：</p>
<p><strong><mark>-rw-r–r--. 1 root root 6 12 月 13 22:34 ok.txt</mark></strong></p>
<p><strong>其中第 0 位 - 表示文件类型：- 普通文件，d: 目录，l: 软链接，c: 字符设备【键盘，鼠标】，b: 块文件【硬盘】</strong></p>
<p><strong>第 1-3 位中 rw - 表示文件所有者拥有的权限，r 为读，w 为写，x 为执行，- 为无权限</strong></p>
<p><strong>第 4-6 位中 r–表示文件所在组的用户的权限，同上</strong></p>
<p><strong>第 7-9 位中 r–表示文件的其他组的用户权限，同上</strong></p>
<p><strong><mark>1</mark></strong>，<strong>若为文件，表示硬链接，若为目录，则表示该目录中子目录的个数</strong></p>
<p><strong>第一个 root 为所有者，第二个 root 为所有组</strong></p>
<p><strong><mark>6</mark> 表示文件大小，如果是目录，则文件大小为 4096</strong></p>
<p><strong>12 月 13 22:34 表示文件最后的修改时间</strong></p>
<p><strong><mark>对文件有 w 权限，不代表能删除文件，必须有对其目录 w 的权限</mark></strong></p>
<p><strong>w 对于目录表示可以在目录内创建，删除，重命名目录</strong></p>
<p><strong>x 对于目录表示可以进入该目录</strong></p>
<p><strong>chmod	修改文件或目录的权限</strong></p>
<p><strong>u: 所有者，g: 所有组，o: 其他人，a: 所有人 (ugo 总和)</strong></p>
<p><strong><mark>user			group		other		all</mark></strong></p>
<p><strong>使用 +、-、= 变更权限</strong>，例：</p>
<p><strong>chmod u=rwx,g=rx,o=x 文件名 / 目录名</strong></p>
<p><strong>chmod o+w 文件名 / 目录名</strong></p>
<p><strong>chmod a-x 文件名 / 目录名</strong></p>
<p><strong>也可以使用数字更改权限</strong></p>
<p><strong><mark>r=4	w=2	x=1	rwx=4+2+1=7</mark></strong></p>
<p><strong>如：chmod 740 file	即给所有者 rwx，给所有组 r–，给其他组 —</strong></p>
<h1 id="crond任务调度"><a class="markdownIt-Anchor" href="#crond任务调度">#</a> crond 任务调度</h1>
<p><strong>crontab [选项]</strong></p>
<p><strong>-e 编辑 crontab 定时任务</strong></p>
<p><strong>-l 查询 crontab 任务</strong></p>
<p><strong>-r 删除当前用户所有的 crontab 任务</strong></p>
<p><strong>service crond restart	重启任务调度</strong></p>
<p><strong>crontab -e 进入编辑界面</strong></p>
<p>**<mark>*/1 * * * * ls -l /etc/ &gt;&gt; /temp/to.txt</mark>** 每小时的每分钟执行 ls -l /etc/ &gt;&gt; /tmp/to.txt 命令</p>
<p><em><em>== 第一个</em>	一小时当中的第几分钟	范围 0-59==</em>*</p>
<p><em><em>== 第二个</em>	一天当中的第几个小时	范围 0-23==</em>*</p>
<p><em><em>== 第三个</em>	一个月当中的第几天	范围 1-31==</em>*</p>
<p><em><em>== 第四个</em>	一年当中的第几个月	范围 1-12==</em>*</p>
<p><em><em>== 第五个</em>	一周当中的星期几	范围 0-7 (0 和 7 都代表星期日)==</em>*</p>
<p><strong><mark>*	代表任何时间</mark></strong></p>
<p><strong><mark>,	代表不连续的时间，如 &quot;0 8,12,16 * * * 命令&quot;, 代表每天的 8 点 0 分，12 点 0 分，16 点 0 分都执行一次命令</mark></strong></p>
<p><strong><mark>-	代表连续的时间范围，如 &quot;0 5 * * 1-6 命令&quot;, 代表周一到周六的 5 点 0 分执行命令</mark></strong></p>
<p><strong><mark>*/n	代表每个多久执行一次，如 &quot;*/10 * * * * 命令&quot;, 代表每隔 10 分钟就执行一遍命令</mark></strong></p>
<h1 id="linux磁盘分区与挂载"><a class="markdownIt-Anchor" href="#linux磁盘分区与挂载">#</a> Linux 磁盘分区与挂载</h1>
<p>分区方式包含:</p>
<p>1.mbr 分区 (传统)</p>
<p>最多支持 4 个主分区</p>
<p>系统智能安装在主分区</p>
<p>扩展分区要占一个主分区</p>
<p>MBR 最大只支持 2TB，但拥有最好的兼容性</p>
<p>2.gpt 分区</p>
<p>支持无限多个主分区 (但操作系统可能限制，比如 Windows 下最多 128 个分区)</p>
<p>最大支持 18EB (18*1024*1024TB) 的大容量</p>
<p>windows7 64 位以后支持 gpt</p>
<p>Linux 的分区是挂载 (mount) 到目录上的，卸载为 (unmount)。</p>
<p>Linux 硬盘分 IDE 硬盘和 SCSI 硬盘，目前基本上是 SCSI 硬盘。</p>
<p>对于 IDE 硬盘，驱动器标识符为 &quot;hdx~&quot;，其中 &quot;hd&quot; 表明分区所在设备的类型，这里指 IDE 硬盘，“x&quot;为盘号，(a 为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘)，”~&quot; 代表分区，前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区。例，hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区，hdb2 表示为第二个 IDE 硬盘上的第二个主分区或扩展分区。</p>
<p>对于 SCSI 硬盘则标识为 &quot;sdx~&quot;，SCSI 硬盘使用 &quot;sd&quot; 来表示分区所在设备的类型的，其余则和 IDE 硬盘一样</p>
<p><strong>lsblk -f	查看系统的分区和挂载的情况</strong></p>
<h1 id="yum"><a class="markdownIt-Anchor" href="#yum">#</a> yum</h1>
<p>yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p>
<h1 id="shell重要"><a class="markdownIt-Anchor" href="#shell重要">#</a> Shell**<mark>(重要！！)</mark>**</h1>
<p>Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序。</p>
<h2 id="shell脚本格式"><a class="markdownIt-Anchor" href="#shell脚本格式">#</a> Shell 脚本格式</h2>
<p>1. 脚本以 #!/bin/bash 开头</p>
<p>2. 脚本需要有可执行权限</p>
<p>3. 可以用 #来写注释</p>
<p>4. 多行注释开头	:&lt;&lt;!	结尾	!</p>
<p>5.shell 变量定义时不要写空格</p>
<h2 id="shell的变量"><a class="markdownIt-Anchor" href="#shell的变量">#</a> shell 的变量</h2>
<p>1.Linux Shell 中的变量分为，系统变量和用户自定义变量。</p>
<p>2. 系统变量：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mi>O</mi><mi>M</mi><mi>E</mi><mtext>、</mtext></mrow><annotation encoding="application/x-tex">HOME、</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord cjk_fallback">、</span></span></span></span>PWD、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>H</mi><mi>E</mi><mi>L</mi><mi>L</mi><mtext>、</mtext></mrow><annotation encoding="application/x-tex">SHELL、</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">L</span><span class="mord mathnormal">L</span><span class="mord cjk_fallback">、</span></span></span></span>USER 等等，比如 echo $HOME</p>
<p>3. 显示当前 shell 中所有变量：set</p>
<p>4. 使用变量时前面要加 $</p>
<h2 id="shell变量的定义"><a class="markdownIt-Anchor" href="#shell变量的定义">#</a> shell 变量的定义</h2>
<p><strong><mark>基本语法：</mark></strong></p>
<p><strong>1. 定义变量：变量 = 值</strong></p>
<p><strong>2. 撤销变量：unset 变量</strong></p>
<p><strong>3. 声明静态变量：readonly 变量，注意：不能 unset</strong></p>
<p><strong>4. 可以把一个变量提升为全局变量，可供其他 shell 程序使用</strong></p>
<p><strong><mark>变量定义规则：</mark></strong></p>
<p><strong>1. 变量名称可以由字母、数字与下划线组成，但不能以数字开头</strong></p>
<p><strong>2. 等号两侧不能有空格</strong></p>
<p><strong>3. 变量名称一般习惯为大写</strong></p>
<p><strong><mark>将命令的返回值赋给变量</mark></strong></p>
<p><strong>1.A=`ls -la`	反引号，运行里面的命令，并把结果返回给变量 A</strong></p>
<p><strong>2.A=$(ls -la)	等价于反引号</strong></p>
<p><strong><mark>设置环境变量语法与注意</mark></strong></p>
<p><strong>1.export 变量名 = 变量值	将 shell 变量输出为环境变量</strong></p>
<p><strong>2.source 配置文件	让修改后的配置信息立即生效 (source /etc/profile)</strong></p>
<p><strong>3.echo $ 变量名	查询环境变量的值</strong></p>
<p><strong>注意：在输出 JAVA_HOME 环境变量前，需要让其生效</strong></p>
]]></content>
      <categories>
        <category>Linux系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+CSS</title>
    <url>/2023/02/22/HTML-CSS/</url>
    <content><![CDATA[<h1 id="html的概念"><a class="markdownIt-Anchor" href="#html的概念">#</a> HTML 的概念</h1>
<p>HTML (Hyper Text Markup Language)	超文本标记语言</p>
<h1 id="html语法"><a class="markdownIt-Anchor" href="#html语法">#</a> <mark>HTML 语法</mark></h1>
<p><mark><strong>&lt;关键词&gt; 内容 &lt;/ 关键词 (结束)&gt;</strong></mark></p>
<p><strong>例如：</strong></p>
<p><strong>&lt;strong&gt; 加粗显示 &lt;/strong&gt;</strong></p>
<p><mark><strong>注释</strong></mark></p>
<p><strong>&lt;!-- 注释内容 --&gt;</strong></p>
<h2 id="关键词"><a class="markdownIt-Anchor" href="#关键词">#</a> <mark><strong>关键词</strong></mark></h2>
<p><strong>br	换行</strong></p>
<p><strong>hr	水平分割线</strong></p>
<p><strong>h1~h6	1~6 级标题</strong></p>
<p><strong>p	段落</strong></p>
<p><strong>/</strong>*</p>
<p><strong>b = strong	加粗</strong></p>
<p><strong>u = ins	下划线</strong></p>
<p><strong>i = em	倾斜</strong></p>
<p><strong>s = del	删除线</strong></p>
<p>*<strong>/	// 后者突出重要性的强调语境 (视觉效果无差别)</strong></p>
<h2 id="媒体标签"><a class="markdownIt-Anchor" href="#媒体标签">#</a> <mark><strong>媒体标签</strong></mark></h2>
<p><strong><mark>&lt;img&gt;	在网页中显示图片，以下为 img 属性，每个属性之间用空格隔开</mark></strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">src=&quot; &quot;</td>
<td style="text-align:center">填写图片路径</td>
</tr>
<tr>
<td style="text-align:center">alt=&quot; &quot;</td>
<td style="text-align:center">填写图片加载失败时的替换文本</td>
</tr>
<tr>
<td style="text-align:center">title=&quot; &quot;</td>
<td style="text-align:center">为鼠标悬停提示文字</td>
</tr>
<tr>
<td style="text-align:center">width=&quot; &quot;</td>
<td style="text-align:center">图片宽度，单位为像素  (仅填写其中一个时，会等比例缩放)</td>
</tr>
<tr>
<td style="text-align:center">height=&quot; &quot;</td>
<td style="text-align:center">图片高度，单位为像素  (仅填写其中一个时，会等比例缩放)</td>
</tr>
</tbody>
</table>
<p><strong><mark>&lt;audio&gt;&lt;/audio&gt;	在网页中插入音频，以下为 audio 属性</mark></strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">src=&quot; &quot;</td>
<td style="text-align:center">同上</td>
</tr>
<tr>
<td style="text-align:center">controls</td>
<td style="text-align:center">显示音频播放控件</td>
</tr>
<tr>
<td style="text-align:center">autoplay</td>
<td style="text-align:center">自动播放 (部分浏览器不支持)</td>
</tr>
<tr>
<td style="text-align:center">loop</td>
<td style="text-align:center">循环播放</td>
</tr>
</tbody>
</table>
<p><strong>注：音频标签目前支持三种格式：MP3、Wav、Ogg</strong></p>
<p><strong><mark>&lt;video&gt;	在网页中显示视频，以下为 video 属性</mark></strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">src=&quot; &quot;</td>
<td style="text-align:center">同上</td>
</tr>
<tr>
<td style="text-align:center">controls</td>
<td style="text-align:center">同上</td>
</tr>
<tr>
<td style="text-align:center">autoplay</td>
<td style="text-align:center">同上     (Google 浏览器中需要配合 muted 实现静音播放)</td>
</tr>
<tr>
<td style="text-align:center">loop</td>
<td style="text-align:center">同上</td>
</tr>
</tbody>
</table>
<p><strong>注：视频标签目前支持三种格式：MP4、WebM、Ogg</strong></p>
<h2 id="链接标签"><a class="markdownIt-Anchor" href="#链接标签">#</a> <mark><strong>链接标签</strong></mark></h2>
<p><strong>&lt;a href=&quot;./ 目标网页.html&quot;&gt; 文字提示 &lt;/a&gt;	以下为超链接属性</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">target=&quot; &quot;</td>
<td style="text-align:center">若填写_self (默认值)，覆盖原网页跳转，若填写_blank, 保留原网页跳转</td>
</tr>
<tr>
<td style="text-align:center">href=&quot; &quot;</td>
<td style="text-align:center">填写目标网页路径</td>
</tr>
</tbody>
</table>
<p><strong>注：跳转网页未写好 (不知道要跳转到哪里) 时，href 里填写 #(空链接)</strong></p>
<h2 id="列表标签"><a class="markdownIt-Anchor" href="#列表标签">#</a> <mark><strong>列表标签</strong></mark></h2>
<p><strong>无序列表：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ul</td>
<td style="text-align:center">表示无序列表的整体，用于包裹 li 标签</td>
</tr>
<tr>
<td style="text-align:center">li</td>
<td style="text-align:center">表示无序列表的每一项，用于包含每一行的内容</td>
</tr>
</tbody>
</table>
<p><strong>显示特点：列表的每一项前默认显示圆点标识</strong></p>
<p><strong>注：ul 标签中只允许包含 li 标签，li 标签可以包含任意内容</strong></p>
<p><strong>有序列表：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ol</td>
<td style="text-align:center">表示有序里列表的整体，用于包裹 li 标签</td>
</tr>
<tr>
<td style="text-align:center">li</td>
<td style="text-align:center">表示有序列表的每一项，用于包含每一行的内容</td>
</tr>
</tbody>
</table>
<p><strong>显示特点：列表的每一项前默认显示序号标识</strong></p>
<p><strong>注：ol 标签中只允许包含 li 标签，li 标签可以包含任意内容</strong></p>
<p><strong>自定义列表：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">dl</td>
<td style="text-align:center">表示自定义列表的整体，用于包裹 dt/dd 标签</td>
</tr>
<tr>
<td style="text-align:center">dt</td>
<td style="text-align:center">表示自定义列表的主题</td>
</tr>
<tr>
<td style="text-align:center">dd</td>
<td style="text-align:center">表示自定义列表的针对主题的每一项内容</td>
</tr>
</tbody>
</table>
<p><strong>显示特点：dd 前会默认显示缩进效果</strong></p>
<p><strong>注：dl 标签只允许包含 dt/dd 标签，dt/dd 标签可以包含任意内容</strong></p>
<h2 id="表格标签"><a class="markdownIt-Anchor" href="#表格标签">#</a> <mark><strong>表格标签</strong></mark></h2>
<p><strong>基本标签：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">table</td>
<td style="text-align:center">表格整体，可用于包裹多个 tr</td>
</tr>
<tr>
<td style="text-align:center">tr</td>
<td style="text-align:center">表格每行，可用于包裹 td</td>
</tr>
<tr>
<td style="text-align:center">td</td>
<td style="text-align:center">表格单元格，可用于包裹内容</td>
</tr>
</tbody>
</table>
<p><strong>注：标签嵌套：table &gt; tr &gt; td</strong></p>
<p><strong>表格属性：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">属性值</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">border</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">边框宽度</td>
</tr>
<tr>
<td style="text-align:center">width</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">表格宽度</td>
</tr>
<tr>
<td style="text-align:center">height</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">表格高度</td>
</tr>
</tbody>
</table>
<p><strong>注：实际开发时针对于样式效果<mark>推荐使用 CSS 设置</mark></strong></p>
<p><strong>表格其他标签：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">作用</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">caption</td>
<td style="text-align:center">表格大标题</td>
<td style="text-align:center">表示表格整体大标题，默认在表格整体顶部居中显示</td>
</tr>
<tr>
<td style="text-align:center">th</td>
<td style="text-align:center">表头单元格</td>
<td style="text-align:center">表示一列小标题，通常用于表格第一行，默认内部文字加粗居中</td>
</tr>
</tbody>
</table>
<p><strong>注：caption 标签写在 table 标签内部，th 标签写在 tr 标签内部</strong></p>
<p><strong>表格结构：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">thead</td>
<td style="text-align:center">表格头</td>
</tr>
<tr>
<td style="text-align:center">tbody</td>
<td style="text-align:center">表格内容</td>
</tr>
<tr>
<td style="text-align:center">tfoot</td>
<td style="text-align:center">表格底</td>
</tr>
</tbody>
</table>
<p><strong>注：不会产生网页视觉改变，但可以提高浏览器解析速度</strong></p>
<p><strong>合并单元格：</strong></p>
<p><strong>给保留的单元格添加属性：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">属性值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">rowspan</td>
<td style="text-align:center">合并单元格的个数</td>
<td style="text-align:center">跨行合并，将多行的单元格垂直合并</td>
</tr>
<tr>
<td style="text-align:center">colspan</td>
<td style="text-align:center">合并单元格的个数</td>
<td style="text-align:center">跨列合并，将多列的单元格垂直合并</td>
</tr>
</tbody>
</table>
<p><strong>注：同结构下才可合并，不可跨结构合并 (不可跨 thead、tbody、tfoot)</strong></p>
<h2 id="表单标签"><a class="markdownIt-Anchor" href="#表单标签">#</a> <mark><strong>表单标签</strong></mark></h2>
<p><strong>写登陆、注册、搜索功能时使用</strong></p>
<p><mark><strong>表单域标签</strong></mark></p>
<table>
<thead>
<tr>
<th style="text-align:center">&lt;form action=&quot; &quot;&gt;&lt;/form&gt;</th>
<th style="text-align:center">action 中填写数据提交的地址，此为表单的父标签</th>
</tr>
</thead>
</table>
<p><strong><mark>input 标签</mark>可以通过不同的 type=&quot; &quot; 属性值，展示不同的效果：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">type 属性值</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">属性名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">text</td>
<td style="text-align:center">文本框，用于输入单行文本</td>
<td style="text-align:center">placeholder</td>
<td style="text-align:center">占位符。提示用户输入内容的文本</td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">password</td>
<td style="text-align:center">密码框，用于输入密码</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">radio</td>
<td style="text-align:center">单选框，用于多选一</td>
<td style="text-align:center">name</td>
<td style="text-align:center">分组。有相同 name 属性值的单选框为一组，一组中同时只能有一个被选中</td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">checkbox</td>
<td style="text-align:center">多选框，用于多选多</td>
<td style="text-align:center">checked</td>
<td style="text-align:center">默认选中</td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">file</td>
<td style="text-align:center">文件选择，用于之后上传文件</td>
<td style="text-align:center">multiple</td>
<td style="text-align:center">多文件选择</td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">submit</td>
<td style="text-align:center">提交按钮，用于提交</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">reset</td>
<td style="text-align:center">重置按钮，用于重置</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">input</td>
<td style="text-align:center">button</td>
<td style="text-align:center">普通按钮，默认无功能，需配合 js 使用</td>
<td style="text-align:center">value</td>
<td style="text-align:center">给按钮添加提示文字</td>
</tr>
</tbody>
</table>
<p><strong>注：button 可作为一个标签使用，作为标签使用时，谷歌浏览器默认为提交按钮，可以用 type 属性修改其功能。button 为双标签，可以用于包裹文字、图片等内容</strong></p>
<p><strong><mark>selct 标签</mark>下拉菜单：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">select</td>
<td style="text-align:center">下拉菜单的整体</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">option</td>
<td style="text-align:center">下拉菜单的每一项</td>
<td style="text-align:center">selected</td>
<td style="text-align:center">默认选中</td>
</tr>
</tbody>
</table>
<p><strong><mark>textarea 文本域标签</mark>可在网页中提供可输入多行文本的表单控件</strong></p>
<p><strong>可以使用 cols、rows 属性修改文本域内可见列和可见行、但一般使用 CSS 修改</strong></p>
<p><strong>注：右下角可以拖拽改变大小、可以通过 CSS 禁用</strong></p>
<p><strong><mark>label 标签</mark>可以用于绑定内容与表单标签的关系</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">label</td>
<td style="text-align:center">for</td>
<td style="text-align:center">for 中填写的内容绑定   属性 id 填写内容相同的标签</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><strong>也可以将 for 属性删除，使用 label 标签将需要绑定的内容直接包裹</strong></td>
</tr>
</tbody>
</table>
<h2 id="语义化标签"><a class="markdownIt-Anchor" href="#语义化标签">#</a> <mark><strong>语义化标签</strong></mark></h2>
<table>
<thead>
<tr>
<th style="text-align:center">标签名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">div</td>
<td style="text-align:center">无语义标签，内容独占一行、配合 css 使用</td>
</tr>
<tr>
<td style="text-align:center">span</td>
<td style="text-align:center">无语义标签，内容不换行、配合 css 使用</td>
</tr>
<tr>
<td style="text-align:center">---------</td>
<td style="text-align:center">以下标签为手机网页使用。</td>
</tr>
<tr>
<td style="text-align:center">header</td>
<td style="text-align:center">网页头部</td>
</tr>
<tr>
<td style="text-align:center">nav</td>
<td style="text-align:center">网页导航</td>
</tr>
<tr>
<td style="text-align:center">footer</td>
<td style="text-align:center">网页底部</td>
</tr>
<tr>
<td style="text-align:center">aside</td>
<td style="text-align:center">网页侧边栏</td>
</tr>
<tr>
<td style="text-align:center">section</td>
<td style="text-align:center">网页区块</td>
</tr>
<tr>
<td style="text-align:center">article</td>
<td style="text-align:center">网页文章</td>
</tr>
</tbody>
</table>
<p><mark>字符实体</mark></p>
<p>注：网页不识别代码中连续的空格， 若要实现，需使用 &amp; nbsp</p>
<h1 id="html结构"><a class="markdownIt-Anchor" href="#html结构">#</a> HTML 结构</h1>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>		<span class="comment">&lt;!--文档类型声明，告诉浏览器该网页的HTML版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>	<span class="comment">&lt;!--语言，en为英文，中文为zh-CN--&gt;</span></span><br><span class="line">​	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>	<span class="comment">&lt;!--规定网页的字符编码.UTF-8(万国码),GB2312:6000+汉字，GBK:20000+汉字--&gt;</span> </span><br><span class="line">    </span><br><span class="line">    	<span class="comment">&lt;!--下面这行代码用于兼容IE浏览器--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    	<span class="comment">&lt;!--content&quot;宽度=设备宽度&quot;，移动端需要设置--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    	<span class="comment">&lt;!--title，description与Keywords为SEO三大标签(用于优化在搜索引擎中的排名)--&gt;</span></span><br><span class="line">​		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;此处填写对网页的描述，用于提升在搜索引擎中的排名&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;此处填写网页关键词，用于提升在搜索引擎中的排名&quot;</span>&gt;</span></span><br><span class="line">    	</span><br><span class="line">    	<span class="comment">&lt;!--网站标题旁的小图标，通常放置于根目录--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="comment">/*Css内容*/</span></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">​	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">​	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">​		网页内容主体</span><br><span class="line">​	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="css的概念"><a class="markdownIt-Anchor" href="#css的概念">#</a> CSS 的概念</h1>
<p>CSS：层叠样式表 (Cascading style sheets)</p>
<p>CSS 的作用：给页面中的 HTML 标签设置样式</p>
<h1 id="css语法"><a class="markdownIt-Anchor" href="#css语法">#</a> <mark>CSS 语法</mark></h1>
<p><strong>内嵌式：将 CSS 写在 style 标签中，style 标签一般写在 head 标签内，title 标签下面</strong></p>
<p><strong>外联式：将 CSS 写在一个单独的.css 文件中，在 title 标签下使用 link 标签引入</strong></p>
<p><mark>注：link rel=“此处填入 html 与 css 的关系 (为：stylesheet  样式表)” href=“此处填写 css 文件路径”</mark></p>
<p><strong>行内式：将 CSS 写在标签内的 style 属性内，通常配合 JS 使用</strong></p>
<h2 id="选择器写法"><a class="markdownIt-Anchor" href="#选择器写法">#</a> <mark>选择器写法</mark></h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*标签选择器写法*/</span></span><br><span class="line">标签名&#123;<span class="comment">/*使用要改变的html相同的标签*/</span></span><br><span class="line">    <span class="attribute">color</span>: red;<span class="comment">/*此为CSS属性*/</span></span><br><span class="line">    <span class="comment">/*color是属性名，red为属性值*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*类选择器写法*/</span></span><br><span class="line">.类名&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">写<span class="selector-tag">html</span>时，写属性class=&quot;类名&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*id选择器写法*/</span></span><br><span class="line"><span class="selector-id">#id</span>属性名&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">写<span class="selector-tag">html</span>时，写属性id=&quot;属性名&quot;</span><br><span class="line">注意：id选择器通常配合js使用，且在<span class="selector-tag">html</span>中只能使用一次，多次使用是不合法的。</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通配符选择器写法*/</span></span><br><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">改变所有的<span class="selector-tag">html</span>样式</span><br><span class="line"></span><br><span class="line"><span class="comment">/*上面为基础写法，下面为基础选择器的拓展写法,选择名可以是以上任意形式*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*后代选择器*/</span></span><br><span class="line">选择名<span class="number">1</span> 选择名<span class="number">2</span>&#123;</span><br><span class="line">    css</span><br><span class="line">&#125;</span><br><span class="line">例如：</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">只要是<span class="selector-tag">div</span>下包含的<span class="selector-tag">p</span>标签就会生效。</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">p</span>&gt;变红&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">span</span>&gt;&lt;<span class="selector-tag">p</span>&gt;变红&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*子代选择器*/</span></span><br><span class="line">选择名<span class="number">1</span>&gt;选择名<span class="number">2</span>&#123;</span><br><span class="line">    css</span><br><span class="line">&#125;</span><br><span class="line">例如：</span><br><span class="line"><span class="selector-tag">div</span>&gt;<span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">只作用于选择名<span class="number">1</span>下的最高级选择名<span class="number">2</span>.</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">p</span>&gt;变红&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">	&lt;<span class="selector-tag">span</span>&gt;&lt;<span class="selector-tag">p</span>&gt;不变红&lt;/<span class="selector-tag">p</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*并集选择器*/</span></span><br><span class="line">选择名<span class="number">1</span>,选择名<span class="number">2</span> &#123;</span><br><span class="line">    css</span><br><span class="line">&#125;</span><br><span class="line">将选择名<span class="number">1</span>，选择名<span class="number">2</span>，均执行css</span><br><span class="line"></span><br><span class="line"><span class="comment">/*交集选择器*/</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.class</span> &#123;<span class="comment">/*p与.class之间不能有空格之类的字符*/</span></span><br><span class="line">    css</span><br><span class="line">&#125;</span><br><span class="line">将包含class类的<span class="selector-tag">p</span>标签执行css</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;class&quot;&gt;执行css&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*hover伪类选择器*/</span></span><br><span class="line">选择名<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    css</span><br><span class="line">&#125;</span><br><span class="line">鼠标悬停在选择名时，执行CSS。</span><br><span class="line">例如：</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span>&gt;鼠标悬停在此时，该文字显示为红色&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><mark><strong>结构伪类选择器</strong></mark></p>
<table>
<thead>
<tr>
<th style="text-align:center">选择器</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">E:first-child{}</td>
<td style="text-align:center">匹配 E 元素中的第一个</td>
</tr>
<tr>
<td style="text-align:center">E:last-child{}</td>
<td style="text-align:center">匹配 E 元素中的最后一个</td>
</tr>
<tr>
<td style="text-align:center">E:nth-child(n){}</td>
<td style="text-align:center">匹配 E 元素中的第 n 个，n 处可填公式</td>
</tr>
<tr>
<td style="text-align:center">E:nth-last-child(n){}</td>
<td style="text-align:center">匹配 E 元素中的倒数第 n 个，n 处可填公式</td>
</tr>
<tr>
<td style="text-align:center">公式中的 n 从 0 开始</td>
<td style="text-align:center">公式：偶数：2n、even。奇数：2n+1、2n-1、odd</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">公式：找到前 5 个：-n+5、找到从第 5 个往后：n+5</td>
</tr>
</tbody>
</table>
<h2 id="伪元素"><a class="markdownIt-Anchor" href="#伪元素">#</a> <mark><strong>伪元素</strong></mark></h2>
<p><strong>(使用 css 创建标签，通常用于装饰性，不重要的小图)</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">伪元素</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">::before</td>
<td style="text-align:center">在父元素内容的最前添加一伪元素</td>
</tr>
<tr>
<td style="text-align:center">::after</td>
<td style="text-align:center">在父元素内容的最后添加一伪元素</td>
</tr>
</tbody>
</table>
<p><strong>示例：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.exmaple</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;前缀内容&#x27;</span>;</span><br><span class="line">    <span class="comment">/*默认为行内元素，宽高不生效*/</span></span><br><span class="line">    <span class="comment">/*content属性必须添加，否则不生效，内容可以留空*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="浮动"><a class="markdownIt-Anchor" href="#浮动">#</a> <mark><strong>浮动</strong></mark></h2>
<p><strong>float: left/right</strong></p>
<p><strong>1. 添加 float 属性的标签会脱离标准流的控制，不再占用标准流的位置</strong></p>
<p><strong>2. 浮动元素比标准流高半个级别，可以覆盖标准流中的元素，但不能覆盖其内容</strong></p>
<p><strong>3. 浮动的标签默认顶对齐，可以通过 margin 修改位置</strong></p>
<p><strong>4. 浮动元素不换行，可以设置宽高。浮动后标签具有行内块的特点。</strong></p>
<p><strong>5. 浮动后的元素，不能使用 margin: 0 auto。</strong></p>
<p><mark><strong>清除浮动给别的标签带来的影响</strong></mark></p>
<p>影响：子元素浮动时，不能撑开标准流的块。</p>
<p>方法 1：</p>
<p><strong>在父元素内容的最后添加一个块级元素</strong></p>
<p><strong>给添加的块级元素设置 clear:both</strong></p>
<p>方法 2：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*单伪元素清除法*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="comment">/*添加以下代码，在网页中看不到伪元素*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法 3：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*before用于解决外边距塌陷问题*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法 4：</p>
<p><strong>给父元素设置 overflow: hidden;</strong></p>
<p>注：此方法也可用于外边距塌陷</p>
<h2 id="css属性"><a class="markdownIt-Anchor" href="#css属性">#</a> <mark>CSS 属性</mark></h2>
<h3 id="font系列"><a class="markdownIt-Anchor" href="#font系列">#</a> <mark><strong>font 系列：</strong></mark></h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">font-style</td>
<td style="text-align:center">控制字体格式，normal 为正常，italic 为斜体</td>
</tr>
<tr>
<td style="text-align:center">font-weight</td>
<td style="text-align:center">控制字体粗细，normal 正常 (400)，bold 加粗 (700)，或使用 100-900 的数字控制</td>
</tr>
<tr>
<td style="text-align:center">font-size</td>
<td style="text-align:center">控制字体大小，单位 px (像素)、谷歌浏览器默认大小是 16px</td>
</tr>
<tr>
<td style="text-align:center">line-height</td>
<td style="text-align:center">控制行高，可以填数字 + px，也可以只填数字 (当前标签的 font-size 的倍数)</td>
</tr>
<tr>
<td style="text-align:center">font-family</td>
<td style="text-align:center">控制字体，windows 默认微软雅黑</td>
</tr>
<tr>
<td style="text-align:center">color</td>
<td style="text-align:center">控制字体颜色</td>
</tr>
</tbody>
</table>
<p><strong>font 可缩写为：</strong></p>
<p><strong>font: style weight size/line-height family;    其中 style 和 weight 可省略，size/line-height 不是二选其一的意思</strong></p>
<hr>
<h3 id="text系列"><a class="markdownIt-Anchor" href="#text系列">#</a> <mark><strong>text 系列：</strong></mark></h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">text-align</td>
<td style="text-align:center">控制内容水平对齐方式，left 左对齐，center 居中，right 右对齐。</td>
</tr>
<tr>
<td style="text-align:center">text-indent</td>
<td style="text-align:center">控制段落首行缩进，单位可以是 px，也可以是 em (1em = 当前标签的 font-size 的大小)</td>
</tr>
<tr>
<td style="text-align:center">text-decoration</td>
<td style="text-align:center">underline 下划线，line-through 删除线，overline 上划线，none 无装饰线</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="background系列"><a class="markdownIt-Anchor" href="#background系列">#</a> <mark><strong>background 系列：</strong></mark></h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">background-color</td>
<td style="text-align:center">控制背景颜色</td>
</tr>
<tr>
<td style="text-align:center">background-image： url (此处填写图片地址)</td>
<td style="text-align:center">控制背景图片</td>
</tr>
<tr>
<td style="text-align:center">background-repeat</td>
<td style="text-align:center">平铺背景图片，默认 repeat (平铺)，no-repeat (不平铺)，repeat-x (按 x 轴平铺，改成 y 按 y 轴)</td>
</tr>
<tr>
<td style="text-align:center">background-position: 水平 垂直</td>
<td style="text-align:center">控制背景位置，可以用英语单词 (top 上，bottom 下)，也可以使用坐标系 (单位 px)</td>
</tr>
<tr>
<td style="text-align:center">background-size: 宽 高</td>
<td style="text-align:center">取值为数字、或百分比 (相对于当前盒子的宽高)、contain、cover</td>
</tr>
<tr>
<td style="text-align:center">width</td>
<td style="text-align:center">控制宽度，单位 px</td>
</tr>
<tr>
<td style="text-align:center">height</td>
<td style="text-align:center">控制高度，单位 px</td>
</tr>
</tbody>
</table>
<p><strong>background 可简写为:</strong></p>
<p><strong>background: color image repeat position    其中属性不分先后顺序，但推荐按照该顺序书写</strong></p>
<p><strong>例：background: pink url (./image.jpg) no-repeat right bottom</strong></p>
<p><strong>颜色：rgba (0,0,0,0),rgb 是红绿蓝，范围 0-255，a 是透明度，范围 0-1。</strong></p>
<hr>
<h2 id="css属性通常书写顺序"><a class="markdownIt-Anchor" href="#css属性通常书写顺序">#</a> <mark>CSS 属性通常书写顺序</mark></h2>
<p><strong>1. 浮动 /display</strong></p>
<p><strong>2. 盒子模型：margin border padding 宽高背景色</strong></p>
<p><strong>3. 文字样式</strong></p>
<h2 id="css常用配置basecss"><a class="markdownIt-Anchor" href="#css常用配置basecss">#</a> <mark>CSS 常用配置 (base.css)</mark></h2>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*清除浏览器默认内外边距，设置为内减模式*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置网页统一的字体大小、行高、字体系列相关属性*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">16px</span>/<span class="number">1.5</span> <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica,Arial, <span class="string">&quot;Microsoft Yahei&quot;</span>, <span class="string">&quot;Hiragion Sans GB&quot;</span>, <span class="string">&quot;Heiti SC&quot;</span>, <span class="string">&quot;WenQuanYi Micro Hei&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;<span class="comment">/*可改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*清除超链接的下划线*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;<span class="comment">/*可改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*去除默认的倾斜效果*/</span></span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*清除列表的圆点*/</span></span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置img的垂直对齐方式为居中对齐，去除img默认的下间隙*/</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*去除input默认样式*/</span></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;<span class="comment">/*可改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*左右浮动*/</span></span><br><span class="line"><span class="selector-class">.fl</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fr</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*clearfix，用于修复塌陷与清除浮动影响*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="网页布局与vs-code使用技巧"><a class="markdownIt-Anchor" href="#网页布局与vs-code使用技巧">#</a> 网页布局与 Vs Code 使用技巧</h1>
<h2 id="元素显示模式"><a class="markdownIt-Anchor" href="#元素显示模式">#</a> <mark>元素显示模式</mark></h2>
<p><strong>块级元素：</strong></p>
<p><strong>独占一行，宽度默认为父级标签的 100%，允许使用 width 和 height 调整宽高</strong></p>
<p><strong>代表标签：div、p、h 系列、ul、li、dl、dt、dd、form、header、nav、footer…</strong></p>
<p><strong>行内元素：</strong></p>
<p><strong>一行可以显示多个，宽高默认由内容撑开，不可以设置宽高</strong></p>
<p><strong>代表标签：span、a、b、u、i、s、strong、ins、em、del…</strong></p>
<p><strong>行内块元素：</strong></p>
<p><strong>一行可以显示多个，允许设置宽高。若未设置宽高，则由内容撑开，无内容则不显示</strong></p>
<p><strong>代表标签：img、input、textarea、button、select…</strong></p>
<p><strong>元素显示模式转换：(目的：改变元素默认的显示特点，让元素符合布局要求)</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">效果</th>
<th style="text-align:center">使用频率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">display: block</td>
<td style="text-align:center">转换为块级元素</td>
<td style="text-align:center">较多</td>
</tr>
<tr>
<td style="text-align:center">display: inline</td>
<td style="text-align:center">转换为行内元素</td>
<td style="text-align:center">较少</td>
</tr>
<tr>
<td style="text-align:center">display: inline-block</td>
<td style="text-align:center">转换为行内块元素</td>
<td style="text-align:center">较多</td>
</tr>
</tbody>
</table>
<p><strong>注：不允许 p 标签内嵌套 div、p、h 等块级元素。a 标签可以嵌套 a 以外的任意元素</strong></p>
<h2 id="emmet语法vs-code快速补充代码"><a class="markdownIt-Anchor" href="#emmet语法vs-code快速补充代码">#</a> emmet 语法 (vs code 快速补充代码)</h2>
<table>
<thead>
<tr>
<th style="text-align:center">使用</th>
<th style="text-align:center">示例</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">标签名</td>
<td style="text-align:center">div</td>
<td style="text-align:center">&lt;div&gt;&lt;/div&gt;</td>
</tr>
<tr>
<td style="text-align:center">类选择器</td>
<td style="text-align:center">.red</td>
<td style="text-align:center">&lt;div class=“red”&gt;&lt;/div&gt;</td>
</tr>
<tr>
<td style="text-align:center">id 选择器</td>
<td style="text-align:center">#one</td>
<td style="text-align:center">&lt;div id=“one”&gt;&lt;/div&gt;</td>
</tr>
<tr>
<td style="text-align:center">交集选择器</td>
<td style="text-align:center">p.red#one</td>
<td style="text-align:center">&lt;p class=“red” id=“one”&gt;&lt;/p&gt;</td>
</tr>
<tr>
<td style="text-align:center">子代选择器</td>
<td style="text-align:center">ul&gt;li</td>
<td style="text-align:center">&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</td>
</tr>
<tr>
<td style="text-align:center">内部文本</td>
<td style="text-align:center" 内容="">ul&gt;li</td>
<td style="text-align:center">&lt;ul&gt;&lt;li &gt; 内容 &lt;/li&gt;&lt;/ul&gt;</td>
</tr>
<tr>
<td style="text-align:center">多个创建</td>
<td style="text-align:center">ul&gt;li*3</td>
<td style="text-align:center">&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</td>
</tr>
</tbody>
</table>
<h1 id="css特性"><a class="markdownIt-Anchor" href="#css特性">#</a> CSS 特性</h1>
<h2 id="继承性inherit"><a class="markdownIt-Anchor" href="#继承性inherit">#</a> 继承性 (inherit)</h2>
<p><strong>子元素有默认继承父元素样式的特点</strong></p>
<p><strong>可以继承的常见属性 (文字控制属性都可以继承)</strong></p>
<p><strong>如：color font text line-height…</strong></p>
<p><strong>注：a 标签的 color 会继承失效，h 系列标签的 font-size 会继承失效</strong></p>
<h2 id="层叠性cascade"><a class="markdownIt-Anchor" href="#层叠性cascade">#</a> 层叠性 (cascade)</h2>
<p><strong>给同一个标签设置不同的样式，后语句会覆盖前语句</strong></p>
<p><strong>样式冲突时，只有选择器优先级相同时，才能通过层叠性判断结果</strong></p>
<h2 id="优先级priority"><a class="markdownIt-Anchor" href="#优先级priority">#</a> 优先级 (priority)</h2>
<p><strong>不同选择器具有不同的优先级，优先级高的选择器样式会覆盖优先级低的选择器样式</strong></p>
<p><strong>优先级公式：继承 &lt; 通配符选择器 &lt; 标签选择器 &lt; 类选择器 &lt; id 选择器 &lt; 行内样式 &lt; !important</strong></p>
<p><strong>注：!important 写在属性值的后面，分号的前面。!imoprtant 不能提升继承的优先级，继承的优先级永远最低。实际开发不推荐使用</strong></p>
<h1 id="盒子模型"><a class="markdownIt-Anchor" href="#盒子模型">#</a> <mark>盒子模型</mark></h1>
<p><strong>盒子尺寸 = width/height + 内边距 + 边框线</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">形式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">padding</td>
<td style="text-align:center">内边距。标签有默认内外边距，通常先清 0</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">border</td>
<td style="text-align:center">边框线</td>
<td style="text-align:center">border (- 方向): 10px solid red;(不分先后)</td>
</tr>
<tr>
<td style="text-align:center">margin</td>
<td style="text-align:center">外边距。margin 与 padding 无法改变行内标签的垂直位置</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">box-sizing: border-box</td>
<td style="text-align:center">使盒子尺寸 = width/height (内减模式)</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h1 id="定位与装饰"><a class="markdownIt-Anchor" href="#定位与装饰">#</a> <mark>定位与装饰</mark></h1>
<h2 id="标准流-浮动-定位显示关系"><a class="markdownIt-Anchor" href="#标准流-浮动-定位显示关系">#</a> 标准流、浮动、定位显示关系</h2>
<p><mark><strong>标准流 &lt; 浮动 &lt; 定位</strong></mark></p>
<p><strong>默认情况下：同级定位下、后标签覆盖前标签</strong></p>
<p><strong>使用 z-index: int; 改变定位层数，默认为 0，数字越大，覆盖级别越高</strong></p>
<h2 id="写法"><a class="markdownIt-Anchor" href="#写法">#</a> <strong><mark>写法：</mark></strong></h2>
<p><strong>属性名：<mark>position</mark></strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">定位方式</th>
<th style="text-align:center">属性值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">静态定位</td>
<td style="text-align:center">static</td>
</tr>
<tr>
<td style="text-align:center">相对定位</td>
<td style="text-align:center">relative</td>
</tr>
<tr>
<td style="text-align:center">绝对定位</td>
<td style="text-align:center">absolute</td>
</tr>
<tr>
<td style="text-align:center">固定定位</td>
<td style="text-align:center">fixed</td>
</tr>
</tbody>
</table>
<p><strong><mark>相对定位：</mark></strong></p>
<p><strong>1. 仍占有原来的位置。</strong></p>
<p><strong>2. 不脱标 (标准流)。</strong></p>
<p><strong>3. 改变位置参照自己原来的位置。</strong></p>
<p><strong>4. 不改变标签本身的显示模式 (块、行内、行内块)</strong></p>
<p><strong><mark>绝对定位：</mark></strong></p>
<p><strong>1. 如果有<mark>已经定位</mark>的父级元素，以该父级元素为参照物进行定位。若无，则以浏览器窗口为参照进行定位。</strong></p>
<p><strong>2. 脱标 (标准流)</strong></p>
<p><strong>3. 改变标签本身的显示模式、具备行内块的特点</strong></p>
<p><mark><strong>固定定位：</strong></mark></p>
<p><strong>1. 相对于浏览器进行定位移动。</strong></p>
<p><strong>2. 脱标 (标准流)</strong></p>
<p><strong>3. 位置随浏览器滚动而移动。</strong></p>
<p><strong>4. 改变标签本身的显示模式、具备行内块的特点</strong></p>
<h2 id="偏移值"><a class="markdownIt-Anchor" href="#偏移值">#</a> <strong>偏移值</strong></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方向</th>
<th style="text-align:center">属性名</th>
<th style="text-align:center">属性值</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">水平</td>
<td style="text-align:center">left</td>
<td style="text-align:center">数字 + px</td>
<td style="text-align:center">距离左边的距离</td>
</tr>
<tr>
<td style="text-align:center">水平</td>
<td style="text-align:center">right</td>
<td style="text-align:center">数字 + px</td>
<td style="text-align:center">距离右边的距离</td>
</tr>
<tr>
<td style="text-align:center">垂直</td>
<td style="text-align:center">top</td>
<td style="text-align:center">数字 + px</td>
<td style="text-align:center">距离上边的距离</td>
</tr>
<tr>
<td style="text-align:center">垂直</td>
<td style="text-align:center">bottom</td>
<td style="text-align:center">数字 + px</td>
<td style="text-align:center">距离下边的距离</td>
</tr>
</tbody>
</table>
<p><strong>水平方向优先以 left 为准，垂直方向优先以 top 为准</strong></p>
<h2 id="装饰"><a class="markdownIt-Anchor" href="#装饰">#</a> 装饰</h2>
<h3 id="对齐问题"><a class="markdownIt-Anchor" href="#对齐问题">#</a> <mark><strong>对齐问题：</strong></mark></h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">属性值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">vertical-align</td>
<td style="text-align:center">baseline</td>
<td style="text-align:center">默认，基线对齐</td>
</tr>
<tr>
<td style="text-align:center">用于处理标签对不齐</td>
<td style="text-align:center">top</td>
<td style="text-align:center">顶部对齐</td>
</tr>
<tr>
<td style="text-align:center">浏览器把行内和行内块标签当作文字处理</td>
<td style="text-align:center">middle</td>
<td style="text-align:center">中部对齐</td>
</tr>
<tr>
<td style="text-align:center">默认基线对齐</td>
<td style="text-align:center">bottom</td>
<td style="text-align:center">底部对齐</td>
</tr>
</tbody>
</table>
<h3 id="光标指针"><a class="markdownIt-Anchor" href="#光标指针">#</a> <strong>光标指针：</strong></h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">属性值</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cursor</td>
<td style="text-align:center">default</td>
<td style="text-align:center">默认值，通常是箭头光标</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">pointer</td>
<td style="text-align:center">点击光标，提示用户可以点击</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">text</td>
<td style="text-align:center">工字光标，提示用户可以选择文字 / 输入内容</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">move</td>
<td style="text-align:center">十字光标，提示用户可以移动</td>
</tr>
</tbody>
</table>
<h3 id="圆角边框"><a class="markdownIt-Anchor" href="#圆角边框">#</a> <strong>圆角边框：</strong></h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">取值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">border-radius</td>
<td style="text-align:center">数字 + px (圆角圆的半径)、百分比</td>
<td style="text-align:center">从左上角开始赋值、顺时针赋值、未赋值看对角</td>
</tr>
</tbody>
</table>
<p><strong>取值写 50% 为正圆 (盒子本身需要是正方形)、取值最大为 50%</strong></p>
<p><strong>取值写盒子高度的一半为胶囊 (盒子本身需要是长方形)</strong></p>
<h3 id="溢出部分显示效果"><a class="markdownIt-Anchor" href="#溢出部分显示效果">#</a> <strong>溢出部分显示效果</strong></h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">属性值</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">overflow</td>
<td style="text-align:center">visible</td>
<td style="text-align:center">默认值，溢出部分可见</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">hidden</td>
<td style="text-align:center">溢出部分隐藏</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">scroll</td>
<td style="text-align:center">无论是否溢出，都显示滚动条</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">auto</td>
<td style="text-align:center">根据是否溢出，自动显示或隐藏滚动条</td>
</tr>
</tbody>
</table>
<h3 id="元素本身隐藏"><a class="markdownIt-Anchor" href="#元素本身隐藏">#</a> 元素本身隐藏</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">visibility: hidden</td>
<td style="text-align:center">隐藏元素，仍占有元素位置 (使用较少)</td>
</tr>
<tr>
<td style="text-align:center">display: none</td>
<td style="text-align:center">隐藏元素，不占位 (使用较多)</td>
</tr>
</tbody>
</table>
<h3 id="元素整体透明度"><a class="markdownIt-Anchor" href="#元素整体透明度">#</a> 元素整体透明度</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">属性值</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">opacity</td>
<td style="text-align:center">0-1 的数字</td>
<td style="text-align:center">1 完全不透明，0 完全透明</td>
</tr>
</tbody>
</table>
<h3 id="精灵图"><a class="markdownIt-Anchor" href="#精灵图">#</a> 精灵图</h3>
<p><strong>作用：将多张小图合成为一张大图，一次发送给用户，减小服务器压力，提高页面加载速度</strong></p>
<p>新建一个盒子，将精灵图设置为盒子的背景图，使用 background-position 改变位置</p>
<h3 id="盒子阴影"><a class="markdownIt-Anchor" href="#盒子阴影">#</a> 盒子阴影</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">box-shadow</td>
<td style="text-align:center">h-shadow</td>
<td style="text-align:center">必填，水平位移量，允许负值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">v-shadow</td>
<td style="text-align:center">必填，垂直位移量，允许负值</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">blur</td>
<td style="text-align:center">可选，模糊度</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">spread</td>
<td style="text-align:center">可选，阴影扩大</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">color</td>
<td style="text-align:center">可选，阴影颜色</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">inset</td>
<td style="text-align:center">可选，将阴影改为内部阴影</td>
</tr>
</tbody>
</table>
<h3 id="过渡"><a class="markdownIt-Anchor" href="#过渡">#</a> 过渡</h3>
<p>作用：让元素样式缓慢变化，常配合 hover 使用，增强网页交互体验</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">取值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">transition</td>
<td style="text-align:center">过渡的属性</td>
<td style="text-align:center">all: 所有能过渡的属性都过渡、属性名 (如：width 只有 width 有过渡)</td>
</tr>
<tr>
<td style="text-align:center">加给变化的标签而非 hover</td>
<td style="text-align:center">过渡的时长</td>
<td style="text-align:center">数字 + s (秒)</td>
</tr>
</tbody>
</table>
<h1 id="综合案例-小兔鲜电商"><a class="markdownIt-Anchor" href="#综合案例-小兔鲜电商">#</a> 综合案例 - 小兔鲜电商</h1>
<p>案例完成文件 (html 中用到的图片文件也在里面)：<a href="https://www.aliyundrive.com/s/BW4Y9fAFLw1">阿里云盘下载</a></p>
<p>提取码：8d4o</p>
<p>该案例来自黑马程序员</p>
<h2 id="css文件夹"><a class="markdownIt-Anchor" href="#css文件夹">#</a> css 文件夹</h2>
<h3 id="basecss"><a class="markdownIt-Anchor" href="#basecss">#</a> base.css</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//base<span class="selector-class">.css</span></span><br><span class="line"><span class="comment">/*清除浏览器默认内外边距，设置为内减模式*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置网页统一的字体大小、行高、字体系列相关属性*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">16px</span>/<span class="number">1.5</span> <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica,Arial, <span class="string">&quot;Microsoft Yahei&quot;</span>, <span class="string">&quot;Hiragion Sans GB&quot;</span>, <span class="string">&quot;Heiti SC&quot;</span>, <span class="string">&quot;WenQuanYi Micro Hei&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*清除超链接的下划线*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*去除默认的倾斜效果*/</span></span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*清除列表的圆点*/</span></span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*设置img的垂直对齐方式为居中对齐，去除img默认的下间隙*/</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*去除input默认样式*/</span></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;<span class="comment">/*可改*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*左右浮动*/</span></span><br><span class="line"><span class="selector-class">.fl</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fr</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*clearfix，用于修复塌陷与清除浮动影响*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="commoncss"><a class="markdownIt-Anchor" href="#commoncss">#</a> common.css</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//common<span class="selector-class">.css</span></span><br><span class="line"><span class="comment">/*各个页面相同的样式表*/</span></span><br><span class="line"><span class="comment">/*版心*/</span></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1240px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*快捷导航*/</span></span><br><span class="line"><span class="selector-class">.shortcut</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">52px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shortcut</span> <span class="selector-class">.wrapper</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">52px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shortcut</span> <span class="selector-class">.wrapper</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#dcdcdc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shortcut</span> <span class="selector-class">.wrapper</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/sprites.png</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">160px</span> -<span class="number">70px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*头部*/</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">207px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">h1</span> &#123;    </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">207px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> <span class="selector-tag">h1</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">207px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/logo.png</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: contain;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">48px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#27ba9b</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#27ba9b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">172px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#e7e7e7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">172px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/sprites.png</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">79px</span> -<span class="number">69px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.car</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">23px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/sprites.png</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">119px</span> -<span class="number">69px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.car</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e26237</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*版权区域*/</span></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">342px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1393px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">59px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">135px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">175px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#434343</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.top</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">193px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">58px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">58px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.top</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.top</span> <span class="selector-tag">li</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">58px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">58px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/sprites.png</span>);</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.top</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">77px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.top</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">64px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.top</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">130px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.bottom</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-class">.bottom</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="indexcss"><a class="markdownIt-Anchor" href="#indexcss">#</a> index.css</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//index<span class="selector-class">.css</span></span><br><span class="line"><span class="comment">/*首页使用的样式表*/</span></span><br><span class="line"><span class="comment">/*banner*/</span></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.aside</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.aside</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.aside</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.aside</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.aside</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#27ba9b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.aside</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">19px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/sprites.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">80px</span> -<span class="number">110px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*左右箭头*/</span></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.prev</span>,</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">228px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/sprites.png</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.prev</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">14px</span> -<span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.next</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: -<span class="number">23px</span> -<span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*圆点*/</span></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">585px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ol</span> <span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*新鲜好物*/</span></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.hd</span> &#123; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">114px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">114px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.hd</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">29px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.hd</span> <span class="selector-tag">h2</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.hd</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-class">.more</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.hd</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span>,</span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-class">.more</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/sprites.png</span>);</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">405px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f9f4</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>n) &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">304px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#9a2e1f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">23px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#9a2e1f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods</span> <span class="selector-class">.bd</span> <span class="selector-tag">li</span> <span class="selector-tag">b</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">51px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#27ba9b</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#27ba9b</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*生鲜*/</span></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">96px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">96px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">29px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-class">.more</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">89px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.hd</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#27ba9b</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">610px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">610px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">242px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">304px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">29px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">184px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">184px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#9a2e1f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span> <span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#9a2e1f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">2px</span> <span class="number">#27ba9b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shengxian</span> <span class="selector-class">.bd</span> <span class="selector-class">.right</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">242px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">304px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="js文件夹"><a class="markdownIt-Anchor" href="#js文件夹">#</a> js 文件夹</h2>
<h3 id="banner_buttonjs"><a class="markdownIt-Anchor" href="#banner_buttonjs">#</a> banner_button.js</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//banner_button.js</span></span><br><span class="line"><span class="keyword">const</span> list = [<span class="string">&#x27;https://pic4.zhimg.com/v2-44243020fbff5630b343a4e92c3186fb_r.jpg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://pic4.zhimg.com/v2-04f320cd9427e818aa174e3b8f068127_r.jpg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://pic3.zhimg.com/v2-2ce72ef983a3b2c815d7f1509b706eda_r.jpg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://pic4.zhimg.com/v2-b76becbb2b3049c8507293bd4dfbf8b7_r.jpg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://img.tt98.com/d/2020/2020061219006416/5ee34f14dcf4c.jpg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://ts1.cn.mm.bing.net/th/id/R-C.c0a0e50906dfa00eff63d22ce0558d27?rik=X1hEoz%2fz0iQ4Pw&amp;riu=http%3a%2f%2fimgs.aixifan.com%2flive%2f1483416279979%2f1483416279979.jpg&amp;ehk=LVXzPFhuZLd1CnyLpxUd%2beJLrVjXTxHbIOvbuN70j0o%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://pic4.zhimg.com/v2-bf9e5897a80acd016f40e0351645fc93_r.jpg?source=1940ef5c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://ts1.cn.mm.bing.net/th/id/R-C.a49a2c3f551ecf65e07970c47167b85c?rik=UCwj6mM%2f3N%2bUkw&amp;riu=http%3a%2f%2fimgs.aixifan.com%2flive%2f1483416175977%2f1483416175977.jpg&amp;ehk=o60Di7Qupud5qHB%2byprZrYPMpC8%2fqXVx2I92wuJXun8%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://ts1.cn.mm.bing.net/th/id/R-C.edac51727869a484d9925579785cda1a?rik=SMGJUZHreTATuQ&amp;riu=http%3a%2f%2fimgs.aixifan.com%2flive%2f1483601963429%2f1483601963429.jpg&amp;ehk=rFgZCrdJAA85TrfkYC52LkHEXCLB0zV4t098EJMnCaI%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://pic3.zhimg.com/v2-c4fcb5062e8291d6adc3ff39f6f07b6e_r.jpg&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner #banner_img&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> next_button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner .next&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> prev_button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner .prev&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ol_li = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.banner ol li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">next_button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = (index + <span class="number">1</span>) % list.<span class="property">length</span></span><br><span class="line">    img.<span class="property">src</span> = list[key]</span><br><span class="line">    ol_li[index].<span class="property">className</span> = <span class="literal">null</span></span><br><span class="line">    ol_li[key].<span class="property">className</span> = <span class="string">&quot;current&quot;</span></span><br><span class="line">    index++</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= list.<span class="property">length</span>)</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">prev_button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> key = (index - <span class="number">1</span> + list.<span class="property">length</span>) % list.<span class="property">length</span></span><br><span class="line">    img.<span class="property">src</span> = list[key]</span><br><span class="line">    ol_li[index].<span class="property">className</span> = <span class="literal">null</span></span><br><span class="line">    ol_li[key].<span class="property">className</span> = <span class="string">&quot;current&quot;</span></span><br><span class="line">    index--</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">        index = list.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="indexhtml"><a class="markdownIt-Anchor" href="#indexhtml">#</a> index.html</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;小兔鲜儿官网，致力于打造全球最大的食品、生鲜电商购物平台。&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;小兔鲜儿,食品,生鲜,服装,家电,电商,购物&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小兔鲜儿-新鲜、惠民、快捷！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/base.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/index.css&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--快捷导航--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shortcut&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;fr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>请先登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>免费注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>会员中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>在线客服<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>手机版<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--头部--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>小兔鲜儿<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>餐厨<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>居家<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>洗护<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>孕婴<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>服装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;搜一搜&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--轮播图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--image--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;banner_img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/banner_1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1240px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--侧导航--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>生鲜<span class="tag">&lt;<span class="name">span</span>&gt;</span>水果 蔬菜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--左右箭头--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;button class=&quot;prev&quot;&gt;&lt;/button&gt;</span></span><br><span class="line"><span class="comment">            &lt;button class=&quot;next&quot;&gt;&lt;/button&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--圆点:当前状态：current / active--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--新鲜好物--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goods wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>新鲜好物<span class="tag">&lt;<span class="name">span</span>&gt;</span>新鲜出炉 品质靠谱<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>查看全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd clearfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/new_goods_1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>睿米无线吸尘器F8<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>899<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">b</span>&gt;</span>新品<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/new_goods_2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>智能环绕3D空调<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>1299<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">b</span>&gt;</span>新品<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/new_goods_3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>广东软软糯米煲仔饭<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>129<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">b</span>&gt;</span>新品<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/new_goods_4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>罗西机械智能手表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>3399<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">b</span>&gt;</span>新品<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--生鲜--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shengxian wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>生鲜<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span>查看全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>蔬菜<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>肉禽蛋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>裤装<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>衬衫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>T恤<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>内衣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd clearfix&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_cover.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>红功夫 麻辣小龙虾1.5kg 4-6钱/25-32<span class="tag">&lt;<span class="name">br</span>&gt;</span>火锅食材<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>红功夫 麻辣小龙虾1.5kg 4-6钱/25-32<span class="tag">&lt;<span class="name">br</span>&gt;</span>火锅食材<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三都港 冷冻无公害黄花鱼</span><br><span class="line">                                700g 2条 袋装 </span><br><span class="line">                               <span class="tag">&lt;<span class="name">br</span>&gt;</span>海鲜水产<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>渔公码头 大连鲜食入味</span><br><span class="line">                                即食海参 辽参刺参 </span><br><span class="line">                                <span class="tag">&lt;<span class="name">br</span>&gt;</span>调味海鲜<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>红功夫 麻辣小龙虾1.5kg 4-6钱/25-32<span class="tag">&lt;<span class="name">br</span>&gt;</span>火锅食材<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_6.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>红功夫 麻辣小龙虾1.5kg 4-6钱/25-32<span class="tag">&lt;<span class="name">br</span>&gt;</span>火锅食材<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>三都港 冷冻无公害黄花鱼</span><br><span class="line">                                700g 2条 袋装 </span><br><span class="line">                               <span class="tag">&lt;<span class="name">br</span>&gt;</span>海鲜水产<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./uploads/fresh_goods_4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>渔公码头 大连鲜食入味</span><br><span class="line">                                即食海参 辽参刺参 </span><br><span class="line">                                <span class="tag">&lt;<span class="name">br</span>&gt;</span>调味海鲜<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span>￥<span class="tag">&lt;<span class="name">span</span>&gt;</span>79<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--版权区域--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>价格亲民<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>物流快捷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>品质新鲜<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关于我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>帮助中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>售后服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>配送与验收<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商务合作<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>搜索推荐<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>友情链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>CopyRight @ 小兔鲜儿<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/banner_button.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>HTML+CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/09/02/Redis/</url>
    <content><![CDATA[<h1 id="redis简介"><a class="markdownIt-Anchor" href="#redis简介">#</a> Redis 简介</h1>
<p>Redis 是一款开源的、基于内存进行存储的数据库。</p>
<h1 id="redis基础"><a class="markdownIt-Anchor" href="#redis基础">#</a> Redis 基础</h1>
<h2 id="安装与使用linux版"><a class="markdownIt-Anchor" href="#安装与使用linux版">#</a> 安装与使用 (Linux 版)</h2>
<p><a href="https://redis.io/">Redis 官网</a></p>
<p>前往 Redis 的官网进行下载，进入 Install Redis=&gt;Install from Source</p>
<p>根据官网给出的文档进行下载，首先获取官方的 tar 包 (请提前安装 wget)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://download.redis.io/redis-stable.tar.gz</span><br></pre></td></tr></table></figure>
<p>然后进行解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-stable.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<p>进入到相应的文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis-stable</span><br></pre></td></tr></table></figure>
<p>进行编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>如果失败，可以尝试用 root 用户进行</p>
<p>然后使用 vim 对配置文件 (redis.conf) 进行修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">备份初始配置文件，防止错误修改一些内容</span></span><br><span class="line">cp redis.conf redis.conf.backup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件</span></span><br><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure>
<p>修改下面这些关键字的内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以访问Redis的ip，默认为127.0.0.1 ，修改为0.0.0.0表示任意机器都可以访问</span></span><br><span class="line">bind 0.0.0.0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登录到Redis的密码，默认不要求密码</span></span><br><span class="line">requirepass password</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据库的数量，新版本默认为16</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志文件的输出位置，默认为空</span></span><br><span class="line">logfile &quot;logfileName.log&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后台守护线程，默认关闭</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Redis监听端口，默认为6379</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">保护模式会在没有<span class="built_in">bind</span> ip且没有设置访问密码时自动启动</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以禁止公网访问到redis，来保护数据库安全，默认开启</span></span><br><span class="line">protected-mode yes</span><br></pre></td></tr></table></figure>
<p>修改完成后保存退出，使用如下指令来运行 Redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>
<p><strong>注意：这样开启的 Redis 服务并不会开机自启，当电脑重启后，Redis 将关闭，需要手动重新启动 Redis 服务</strong></p>
<p>使用如下代码查询 redis 的开启情况，或者关闭 redis：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询redis是否开启</span></span><br><span class="line">ps -aux | grep redis</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">杀死redis进程</span></span><br><span class="line">kill -9 redis_pid</span><br></pre></td></tr></table></figure>
<p>通过 redis 自带的客户端可以在命令行进行连接：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-h可以指定连接的ip地址，-p指定连接的端口，-a为密码，为保证安全，不推荐使用-a进行连接</span></span><br><span class="line">redis-cli [-h] [-p] [-a]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以在连接到redis后，使用如下指令输入密码：</span></span><br><span class="line">AUTH password</span><br></pre></td></tr></table></figure>
<h2 id="命令"><a class="markdownIt-Anchor" href="#命令">#</a> 命令</h2>
<h3 id="string类型的常见命令"><a class="markdownIt-Anchor" href="#string类型的常见命令">#</a> String 类型的常见命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SET</td>
<td style="text-align:center">添加或者修改已经存在的一个 String 类型的键值对</td>
</tr>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">根据 key 获取 String 类型的 value</td>
</tr>
<tr>
<td style="text-align:center">MSET</td>
<td style="text-align:center">批量添加多个 String 类型的键值对</td>
</tr>
<tr>
<td style="text-align:center">MGET</td>
<td style="text-align:center">根据多个 key 获取多个 String 类型的 value</td>
</tr>
<tr>
<td style="text-align:center">INCR</td>
<td style="text-align:center">让一个整形的 key 自增 1</td>
</tr>
<tr>
<td style="text-align:center">INCRBY</td>
<td style="text-align:center">让一个整形的 key 自增并指定步长</td>
</tr>
<tr>
<td style="text-align:center">INCRBYFLOAT</td>
<td style="text-align:center">让一个浮点类型的数字自增并指定步长</td>
</tr>
<tr>
<td style="text-align:center">SETNX</td>
<td style="text-align:center">添加一个 String 类型的键值对，前提是其 key 不存在，否则不执行</td>
</tr>
<tr>
<td style="text-align:center">SETEX</td>
<td style="text-align:center">添加一个 String 类型的键值对，并指定有效期</td>
</tr>
</tbody>
</table>
<h3 id="hash类型的常见命令"><a class="markdownIt-Anchor" href="#hash类型的常见命令">#</a> Hash 类型的常见命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HSET key field value</td>
<td style="text-align:center">添加或修改 hash 类型 key 的 field 的值</td>
</tr>
<tr>
<td style="text-align:center">HGET key field</td>
<td style="text-align:center">获取一个 hash 类型 key 的 field 的值</td>
</tr>
<tr>
<td style="text-align:center">HMSET（已弃用）</td>
<td style="text-align:center">批量添加多个 hash 类型 key 的 field 的值</td>
</tr>
<tr>
<td style="text-align:center">HMGET</td>
<td style="text-align:center">批量获取多个 hash 类型 key 的 field 的值</td>
</tr>
<tr>
<td style="text-align:center">HGETALL</td>
<td style="text-align:center">获取一个 hash 类型的 key 中的所有的 field 和 value</td>
</tr>
<tr>
<td style="text-align:center">HEKYS</td>
<td style="text-align:center">获取一个 hash 类型的 key 中的所有 field</td>
</tr>
<tr>
<td style="text-align:center">HVALS</td>
<td style="text-align:center">获取一个 hash 类型的 key 中所有的 value</td>
</tr>
<tr>
<td style="text-align:center">HINCRBY</td>
<td style="text-align:center">让一个 hash 类型 key 的字段值自增并指定步长</td>
</tr>
<tr>
<td style="text-align:center">HSETNX</td>
<td style="text-align:center">添加一个 hsh 类型的 key 的 field 值，前提是这个 field 不存在，否则不执行</td>
</tr>
</tbody>
</table>
<h3 id="list类型的常见命令"><a class="markdownIt-Anchor" href="#list类型的常见命令">#</a> List 类型的常见命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LPUSH key element …</td>
<td style="text-align:center">向列表左侧插入一个或多个元素</td>
</tr>
<tr>
<td style="text-align:center">LPOP key</td>
<td style="text-align:center">移除并返回列表左侧的第一个元素，没有则返回 nil</td>
</tr>
<tr>
<td style="text-align:center">RPUSH key element …</td>
<td style="text-align:center">向列表右侧插入一个或多个元素</td>
</tr>
<tr>
<td style="text-align:center">RPOP key</td>
<td style="text-align:center">移除并返回列表右侧的第一个元素</td>
</tr>
<tr>
<td style="text-align:center">LRANGE key start end</td>
<td style="text-align:center">返回一段角标范围内的所有元素</td>
</tr>
<tr>
<td style="text-align:center">BLPOP 和 BRPOP</td>
<td style="text-align:center">与 LPOP 和 RPOP 类似，只不过在没有元素时等待指定时间，而不是直接返回 nil</td>
</tr>
</tbody>
</table>
<h3 id="set类型的常见命令"><a class="markdownIt-Anchor" href="#set类型的常见命令">#</a> Set 类型的常见命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SADD key member …</td>
<td style="text-align:center">向 set 中添加一个或多个元素</td>
</tr>
<tr>
<td style="text-align:center">SREM key member …</td>
<td style="text-align:center">移除 set 中的指定元素</td>
</tr>
<tr>
<td style="text-align:center">SCARD key</td>
<td style="text-align:center">返回 set 中元素的个数</td>
</tr>
<tr>
<td style="text-align:center">SISMEMBER key member</td>
<td style="text-align:center">判断一个元素是否存在于 set 中</td>
</tr>
<tr>
<td style="text-align:center">SMEMBERS</td>
<td style="text-align:center">获取 set 中的所有元素</td>
</tr>
<tr>
<td style="text-align:center">SINTER key1 key2 …</td>
<td style="text-align:center">求 key1 与 key2 的交集</td>
</tr>
<tr>
<td style="text-align:center">SDIFF key1 key2 …</td>
<td style="text-align:center">求 key1 与 key2 的差集</td>
</tr>
<tr>
<td style="text-align:center">SUNION key1 key2 …</td>
<td style="text-align:center">求 key1 与 key2 的并集</td>
</tr>
</tbody>
</table>
<h3 id="sortedset类型的常见命令"><a class="markdownIt-Anchor" href="#sortedset类型的常见命令">#</a> SortedSet 类型的常见命令</h3>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ZADD key score member</td>
<td style="text-align:center">添加一个或多个元素到 sorted set，如果已经存在则更新其 score 值</td>
</tr>
<tr>
<td style="text-align:center">ZREM key member</td>
<td style="text-align:center">删除 sorted set 中的一个指定元素</td>
</tr>
<tr>
<td style="text-align:center">ZSCORE key member</td>
<td style="text-align:center">获取 sorted set 中的指定元素的 score 值</td>
</tr>
<tr>
<td style="text-align:center">ZRANK key member</td>
<td style="text-align:center">获取 sorted set 中的指定元素的排名</td>
</tr>
<tr>
<td style="text-align:center">ZCARD key</td>
<td style="text-align:center">获取 sorted set 中的元素个数</td>
</tr>
<tr>
<td style="text-align:center">ZCOUNT key min max</td>
<td style="text-align:center">统计 score 值在给定范围内的所有元素的个数</td>
</tr>
<tr>
<td style="text-align:center">ZINCRBY key increment member</td>
<td style="text-align:center">让 sorted set 中的指定元素自增，步长为指定的 increment 值</td>
</tr>
<tr>
<td style="text-align:center">ZRANGE key min max</td>
<td style="text-align:center">按照 score 排序后，获取指定排名范围内的元素</td>
</tr>
<tr>
<td style="text-align:center">ZRANGEBYSCORE key min max</td>
<td style="text-align:center">按照 score 排序后，获取指定 score 范围内的元素</td>
</tr>
<tr>
<td style="text-align:center">ZDIFF、ZINTER、ZUNION</td>
<td style="text-align:center">求差集、交集、并集</td>
</tr>
</tbody>
</table>
<h2 id="基础实战练习"><a class="markdownIt-Anchor" href="#基础实战练习">#</a> 基础实战练习</h2>
<h1 id="redis高级"><a class="markdownIt-Anchor" href="#redis高级">#</a> Redis 高级</h1>
<h1 id="redis原理"><a class="markdownIt-Anchor" href="#redis原理">#</a> Redis 原理</h1>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Go</title>
    <url>/2023/06/28/GoLearn/</url>
    <content><![CDATA[<p><strong>前言：该文档阅读需要有一定的编程语言基础，这里将默认读者已经学习过一门或多门编程语言</strong></p>
<p><strong>补充：该文档更倾向于个人笔记，如果想学习，可以读 Go 语言圣经：<a href="https://gopl-zh.github.io/index.html">Go 语言圣经中文版</a></strong></p>
<h1 id="go语言介绍"><a class="markdownIt-Anchor" href="#go语言介绍">#</a> Go 语言介绍</h1>
<p>Go 语言的三个作者：Rob Pike (罗伯。派克)，Ken Thompson (肯。汤普森) 和 Robert Griesemer (罗伯特。格利茨默)</p>
<p>Rob Pike：曾是贝尔实验室 (Bell Labs) 的 Unix 团队，和 Plan 9 操作系统计划的成员。他与 Thompson 共事多年，并共创出广泛使用的 UTF-8 字元编码。</p>
<p>Ken Thompson：主要是 B 语言、C 语言的作者、Unix 之父。 1983 年图奖 (Turing Award) 和 1998 年美国国家技术奖 (National Medal ofTechnology) 得主。他与 Dennis Ritchie 是 Unix 的原创者。Thompson 也发明了 后来衍生出 C 语言的 B 程序语言。</p>
<p>Robert Griesemer：在开发 Go 之前是 Google V8、Chubby 和 HotSpot JVM 的主要贡献者。</p>
<p>Go 语言出现的目的在于平衡开发速度与运行速度，相较于 C/C++，Go 语言能够实现更快速的开发，而相较于 Java，Go 语言能实现更快速的运行。当然，这只是通常而言，并不绝对。</p>
<h1 id="go语言环境安装"><a class="markdownIt-Anchor" href="#go语言环境安装">#</a> Go 语言环境安装</h1>
<p><strong>打开 Go 语言的<a href="https://golang.google.cn/dl/">官网下载</a></strong></p>
<h2 id="windowswin11"><a class="markdownIt-Anchor" href="#windowswin11">#</a> <strong>Windows(win11)</strong></h2>
<ol>
<li>找到 windows 系统对应的包进行下载，例如这里选择种类 (Kind) 为压缩包 (Archive)，系统 (OS) 为 Windows，64 位 (x86-64) 进行下载</li>
<li>下载好后将压缩包进行解压</li>
<li>文件资源管理器 ==&gt; 右键此电脑 ==&gt; 属性 ==&gt; 高级系统设置 ==&gt; 环境变量</li>
<li>新建变量 GO_HOME，变量值设置为刚刚解压的 go 文件</li>
<li>编辑 Path 变量，在 Path 变量中新建：% GO_HOME%\bin</li>
<li>按 win+r 键，输入 cmd，打开命令窗口，使用 go version 检查环境是否配置完成，如果出现 go 语言的版本，则表明配置成功</li>
</ol>
<h2 id="linuxunbuntu"><a class="markdownIt-Anchor" href="#linuxunbuntu">#</a> <strong>Linux(Unbuntu)</strong></h2>
<ol>
<li>
<p>使用 uname -a (其他 Linux 系统指令自行查找) 指令查看系统指令集，我这里是 x86_64</p>
</li>
<li>
<p>找到 Linux 系统对应的包进行下载，例如这里选择种类 (Kind) 为压缩包 (Archive)，系统 (OS) 为 Linux，指令集 x86_64</p>
</li>
<li>
<p>打开到下载路径，然后使用指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf go压缩包名(自行替换) -C /usr/local</span><br></pre></td></tr></table></figure>
<p>进行解压，解压目标路径为 /usr/local</p>
</li>
<li>
<p>使用 vim 修改 /etc/profile 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>在文件最后添加内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br></pre></td></tr></table></figure>
<p>保存退出。</p>
</li>
<li>
<p>调用指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 go version 命令检查是否配置成功，如果出现 go 语言的版本，则标明配置成功。</p>
</li>
</ol>
<h2 id="编译运行"><a class="markdownIt-Anchor" href="#编译运行">#</a> 编译运行</h2>
<p>使用 go build FileName.go 来编译 go 文件，编译后会出现相应的可执行文件，进行执行即可，例如编写文件 Hello.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后对其进行编译运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译</span></span><br><span class="line">go build Hello.go</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行，Windows系统下会生成Hello.exe，直接双击执行即可</span></span><br><span class="line">./Hello</span><br></pre></td></tr></table></figure>
<p>也可以使用 go run 指令直接运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go run Hello.go</span><br></pre></td></tr></table></figure>
<p>但对于代码较多的文件并不推荐使用 go run，最好还是先编译再执行。</p>
<h1 id="go基础语法"><a class="markdownIt-Anchor" href="#go基础语法">#</a> Go 基础语法</h1>
<h2 id="注意点"><a class="markdownIt-Anchor" href="#注意点">#</a> 注意点</h2>
<ul>
<li>注释的方式和 C 语言一致。</li>
<li>运算符、流程控制等不再赘述，与其他语言基本保持一致。</li>
<li>需要注意的是使用 switch 时，不再需要使用 break 来避免穿透现象，Go 语言的 switch 没有穿透现象。</li>
<li>Go 语言中没有 while 和 do while 循环，仅有 for 循环。</li>
<li><strong>Go 语言的变量声明出来就必须调用，不调用会报错！</strong></li>
<li>Go 语言结尾不需要添加分号来标志语句结束。</li>
<li><strong>Go 语言流程控制语句，大括号必须跟在关键词后面，不能另起一行，例如：只有 if condition {正确</strong></li>
<li><strong>Go 语言的 if 语句，for 循环，switch 语句不需要使用小括号，如 switch 直接写 switch key {}</strong></li>
</ul>
<h2 id="变量声明与赋值"><a class="markdownIt-Anchor" href="#变量声明与赋值">#</a> 变量声明与赋值</h2>
<p>声明一个变量 s1，并指定其类型为 string 类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span></span><br></pre></td></tr></table></figure>
<p>直接赋值，让编译器自行推导其类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;String&quot;</span></span><br></pre></td></tr></table></figure>
<p>短变量声明，这种声明方式仅能在函数的内部使用</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s3 := <span class="string">&quot;String&quot;</span></span><br></pre></td></tr></table></figure>
<p>匿名变量，用于接受一些不需要使用的值，例如接受数组索引</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_<span class="comment">//下划线表示匿名变量</span></span><br></pre></td></tr></table></figure>
<h2 id="for-range"><a class="markdownIt-Anchor" href="#for-range">#</a> <mark>for range</mark></h2>
<p>for 循环的另一种使用方式，和 python 类似，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">//导入fmt包，这个包应该是用于io流的</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//声明数组arr</span></span><br><span class="line">	arr := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line">    <span class="comment">//使用for range遍历arr数组，使用匿名变量接收数组索引，i接收数组的值</span></span><br><span class="line">	<span class="keyword">for</span> _, i := <span class="keyword">range</span> arr &#123;</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">		fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组与切片"><a class="markdownIt-Anchor" href="#数组与切片">#</a> <mark>数组与切片</mark></h2>
<p>声明一个长度为 5 的 int 数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 [<span class="number">5</span>]<span class="type">int</span></span><br></pre></td></tr></table></figure>
<p>声明并初始化一个 int 数组，其中… 表示让编译器自行判断数组长度</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
<p>短变量声明法声明一个数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr3 := [...]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
<p>多维数组不再赘述<br>
需要注意的是，Go 语言中的数组是值类型而非引用类型，换言之，传递时进行的是值传递而非指针传递</p>
<hr>
<p>声明一个 int 切片，切片类似于 C 语言的数组，属于引用类型，传递时是指针传递而非值传递</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="type">int</span></span><br></pre></td></tr></table></figure>
<p>使用 make 函数初始化一个切片，其变量类型 int 可变，len 为切片长度，cap 为切片容量，cap 可省略</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice2 []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span><br></pre></td></tr></table></figure>
<p>短变量声明法，声明一个切片</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice3 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>
<p>从数组中直接切出一个切片，区间为 [startIndex, endIndex)，左闭右开。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := arr[startIndex:endIndex]</span><br><span class="line"><span class="comment">//省略startIndex表示从0开始切，省略endIndex表示切到结尾，两者可以都省略。</span></span><br><span class="line"><span class="comment">//从arr中切出的切片s本质是使用指针指向arr的位置，所以修改切片s时可以修改到数组arr。</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a class="markdownIt-Anchor" href="#函数">#</a> <mark>函数</mark></h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">func 函数名(参数列表) (返回值)&#123;</span></span><br><span class="line"><span class="comment">    函数体</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//案例1，空参数，空返回：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例2，固定参数：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cout</span><span class="params">(str <span class="type">string</span>)</span></span> (ret <span class="type">bool</span>) &#123;</span><br><span class="line">	fmt.Println(str)</span><br><span class="line">	ret = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例3，可变参数：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intSum</span><span class="params">(num ...<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;<span class="comment">//使用...来表示可变参数</span></span><br><span class="line">    <span class="comment">//可变参数可以与固定参数同时出现，但必须置后，例如：a int, b ...int</span></span><br><span class="line">	ret := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, arg := <span class="keyword">range</span> num &#123;</span><br><span class="line">		ret = ret + arg</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例4，多个返回值：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(a, b <span class="type">int</span>)</span></span>(sum, sub <span class="type">int</span>)&#123;</span><br><span class="line">    <span class="comment">//当a,b的类型相同时，可以进行简写，sum和sub同理</span></span><br><span class="line">    sum = a + b</span><br><span class="line">    sub = a - b</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sayHello()</span><br><span class="line">	ok := cout(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">	fmt.Println(ok)</span><br><span class="line">	<span class="comment">//可变参数</span></span><br><span class="line">	fmt.Println(intSum(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">	fmt.Println(intSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">    <span class="comment">//忽略返回的sum，仅接受sub并打印</span></span><br><span class="line">	_, sub := calc(<span class="number">20</span>, <span class="number">10</span>)</span><br><span class="line">	fmt.Println(sub)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Go 语言的函数中并不存在默认参数。</p>
<h2 id="函数指针与回调函数"><a class="markdownIt-Anchor" href="#函数指针与回调函数">#</a> 函数指针与回调函数</h2>
<p>与 C 语言的函数指针和回调函数类似，写个案例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(x, y <span class="type">int</span>, op <span class="keyword">func</span>(<span class="type">int</span>, <span class="type">int</span>)</span></span> <span class="type">int</span>) <span class="type">int</span>&#123;</span><br><span class="line">    <span class="comment">//这是一个回调函数，参数op是一个函数，该函数的参数列表为两个int类型，返回值是int类型</span></span><br><span class="line">    <span class="keyword">return</span> op(x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    v := add<span class="comment">//函数指针</span></span><br><span class="line">    v(<span class="number">1</span>, <span class="number">2</span>)<span class="comment">//使用函数指针调用函数</span></span><br><span class="line">    fmt.Println(calc(<span class="number">100</span>, <span class="number">200</span>, add))<span class="comment">//调用回调函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="defer延迟执行"><a class="markdownIt-Anchor" href="#defer延迟执行">#</a> defer: 延迟执行</h2>
<p>defer 语句会在函数将要结束时才执行，具有延迟调用的特性 (类似于析构)。</p>
<p>其采用栈结构，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Start...&quot;</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="number">3</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;End...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Start...</span><br><span class="line">End...</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>defer 通常用于处理资源释放问题，例如资源清理，文件关闭，解锁及记录时间等。</p>
<h2 id="匿名函数与闭包"><a class="markdownIt-Anchor" href="#匿名函数与闭包">#</a> <mark>匿名函数与闭包</mark></h2>
<p>匿名函数，懂的都懂。与函数唯一的区别在于不写名字，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">	&#125;() <span class="comment">//结尾使用()调用匿名函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>闭包 = 函数 + 外层变量调用，举个例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(name <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义一个函数a，其需要一个类型为string的name参数，返回值是一个函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Hello &quot;</span>, name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := a(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">	r()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，在这个示例中，函数 a 中的匿名函数调用到了它外层的函数 a 的变量，这样的使用方式叫做闭包。</p>
<p>再来看看示例 2：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckSuffix</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(file <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个函数CheckSuffix用于检测文件名后缀，该函数需要一个suffix(后缀)的string参数</span></span><br><span class="line">    <span class="comment">//其返回值为一个函数，返回值函数需要一个file(文件)的string参数，该函数返回值为string类型</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(file <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        <span class="comment">//使用strings提供的HasSuffix检测file的后缀是否是suffix，如果是，则返回true，不是则返回false</span></span><br><span class="line">		<span class="keyword">if</span> !strings.HasSuffix(file, suffix) &#123;</span><br><span class="line">            <span class="comment">//如果后缀不对，则将其添加后缀再返回</span></span><br><span class="line">			<span class="keyword">return</span> file + suffix</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//如果后缀正确，则直接返回file即可</span></span><br><span class="line">		<span class="keyword">return</span> file</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//测试调用</span></span><br><span class="line">	r := CheckSuffix(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">	ret := r(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">	fmt.Println(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的，对于函数 CheckSuffix 中的匿名函数，其也调用了外层的变量，那么这就是一个闭包的使用。</p>
<p>需要注意，内部的匿名函数是可以修改到外层变量的，如果我要这样使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckSuffix</span><span class="params">(suffix <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(file, suf <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="comment">//定义一个函数CheckSuffix用于检测文件名后缀，该函数需要一个suffix(后缀)的string参数</span></span><br><span class="line">	<span class="comment">//其返回值为一个函数，返回值函数需要一个file(文件)的string参数，该函数返回值为string类型</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(file, suf <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">		<span class="comment">//改变代码，变量suf，如果suf是以.为开头的string，那么将suf的值赋给suffix</span></span><br><span class="line">		<span class="keyword">if</span> strings.HasPrefix(suf, <span class="string">&quot;.&quot;</span>) &#123;</span><br><span class="line">			suffix = suf</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//使用strings提供的HasSuffix检测file的后缀是否是suffix，如果是，则返回true，不是则返回false</span></span><br><span class="line">		<span class="keyword">if</span> !strings.HasSuffix(file, suffix) &#123;</span><br><span class="line">			<span class="comment">//如果后缀不对，则将其添加后缀再返回</span></span><br><span class="line">			<span class="keyword">return</span> file + suffix</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果后缀正确，则直接返回file即可</span></span><br><span class="line">		<span class="keyword">return</span> file</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//测试调用</span></span><br><span class="line">	r := CheckSuffix(<span class="string">&quot;.txt&quot;</span>)</span><br><span class="line">	ret := r(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;.docx&quot;</span>)</span><br><span class="line">	ret2 := r(<span class="string">&quot;李四&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">	fmt.Println(ret, ret2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现，输出结果为</p>
<p>张三.docx   李四.docx</p>
<p>也就是说，对于 suffix 的修改是持续生效的，并非只作用于匿名函数内部</p>
<p>如果用 lambda 表达式来说明，那么它应该相当于 [&amp;](我个人推测)</p>
<h2 id="panic与recover"><a class="markdownIt-Anchor" href="#panic与recover">#</a> panic 与 recover</h2>
<p>Go 语言追求简洁优雅，所以，Go 语言不支持传统的 try…catch…finally 这种异常，因为 Go 语言的设计者们认为，将异常与控制结构混在一起会很容易使得代码变得混乱。因为开发者很容易滥用异常，甚至一个小小的错误都抛出一个异常。在 Go 语言中，使用多值返回来返回错误。不要用异常代替错误，更不要用来控制流程。</p>
<p>panic 与 recover 是 Go 的两个内置函数，这两个内置函数用于处理 Go 运行时的错误，panic 用于主动抛出错误，recover 用来捕获 panic 抛出的错误。</p>
<p>其中 recover 通常搭配 defer 使用，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello in a&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//defer recover需要写在pannic的前面，否则会报错</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		err := <span class="built_in">recover</span>()<span class="comment">//使用recover捕获错误</span></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="built_in">panic</span>(<span class="string">&quot;panic in b&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">c</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello in c&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//测试调用</span></span><br><span class="line">	a()</span><br><span class="line">	b()</span><br><span class="line">	c()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指针与c语言基本无异不再赘述"><a class="markdownIt-Anchor" href="#指针与c语言基本无异不再赘述">#</a> 指针与 C 语言基本无异，不再赘述</h2>
<h2 id="type"><a class="markdownIt-Anchor" href="#type">#</a> type</h2>
<p>作用差不多相当于 typedef，使用如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给int取一个别名叫Int</span></span><br><span class="line"><span class="keyword">type</span> Int = <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a Int</span><br><span class="line">	a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> b MyInt</span><br><span class="line">	b = <span class="number">20</span></span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结构体"><a class="markdownIt-Anchor" href="#结构体">#</a> <mark>结构体</mark></h2>
<h3 id="定义结构体"><a class="markdownIt-Anchor" href="#定义结构体">#</a> 定义结构体</h3>
<p>使用方法和 C 语言类似，使用 type 和 struct 关键字来定义一个结构体，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义人类结构体</span></span><br><span class="line"><span class="keyword">type</span> people <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int8</span></span><br><span class="line">	city <span class="type">string</span></span><br><span class="line">	<span class="comment">//这里也可以写成  name, city string 类似于函数的参数类型简写</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//实例化</span></span><br><span class="line">	<span class="keyword">var</span> p people</span><br><span class="line">	p.name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">	p.age = <span class="number">18</span></span><br><span class="line">	p.city = <span class="string">&quot;北京&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;p=%v\n&quot;</span>, p)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//匿名结构体：</span></span><br><span class="line">	<span class="keyword">var</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">		name    <span class="type">string</span></span><br><span class="line">		married <span class="type">bool</span></span><br><span class="line">	&#125;</span><br><span class="line">	user.name = <span class="string">&quot;李四&quot;</span></span><br><span class="line">	user.married = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体指针</span></span><br><span class="line">	<span class="keyword">var</span> p2 = <span class="built_in">new</span>(people)</span><br><span class="line">	<span class="comment">//正常的结构体指针成员调用方式：</span></span><br><span class="line">	(*p2).name = <span class="string">&quot;王五&quot;</span></span><br><span class="line">	<span class="comment">//对于结构体指针，Go语言可以直接使用星号调用其成员，类似于-&gt;</span></span><br><span class="line">	p2.age = <span class="number">18</span></span><br><span class="line">	p2.city = <span class="string">&quot;上海&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, p2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//取结构体的地址进行实例化：</span></span><br><span class="line">	p3 := &amp;people&#123;&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, p3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构体初始化"><a class="markdownIt-Anchor" href="#结构体初始化">#</a> 结构体初始化</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义人类结构体</span></span><br><span class="line"><span class="keyword">type</span> people <span class="keyword">struct</span> &#123;</span><br><span class="line">	name, city <span class="type">string</span></span><br><span class="line">	age        <span class="type">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//1.键值对初始化：</span></span><br><span class="line">	p := people&#123;</span><br><span class="line">		name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">		age:  <span class="number">18</span>, <span class="comment">//需要注意，每一个值后面都需要加逗号，最后一行也是，否则会报错，city会被初始化为空串</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, p)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.值的列表进行初始化</span></span><br><span class="line">	p2 := &amp;people&#123; <span class="comment">//列表初始化时，需要值和结构体成员一一对应</span></span><br><span class="line">		<span class="string">&quot;李四&quot;</span>,</span><br><span class="line">		<span class="string">&quot;北京&quot;</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, p2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数">#</a> 构造函数</h3>
<p>Go 语言的结构体没有构造函数，但是可以自己实现。例如，实现 people 的构造函数：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">type</span> people <span class="keyword">struct</span> &#123;</span><br><span class="line">	name, city <span class="type">string</span></span><br><span class="line">	age        <span class="type">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPeople</span><span class="params">(name, city <span class="type">string</span>, age <span class="type">int8</span>)</span></span> *people &#123;</span><br><span class="line">	<span class="comment">//结构体是值类型，所以返回指针更节省空间</span></span><br><span class="line">	<span class="keyword">return</span> &amp;people&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		city: city,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := newPeople(<span class="string">&quot;张三哥&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="type">int8</span>(<span class="number">18</span>))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;type:%T value:%#v\n&quot;</span>, p1, p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="匿名结构体与结构体嵌套"><a class="markdownIt-Anchor" href="#匿名结构体与结构体嵌套">#</a> 匿名结构体与结构体嵌套</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">//Go语言结构体中的字段可以匿名</span></span><br><span class="line">	<span class="type">string</span></span><br><span class="line">	<span class="type">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := Person&#123;</span><br><span class="line">		<span class="string">&quot;小王子&quot;</span>,</span><br><span class="line">		<span class="number">18</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(p1)</span><br><span class="line">	<span class="comment">//访问时通过其类型进行访问，但需要注意，使用匿名字段时需要避免类型重复</span></span><br><span class="line">	fmt.Println(p1.<span class="type">string</span>, p1.<span class="type">int8</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用匿名结构体，对结构体进行嵌套</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Address struct</span></span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">	province, city <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person stuct</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name, gender <span class="type">string</span></span><br><span class="line">	age          <span class="type">int8</span></span><br><span class="line">	<span class="comment">//嵌套另外一个结构体</span></span><br><span class="line">	<span class="comment">//address      Address</span></span><br><span class="line">	<span class="comment">//匿名嵌套一个结构体</span></span><br><span class="line">	Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := Person&#123;</span><br><span class="line">		name:   <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">		gender: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">		age:    <span class="number">18</span>,</span><br><span class="line">		Address: Address&#123;</span><br><span class="line">			province: <span class="string">&quot;河北&quot;</span>,</span><br><span class="line">			city:     <span class="string">&quot;石家庄&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(p1)</span><br><span class="line">	<span class="comment">//使用匿名结构体嵌套，调用匿名结构体中的字段时，会首先在结构体中检索</span></span><br><span class="line">	<span class="comment">//若未检索到该字段，则会去匿名结构体中进行查找</span></span><br><span class="line">	fmt.Println(p1.name, p1.province)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法和接收者"><a class="markdownIt-Anchor" href="#方法和接收者">#</a> 方法和接收者</h3>
<p>Go 语言中方法 (Method) 是一种作用域特定类型变量的函数</p>
<p>这种特定类型变量叫做接收者 (Receiver)</p>
<p>接收者的概念就类似于其他语言中的 this 或者 self</p>
<p>方法的定义格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(接收者变量 接收者类型)</span></span> 方法名(参数列表)(返回此参数)&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个结构体，以大写字母开头，那么它通常是对外部可见的，最好补充注释</span></span><br><span class="line"><span class="comment">// Person is a struct</span></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// NewPeople is a constructor of type People</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPeople</span><span class="params">(name <span class="type">string</span>, age <span class="type">int8</span>)</span></span> *People &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;People&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="comment">// Dream is a method of type People</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p People)</span></span> Dream() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s的梦想是学好Go语言！\n&quot;</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SetAge is used to modify the age of People types</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span></span> SetAge(newAge <span class="type">int8</span>) &#123;</span><br><span class="line">	p.age = newAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p1 := NewPeople(<span class="string">&quot;张三&quot;</span>, <span class="type">int8</span>(<span class="number">18</span>))</span><br><span class="line">	<span class="comment">//正常写法：(*p1).Dream()</span></span><br><span class="line">	<span class="comment">//也可以写为：</span></span><br><span class="line">	p1.Dream()</span><br><span class="line"></span><br><span class="line">	fmt.Println(p1.age)</span><br><span class="line">	p1.SetAge(<span class="type">int8</span>(<span class="number">24</span>))</span><br><span class="line">	fmt.Println(p1.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Go 语言中，接收者类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。</p>
<p><strong>但是只能给自己的包中的类型定义方法。</strong></p>
<p>可以通过 type 关键字，基于 int 定义一个新的 MyInt 类型，然后为其定义方法。</p>
<h3 id="结构体继承"><a class="markdownIt-Anchor" href="#结构体继承">#</a> 结构体继承</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用结构体实现类似继承的效果</span></span><br><span class="line"><span class="comment">// 基类Animal</span></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Animal的方法move</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span></span> move() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s会动\n&quot;</span>, a.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类Dog</span></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	Feet <span class="type">int8</span></span><br><span class="line">	<span class="comment">//继承基类Animal</span></span><br><span class="line">	*Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dog的方法bark</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span></span> bark() &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s会汪汪汪\n&quot;</span>, d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	d1 := &amp;Dog&#123;</span><br><span class="line">		Feet: <span class="number">4</span>,</span><br><span class="line">		Animal: &amp;Animal&#123;</span><br><span class="line">			name: <span class="string">&quot;旺财&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	d1.bark()</span><br><span class="line">	<span class="comment">//通过子类调用其父类的方法</span></span><br><span class="line">	d1.move()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结构体字段的可见性"><a class="markdownIt-Anchor" href="#结构体字段的可见性">#</a> 结构体字段的可见性</h3>
<p>Go 语言的结构体字段，如果开头字母是大写的，那么就是公开的，可以被外部访问的 (类似于 public)</p>
<p>如果开头字母是小写的，那么就是私有的，只能被定义该结构体的包中使用 (类似于 protected)</p>
<h3 id="结构体与json序列化"><a class="markdownIt-Anchor" href="#结构体与json序列化">#</a> 结构体与 JSON 序列化</h3>
<p>JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。</p>
<p>JSON 键值对是用来保存 JS 对象的一种方式：</p>
<ol>
<li>键 / 值对组合中的键名写在前面，并用双引号包裹</li>
<li>使用冒号分隔</li>
<li>然后紧接着值</li>
<li>多个键值之间用逗号分隔</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id   <span class="type">int</span></span><br><span class="line">	Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newStudent</span><span class="params">(id <span class="type">int</span>, name <span class="type">string</span>)</span></span> student &#123;</span><br><span class="line">	<span class="keyword">return</span> student&#123;</span><br><span class="line">		Id:   id,</span><br><span class="line">		Name: name,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> class <span class="keyword">struct</span> &#123;</span><br><span class="line">	Title   <span class="type">string</span></span><br><span class="line">	Student []student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//创建一个班级变量c1</span></span><br><span class="line">	c1 := class&#123;</span><br><span class="line">		Title:   <span class="string">&quot;火箭班&quot;</span>,</span><br><span class="line">		Student: <span class="built_in">make</span>([]student, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//往班级c1中添加学生</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		tmpStu := newStudent(i, fmt.Sprintf(<span class="string">&quot;stu%02d&quot;</span>, i))</span><br><span class="line">		c1.Student = <span class="built_in">append</span>(c1.Student, tmpStu)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//fmt.Printf(&quot;%#v\n&quot;, c1)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//JSON序列化：Go语言中的数据-&gt;JSON格式的字符串</span></span><br><span class="line">	<span class="comment">//使用json包中提供的marshal方法进行json序列化</span></span><br><span class="line">	<span class="comment">//marshal返回两个值，第一个是data，第二个是err信息</span></span><br><span class="line">	<span class="comment">//marshal需要一个参数，即需要序列化的数据</span></span><br><span class="line">	data, err := json.Marshal(c1)</span><br><span class="line">	<span class="comment">//对返回的err进行判断，如果err不为空，那么打印err信息，并退出程序</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;json marshal failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//打印序列化后的数据进行确认</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, data)</span><br><span class="line">	<span class="comment">//fmt.Printf(&quot;%s\n&quot;, data)</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//JSON反序列化：JSON格式的字符串-&gt;Go语言中的数据</span></span><br><span class="line">	jsonStr := <span class="string">`&#123;&quot;Title&quot;:&quot;火箭班&quot;,&quot;Student&quot;:[&#123;&quot;Id&quot;:0,&quot;Name&quot;:&quot;stu00&quot;&#125;,&#123;&quot;Id&quot;:1,&quot;Name&quot;:&quot;stu01&quot;&#125;,&#123;&quot;Id&quot;:2,&quot;Name&quot;:&quot;stu02&quot;&#125;]&#125;`</span></span><br><span class="line">	<span class="comment">//使用c2对转换后的数据进行接受</span></span><br><span class="line">	<span class="keyword">var</span> c2 class</span><br><span class="line">	<span class="comment">//使用json包中的Unmarshal方法，对其进行反序列化</span></span><br><span class="line">	<span class="comment">//所需参数为原始json字符串的字节流，与存储容器</span></span><br><span class="line">	<span class="comment">//将jsonStr强转为字节流，取c2地址进行指针传递以使其能够存储</span></span><br><span class="line">	<span class="comment">//返回一个值为err信息，需要接收</span></span><br><span class="line">	err = json.Unmarshal([]<span class="type">byte</span>(jsonStr), &amp;c2)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">//对err进行判断</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;json unmarshal failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, c2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果结构体中的字段首字母变为小写，那么其将对外不可见。</p>
<p>则使用 json 包中的方法时，json 的方法并不能够调用其字段，会导致错误。</p>
<h3 id="结构体标签tag"><a class="markdownIt-Anchor" href="#结构体标签tag">#</a> 结构体标签 (Tag)</h3>
<p>Tag 用于解决其他语言字段首字母小写与 Go 语言字段首字母大写不兼容的问题</p>
<p>Tag 是结构体的元信息，可以在运行的时候通过反射的机制读取出来。</p>
<p>Tag 在结构体字段的后方定义，由一对反引号 (ESC 下面那个键) 包裹起来，具体格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每对键值对中间用空格分隔</span></span><br><span class="line"><span class="string">`key1:&quot;value1&quot; key2:&quot;value2&quot;`</span></span><br></pre></td></tr></table></figure>
<p>注意：为结构体编写 Tag 时，必须严格遵守键值对的规则。结构体标签的解析代码容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正常取值。</p>
<p>例如：不要在 key 和 value 之间添加空格</p>
<p>具体使用如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> class <span class="keyword">struct</span> &#123;</span><br><span class="line">	Title   <span class="type">string</span> <span class="string">`json:&quot;title&quot;`</span></span><br><span class="line">	Student []student</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样就可以使class在json序列化时，字段名被转换为title</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="小练习"><a class="markdownIt-Anchor" href="#小练习">#</a> 小练习：</h2>
<p>实现学员信息管理系统，包含以下功能:</p>
<ol>
<li>添加学员信息</li>
<li>编辑学员信息</li>
<li>展示所有学员信息</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//学员信息管理系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.添加学员信息</span></span><br><span class="line"><span class="comment">//2.编辑学员信息</span></span><br><span class="line"><span class="comment">//3.展示所有学员信息</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showMenu</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;欢迎来到学员信息管理系统&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;1.添加学员&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;2.编辑学员信息&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;3.展示所有学员信息&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;4.退出系统&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get user input infomation of student</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNewStu</span><span class="params">()</span></span> *student &#123;</span><br><span class="line">	<span class="keyword">var</span> id, name, class <span class="type">string</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;请按要求输入学员信息&quot;</span>)</span><br><span class="line">	fmt.Print(<span class="string">&quot;请输入学员的学号：&quot;</span>)</span><br><span class="line">	fmt.Scanln(&amp;id)</span><br><span class="line"></span><br><span class="line">	fmt.Print(<span class="string">&quot;请输入学员的姓名：&quot;</span>)</span><br><span class="line">	fmt.Scanln(&amp;name)</span><br><span class="line"></span><br><span class="line">	fmt.Print(<span class="string">&quot;请输入学员的班级：&quot;</span>)</span><br><span class="line">	fmt.Scanln(&amp;class)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> newStudent(id, name, class)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sms := newStuManSys()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//1.打印系统菜单</span></span><br><span class="line">		showMenu()</span><br><span class="line">		fmt.Println(<span class="string">&quot;请输入你要操作的序号&quot;</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//2.等待用户选择执行的选项</span></span><br><span class="line">		<span class="keyword">var</span> choice <span class="type">int</span></span><br><span class="line">		fmt.Scanf(<span class="string">&quot;%d\n&quot;</span>, &amp;choice)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//3.执行用户选择的选项</span></span><br><span class="line">		<span class="keyword">switch</span> choice &#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			sms.addStu(getNewStu())</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			sms.editStu(getNewStu())</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			sms.showStu()</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="comment">//退出</span></span><br><span class="line">			os.Exit(<span class="number">0</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//student.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//student struct</span></span><br><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">	id, class, name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//constructor of student</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newStudent</span><span class="params">(id, name, class <span class="type">string</span>)</span></span> *student &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;student&#123;</span><br><span class="line">		id:    id,</span><br><span class="line">		name:  name,</span><br><span class="line">		class: class,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//studentManageSystem struct</span></span><br><span class="line"><span class="keyword">type</span> stuManSys <span class="keyword">struct</span> &#123;</span><br><span class="line">	allStudents []*student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//constructor of stuManSys</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newStuManSys</span><span class="params">()</span></span> *stuManSys &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;stuManSys&#123;</span><br><span class="line">		allStudents: <span class="built_in">make</span>([]*student, <span class="number">0</span>, <span class="number">100</span>),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Method of adding stu belonging to stuManSys</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stuManSys)</span></span> addStu(newStu *student) &#123;</span><br><span class="line">	s.allStudents = <span class="built_in">append</span>(s.allStudents, newStu)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Method of editing stu belonging to stuManSys</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stuManSys)</span></span> editStu(newStu *student) &#123;</span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> s.allStudents &#123;</span><br><span class="line">		<span class="keyword">if</span> newStu.id == v.id &#123;</span><br><span class="line">			s.allStudents[i] = newStu</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;输入学号有误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Method of showing stu belonging to stuManSys</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *stuManSys)</span></span> showStu() &#123;</span><br><span class="line">	<span class="keyword">for</span> _, i := <span class="keyword">range</span> s.allStudents &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;学号:%s\t姓名:%s\t班级:%s\n&quot;</span>, i.id, i.name, i.class)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="go语言-包package"><a class="markdownIt-Anchor" href="#go语言-包package">#</a> <mark>Go 语言 - 包 (package)</mark></h1>
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍">#</a> 介绍</h2>
<p>包 (package) 是多个 Go 源码的集合，是一种高级的代码复用方案，Go 语言提供了很多内置包，如 fmt、os、io 等</p>
<h2 id="定义包"><a class="markdownIt-Anchor" href="#定义包">#</a> 定义包</h2>
<p>可以根据自己的需要创建自己的包。</p>
<p>一个包可以简单的理解为一个存放.go 文件的文件夹。</p>
<p>该文件夹下面的所有 go 文件都要在代码的第一行添加如下代码，声明该文件归属的包。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名</span><br></pre></td></tr></table></figure>
<p>注意事项：</p>
<ul>
<li>一个文件夹下面只能有一个包，同样一个包的文件不能在多个文件夹下</li>
<li>包名可以和文件夹名不同，包名不能包含 - 符号</li>
<li>包名为 main 的包为应用程序的入口包，编译不包含 main 包的源代码时不会得到可执行文件</li>
</ul>
<h2 id="可见性"><a class="markdownIt-Anchor" href="#可见性">#</a> 可见性</h2>
<p>如果想在一个包中引用另外一个包里的标识符 (如变量、常量、类型、函数等) 时，该标识符必须是对外可见的 (public)</p>
<p>在 Go 语言中只需要将标识符的首字母大写，就可以让标识符对外可见了</p>
<p><strong>示例：</strong></p>
<p>文件路径：/GoLearn/package_demo/calc/add.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> calc</span><br><span class="line"></span><br><span class="line"><span class="comment">// add funciton</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>文件路径：/GoLearn/package_demo/main/main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;GoLearn/package_demo/calc&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(calc.Add(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以给导入的包起别名：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以给导入的包起别名，来规避包名相同的冲突</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	Another_name <span class="string">&quot;GoLearn/package_demo/calc&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(Another_name.Add(<span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="init函数与匿名包"><a class="markdownIt-Anchor" href="#init函数与匿名包">#</a> init 函数与匿名包</h2>
<p>init 函数是一种特殊的函数，它没有参数也没有返回值</p>
<p>在包被导入的时候会自动调用</p>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当仅需要执行包的 init 函数而不需要其内部的数据时，可以使用匿名包的形式，格式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;包的路径&quot;</span></span><br></pre></td></tr></table></figure>
<p>导入包与 init 函数的调用符合栈结构</p>
<p>即先导入者后 init，而 main 包是最先被导入的，所以它的 init 函数会被最后调用</p>
<h1 id="go语言-接口interface"><a class="markdownIt-Anchor" href="#go语言-接口interface">#</a> <mark>Go 语言 - 接口 (interface)</mark></h1>
<p>Go 语言中的接口是一种抽象的类型</p>
<p>一个类型可以实现多个接口，一个接口也可以对应多种类型，二者之间是多对多的关系</p>
<p>接口实现示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> usbFlashDisk <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u usbFlashDisk)</span></span> usbLink() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;U盘已连接&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> phone <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p phone)</span></span> usbLink() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;手机已连接&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个抽象的类型，只要实现了usbLink()这个方法的类型都可以称为usb类型</span></span><br><span class="line"><span class="keyword">type</span> usb <span class="keyword">interface</span> &#123;</span><br><span class="line">	usbLink()<span class="comment">//有参数和返回值的方法，在这里也写上参数和返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口不管你是什么类型，只管你要实现什么方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">link</span><span class="params">(arg usb)</span></span> &#123;</span><br><span class="line">	arg.usbLink()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	u1 := usbFlashDisk&#123;&#125;</span><br><span class="line">	link(u1)</span><br><span class="line">	p1 := phone&#123;&#125;</span><br><span class="line">	link(p1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当一个接口不要求实现任何方法时，该接口是一个空接口</p>
<p>任意结构都满足空接口</p>
<h2 id="值接收者与指针接收者关于接口的差异"><a class="markdownIt-Anchor" href="#值接收者与指针接收者关于接口的差异">#</a> 值接收者与指针接收者关于接口的差异</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mover <span class="keyword">interface</span> &#123;</span><br><span class="line">	move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="type">string</span></span><br><span class="line">	age  <span class="type">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用值接收者实现接口：类型的值和类型的指针都能保存到接口变量中</span></span><br><span class="line"><span class="comment">//func (p person) move() &#123;</span></span><br><span class="line"><span class="comment">//	fmt.Printf(&quot;%s在跑\n&quot;, p.name)</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针接收者实现接口：只有类型指针能够保存到接口变量中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *person)</span></span> move() &#123;</span><br><span class="line">	s := <span class="string">&quot;在跑&quot;</span></span><br><span class="line">	fmt.Println(p.name, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> m mover</span><br><span class="line">	p1 := &amp;person&#123;</span><br><span class="line">		name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">		age:  <span class="number">18</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	m = p1</span><br><span class="line">	m.move()</span><br><span class="line">	fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口内部存储"><a class="markdownIt-Anchor" href="#接口内部存储">#</a> 接口内部存储</h2>
<p>接口内部存储分为两部分：</p>
<ul>
<li>一部分保存其动态类型，用于记录存储变量的类型。</li>
<li>另一部分保存其动态值，用于记录存储变量的值。</li>
</ul>
<p>类型断言：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以给一个接口存储变量的类型进行断言：</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="comment">//定义空接口</span></span><br><span class="line"><span class="keyword">type</span> xxx <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x xxx</span><br><span class="line">    <span class="comment">//任意类型都满足空接口，所以可以传入bool类型</span></span><br><span class="line">    x = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用x.(type)来断言x中保存的变量类型</span></span><br><span class="line">    <span class="comment">//会返回两个值，ret是x的变量值，ok是一个布尔类型，true时表示断言正确，false时表示断言错误</span></span><br><span class="line">    <span class="comment">//ok=false时，ret=string的零值</span></span><br><span class="line">    ret, ok := x.(<span class="type">string</span>)</span><br><span class="line">    <span class="keyword">if</span> !ok &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;不是string类型&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;是字符串类型&quot;</span>, ret)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 switch 进行类型断言：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以给一个接口存储变量的类型进行断言：</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义空接口</span></span><br><span class="line"><span class="keyword">type</span> xxx <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> x xxx</span><br><span class="line">	x = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> v := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;是字符串类型，value：&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;是布尔类型，value：&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;是int类型，value：&quot;</span>, v)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;猜不到了，value：&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="go语言标准库"><a class="markdownIt-Anchor" href="#go语言标准库">#</a> <mark>Go 语言标准库</mark></h1>
<h2 id="time包"><a class="markdownIt-Anchor" href="#time包">#</a> time 包</h2>
<p>time 包提供的部分方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">now := time.Now() <span class="comment">//获取当前时间，返回值是一个对象</span></span><br><span class="line">now.Unix() <span class="comment">//获取时间戳</span></span><br><span class="line">now.UnixNano() <span class="comment">//纳秒时间戳</span></span><br><span class="line">time.Unix() <span class="comment">//时间戳转换为时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以由结构Time的对象调用(比如now)，增加d(Duration是一种时间间隔的枚举类型，规定了时、分、秒等时间间隔)，返回一个Time类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span>Add(d Duration) Time</span><br><span class="line"><span class="comment">//可以由结构Time的对象调用(比如now)，减去另一个Time对象，求出其时间间隔(Duration类型)，并返回</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span>Sub(u Time) Duration</span><br><span class="line"><span class="comment">//判断两个时间是否相等</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span>Equal(u Time) <span class="type">bool</span></span><br><span class="line"><span class="comment">//判断t是否在u之前，是返回真，不是返回假</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span>Before(u Time) <span class="type">bool</span></span><br><span class="line"><span class="comment">//判断t是否在u之后，是返回真，不是返回假</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Time)</span></span>After(u Time) <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器</span></span><br><span class="line"><span class="comment">//使用time.Tick(d Duration)可以设置定时器，定时器本质上是一个通道(channel)</span></span><br><span class="line">tick := time.Tick(time.Second)</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式化</span></span><br><span class="line"><span class="comment">//Go语言的格式化需要按照Y m d H M S为2006 01 02 15 04 05的顺序填入，不能填错</span></span><br><span class="line"><span class="comment">//maybe这个时间是go语言被创造出来的时间，可以记为2006一二三四五，但注意3是下午的15点。</span></span><br><span class="line"><span class="comment">//中间使用的分隔符号可以自行选择，可以用点或者-或者：，如下：</span></span><br><span class="line">ret1 := now.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析字符串类型的时间</span></span><br><span class="line">timeStr := <span class="string">&quot;2023/08/12 09:29:00&quot;</span></span><br><span class="line"><span class="comment">//载入时区，使用LoadLocation函数</span></span><br><span class="line"><span class="comment">//其中loc为时区，err为错误信息，需要进行判断</span></span><br><span class="line">loc, err := time.LoadLocation(<span class="string">&quot;Asia/Shanghai&quot;</span>)<span class="comment">//这里以上海为例</span></span><br><span class="line"><span class="comment">//根据时区解析字符串格式的时间</span></span><br><span class="line">timeObj, err := time.ParseInLocation(<span class="string">&quot;2006/01/02 15:04:05&quot;</span>, timeStr, loc)</span><br><span class="line"><span class="comment">//也可以使用Parse方法直接转换，会转换为UTC时间</span></span><br><span class="line">timeObj, err := time.Parse(<span class="string">&quot;2006/01/02 15:04:05&quot;</span>, timeStr)</span><br></pre></td></tr></table></figure>
<p>具体使用可以看 Go 语言 - 时间对象</p>
<h2 id="os包"><a class="markdownIt-Anchor" href="#os包">#</a> os 包</h2>
<p>os 包提供的部分方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以只读的形式打开路径为path的文件，返回打开的文件和错误信息，错误信息需要判断</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(path <span class="type">string</span>)</span></span>(*File, <span class="type">error</span>)</span><br><span class="line"><span class="comment">//以flag的模式，打开路径为path的文件，其权限为perm(Linux中的权限)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(path <span class="type">string</span>, flag <span class="type">int</span>, perm FileMode)</span></span>(*File, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件指针的方法，读取文件指针的内容，并以字节流的形式存储到b中</span></span><br><span class="line"><span class="comment">//返回值包括读取的字节数n，和错误信息err</span></span><br><span class="line"><span class="comment">//当读取到文件末尾时，错误信息err==io.EOF</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(f *File)</span></span>Read(b []<span class="type">byte</span>)(n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//bufio会先将读取或写入内容写入到缓存区，然后再执行操作，NewReader返回一个对象</span></span><br><span class="line">reader := bufio.NewReader(f *File)</span><br><span class="line"><span class="comment">//调用reader对象的方法ReadString，后面的(&#x27;\n&#x27;)表示读取内容以换行符结尾，注意使用字符而非字符串</span></span><br><span class="line"><span class="comment">//返回值line为读取到的内容，是string类型，err为错误信息</span></span><br><span class="line">line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件的所有内容，返回值为文件内容(字节形式)，和错误信息</span></span><br><span class="line">content, err := ioutil.ReadFile(path)<span class="comment">//该函数于Go 1.16已被废弃，相关内容转移至io包或os包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入字节内容b，返回写入字节数n，和错误信息err</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *File)</span></span>Write(b []<span class="type">byte</span>)(n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *File)</span></span>WriteString(s <span class="type">string</span>)(n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用bufio写入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWriter</span><span class="params">(w io.writer)</span></span> *Writer</span><br><span class="line"><span class="comment">//将s写入到缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *Writer)</span></span>WriteString(s <span class="type">string</span>)(n <span class="type">int</span>, err <span class="type">error</span>)</span><br><span class="line"><span class="comment">//将缓冲区内容写入到磁盘</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *Writer)</span></span>Flush() <span class="type">error</span></span><br></pre></td></tr></table></figure>
<p>打开模式 flag 包括：</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">os.O_WRONLY</td>
<td style="text-align:center">只写</td>
</tr>
<tr>
<td style="text-align:center">os.O_CREATE</td>
<td style="text-align:center">创建文件</td>
</tr>
<tr>
<td style="text-align:center">os.O_RDONLY</td>
<td style="text-align:center">只读</td>
</tr>
<tr>
<td style="text-align:center">os.O_PDWR</td>
<td style="text-align:center">读写</td>
</tr>
<tr>
<td style="text-align:center">os.O_TRUNC</td>
<td style="text-align:center">重写</td>
</tr>
<tr>
<td style="text-align:center">os.O_APPEND</td>
<td style="text-align:center">追加</td>
</tr>
</tbody>
</table>
<p>perm：按照 linux 权限规定：r=4，w=2，x=1</p>
<p><strong>具体使用可以看 Go 语言 - 文件读写</strong></p>
<h2 id="sync包"><a class="markdownIt-Anchor" href="#sync包">#</a> sync 包</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sync.WaitGroup	<span class="comment">//goroutine等待队列</span></span><br><span class="line">sync.Mutex		<span class="comment">//互斥锁，详情可见并发编程-&gt;并发同步和锁-&gt;互斥锁</span></span><br><span class="line">sync.RWMutex	<span class="comment">//读写互斥锁，详情可见并发编程-&gt;并发同步和锁-&gt;读写互斥锁</span></span><br><span class="line">sync.Once		<span class="comment">//保证某段代码在并发情况下必定，且仅执行一次</span></span><br><span class="line">sync.Map		<span class="comment">//Go语言中内置的Map并不是并发安全的Map，这里提供一个并发安全的Map</span></span><br></pre></td></tr></table></figure>
<h2 id="net包"><a class="markdownIt-Anchor" href="#net包">#</a> net 包</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Listen</span><span class="params">(&quot;protocol&quot;, &quot;Port&quot;)</span></span> (Listener, <span class="type">error</span>)<span class="comment">//参数输入样例: &quot;tcp&quot;, &quot;localhost:8080&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l Listener)</span></span> Accept() (Conn, <span class="type">error</span>)<span class="comment">//开启连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Conn)</span></span> Close()<span class="comment">//关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Conn)</span></span> Write(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)<span class="comment">//以字节流的形式发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Dial</span><span class="params">(&quot;protocol&quot;, &quot;address&quot;)</span></span> (Conn, <span class="type">error</span>)<span class="comment">//主动向address发起连接请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Conn)</span></span> Read(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)<span class="comment">//接收对方发送的以字节流形式的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参考输入样例：  &quot;udp&quot;, &amp;UDPAddr&#123;IP:net.IPv4(127,0,0,1),Port:8080,&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenUDP</span><span class="params">(&quot;protocol&quot;, *UDPAddr)</span></span> (*UDPConn, <span class="type">error</span>)</span><br><span class="line"><span class="comment">//读取传来的数据到b中，返回读取字节数n，发送地址addr和错误信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UDPConn)</span></span> ReadFromUDP(b []<span class="type">byte</span>) (n <span class="type">int</span>, addr *UDPAddr, err <span class="type">error</span>)</span><br><span class="line"><span class="comment">//发送字节流b到addr</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UDPConn)</span></span> WriteToUDP(b []<span class="type">byte</span>, addr *UDPAddr) (<span class="type">int</span>, <span class="type">error</span>)</span><br><span class="line"><span class="comment">//主动向addr发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DialUDP</span><span class="params">(network <span class="type">string</span>, laddr *UDPAddr, raddr *UDPAddr)</span></span> (*UDPConn, <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UDPConn)</span></span> Write(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)<span class="comment">//以字节流的形式发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UDPConn)</span></span> Close()<span class="comment">//关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UDPConn)</span></span> ReadFromUDP(b []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)<span class="comment">//接收对方发送的以字节流形式的数据</span></span><br></pre></td></tr></table></figure>
<h1 id="go语言-时间对象"><a class="markdownIt-Anchor" href="#go语言-时间对象">#</a> Go 语言 - 时间对象</h1>
<p>使用示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//获取当前时间</span></span><br><span class="line">	now := time.Now() <span class="comment">//时间对象</span></span><br><span class="line">	fmt.Println(now)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从该时间对象中获取具体的年、月、日、时、分、秒</span></span><br><span class="line">	year := now.Year()</span><br><span class="line">	month := now.Month()</span><br><span class="line">	day := now.Day()</span><br><span class="line">	hour := now.Hour()</span><br><span class="line">	minute := now.Minute()</span><br><span class="line">	second := now.Second()</span><br><span class="line">	fmt.Println(year, month, day, hour, minute, second)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取时间戳：从1970.1.1到现在的秒数</span></span><br><span class="line">	timeStamp1 := now.Unix()     <span class="comment">//该时间戳单位时秒</span></span><br><span class="line">	timeStamp2 := now.UnixNano() <span class="comment">//该时间戳单位是纳秒</span></span><br><span class="line">	fmt.Println(timeStamp1, timeStamp2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将时间戳转换为具体的时间</span></span><br><span class="line">	<span class="comment">//第一个参数sec是秒为单位，第二个参数nsec是纳秒为单位</span></span><br><span class="line">	t := time.Unix(timeStamp1, <span class="number">0</span>)</span><br><span class="line">	fmt.Println(t)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//时间间隔Duration</span></span><br><span class="line">	<span class="comment">//Duration是time包中定义的一种类型，其中枚举了各种时间单位，比如Hour，Second等</span></span><br><span class="line">	sleepTime := <span class="number">5</span></span><br><span class="line">	<span class="comment">//使用time.Duration将int64转换为Duration类型，使得time.Sleep能够识别</span></span><br><span class="line">	<span class="comment">//time.Sleep作用是使程序睡眠</span></span><br><span class="line">	time.Sleep(time.Duration(sleepTime) * time.Second)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">	<span class="comment">//时间差</span></span><br><span class="line">	<span class="comment">//使用now中的Add、Sub方法增加时间或减少时间</span></span><br><span class="line">	t2 := now.Add(time.Hour)</span><br><span class="line">	fmt.Println(t2)</span><br><span class="line">	fmt.Println(t2.Sub(now))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用定时器：</span></span><br><span class="line">    ticker := time.Tick(time.Second)<span class="comment">//定义一个1秒间隔的定时器</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> ticker &#123;</span><br><span class="line">        fmt.Println(i)<span class="comment">//每秒都会执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="go语言-文件读写"><a class="markdownIt-Anchor" href="#go语言-文件读写">#</a> Go 语言 - 文件读写</h1>
<h2 id="os读取具体使用"><a class="markdownIt-Anchor" href="#os读取具体使用">#</a> os 读取具体使用</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	file, err := os.Open(path)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//使用defer关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> temp = <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">128</span>)</span><br><span class="line">		n, err := file.Read(temp)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			fmt.Println(<span class="type">string</span>(temp[:n]))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read from file failed, err:&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//fmt.Println(&quot;read&quot;, n, &quot;bytes from file.&quot;)</span></span><br><span class="line">		fmt.Printf(<span class="type">string</span>(temp[:n]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadByBufio</span><span class="params">(path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	file, err := os.Open(path)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">	reader := bufio.NewReader(file)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			fmt.Println(line)</span><br><span class="line">			fmt.Println(<span class="string">&quot;file read over&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read file failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Print(line)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ReadAll(<span class="string">&quot;./example.txt&quot;</span>)</span><br><span class="line">	ReadByBufio(<span class="string">&quot;./example.txt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="os写入具体使用"><a class="markdownIt-Anchor" href="#os写入具体使用">#</a> os 写入具体使用</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	file, err := os.OpenFile(path, os.O_RDWR|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">	str := <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">	_, err = file.Write([]<span class="type">byte</span>(str))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Writer err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	_, err = file.WriteString(str)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;WriteString err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeByBufio</span><span class="params">(path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	file, err := os.OpenFile(path, os.O_RDWR|os.O_APPEND, <span class="number">0644</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	writer := bufio.NewWriter(file)</span><br><span class="line"></span><br><span class="line">	_, err = writer.WriteString(<span class="string">&quot;Hello World!&quot;</span>) <span class="comment">//将内容写入缓冲区</span></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;WriteString err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	_ = writer.Flush() <span class="comment">//将缓冲区内容写入磁盘</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	write(<span class="string">&quot;./example.txt&quot;</span>)</span><br><span class="line">	writeByBufio(<span class="string">&quot;./example.txt&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="go语言-反射"><a class="markdownIt-Anchor" href="#go语言-反射">#</a> Go 语言 - 反射</h1>
<h1 id="go语言-并发编程"><a class="markdownIt-Anchor" href="#go语言-并发编程">#</a> <mark>Go 语言 - 并发编程</mark></h1>
<h2 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念">#</a> 基本概念</h2>
<p>串行：像串一样，顺序执行。比如先读小学，小学结束读初中，初中结束读高中</p>
<p>并发：同一时间段内执行多个任务。比如上午我要学习和刷视频，可能是学一会儿习，然后刷一会儿视频</p>
<p>并行：同一时刻执行多个任务。比如我在看小说的同时听音乐</p>
<p>进程：程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位</p>
<p>线程：操作系统基于进程开发的轻量级进程，是操作系统调度执行的最小单位</p>
<p>协程：非操作系统提供而是由用户自行创建和控制的用户态‘线程’，比线程更轻量级</p>
<p>并发模型：</p>
<p>业界将如何实现并发编程总结归纳为各式各样的并发模型，常见的有以下几种：</p>
<ol>
<li>线程 &amp; 锁模型</li>
<li>Actor 模型</li>
<li>CSP 模型</li>
<li>Fork&amp;Join 模型</li>
</ol>
<p>Go 语言中的并发程序主要是通过基于 CSP (communicating sequential processes) 的 goroutine 和 channel 来实现，当然也支持使用传统的多线程共享内存的并发模式</p>
<h2 id="goroutine使用"><a class="markdownIt-Anchor" href="#goroutine使用">#</a> goroutine 使用</h2>
<p>使用关键字 go 来开启一个 goroutine，例如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> Hello()<span class="comment">//开启一个goroutine来执行Hello函数</span></span><br></pre></td></tr></table></figure>
<p>具体使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当主goroutine结束时，由它开启的其他goroutine也会立即结束（不一定执行完了）</span></span><br><span class="line"><span class="comment">// 使用sync包中提供的WaitGroup来记录开启的线程是否执行完成，决定是否等待</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">	<span class="comment">//使用wg.Done()通知WaitGroup该线程已执行完毕，将计数牌-1</span></span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//开启一个主goroutine去执行main函数</span></span><br><span class="line">	<span class="comment">//在wg中加入一个计数牌</span></span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> hello() <span class="comment">//开启了一个goroutine去执行hello这个函数</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello Main!&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//阻塞，等待所有goroutine都执行完后再结束程序</span></span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="gomaxprocs"><a class="markdownIt-Anchor" href="#gomaxprocs">#</a> GOMAXPROCS</h3>
<p>通过 runtime 包中的 GOMAXPROCS 可以指定占用的 CPU 数量，Go1.5 版本之后默认使用所有逻辑核心。示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;runtime&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;a:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;b:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	runtime.GOMAXPROCS(<span class="number">4</span>) <span class="comment">//占用4个cpu</span></span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">go</span> a()</span><br><span class="line">	<span class="keyword">go</span> b()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;main:&quot;</span>, i)</span><br><span class="line">	&#125;</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="channel"><a class="markdownIt-Anchor" href="#channel">#</a> channel</h2>
<p>channel 是一种类型，一种引用类型。声明方式如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 <span class="keyword">chan</span> 元素类型</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="type">int</span>	<span class="comment">//声明一个传递整型的通道</span></span><br><span class="line"><span class="keyword">var</span> ch2 <span class="keyword">chan</span> <span class="type">bool</span>	<span class="comment">//声明一个传递布尔型的通道</span></span><br><span class="line"><span class="keyword">var</span> ch3 <span class="keyword">chan</span> []<span class="type">int</span>	<span class="comment">//声明一个传递int切片的通道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//channel声明后需要使用make函数进行初始化</span></span><br><span class="line">ch1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, [缓冲大小])<span class="comment">//缓冲大小是可选的，可以不填</span></span><br></pre></td></tr></table></figure>
<p>发送：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- <span class="number">10</span><span class="comment">//把10发送到通道ch中</span></span><br></pre></td></tr></table></figure>
<p>接受：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x := &lt;-ch 	<span class="comment">//从ch中接受值并赋值给变量x</span></span><br><span class="line">&lt;-ch		<span class="comment">//从ch中接受值，忽略结果</span></span><br></pre></td></tr></table></figure>
<p>关闭：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">close</span>(ch)<span class="comment">//关闭通道ch</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是，在 go 语言中，channel 的关闭并不一定是必须的。通道是可以被垃圾回收机制回收的。</p>
<p>只有在通知接收方 goroutine 所有的数据都发送完毕的时候才需要关闭通道。</p>
<p>关闭后的通道有以下特点：</p>
<ol>
<li>对一个已经关闭的通道发送值会导致 panic</li>
<li>对一个已经关闭的通道进行接收会一直获取值，直到通道为空</li>
<li>对一个已经关闭的并且没有值的通道执行接收操作会得到对应类型的零值</li>
<li>关闭一个已经关闭的通道会导致 panic</li>
</ol>
<h3 id="缓冲"><a class="markdownIt-Anchor" href="#缓冲">#</a> 缓冲</h3>
<p>无缓冲通道又被称为阻塞的通道，创建如下通道：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">	ch &lt;- <span class="number">10</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;send success&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行上面这段代码会导致程序死锁。</p>
<p>这是因为这段代码创建了一个无缓冲区的通道，则该通道无法缓存发送过来的值 10，所以它会一直等待有一个 goroutine 来取走这个值，从而阻塞程序。</p>
<p>而对于有缓冲区的通道：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">	ch &lt;- <span class="number">10</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;send success&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>make 函数里的 1 表示有一个位置的缓冲区，有缓冲区的通道会将发送过来的值暂存值缓冲区，有 goroutine 来取值时，则从缓冲区发送给它。</p>
<p>当缓冲区被存满后，则会变成无缓冲区的阻塞情况。</p>
<h2 id="goroutine与channel联动"><a class="markdownIt-Anchor" href="#goroutine与channel联动">#</a> goroutine 与 channel 联动</h2>
<p>使用示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将1-100的值存入到ch1中</span></span><br><span class="line"><span class="comment">//将ch1中的值取出，求平方，然后存入ch2中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的chan&lt;-表示ch是一个单向通道，它只能够向通道发送值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">		ch &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的&lt;-chan表示ch1是一个单向通道，它只能够从通道中取出值</span></span><br><span class="line"><span class="comment">// chan&lt;-表示ch2是一个单向通道，它只能够向通道发送值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">(ch1 &lt;-<span class="keyword">chan</span> <span class="type">int</span>, ch2 <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="comment">//从通道中取值的方法1</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		temp, ok := &lt;-ch1</span><br><span class="line">		<span class="keyword">if</span> !ok &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		ch2 &lt;- temp * temp</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(ch2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line">	ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> f1(ch1)</span><br><span class="line">	<span class="keyword">go</span> f2(ch1, ch2)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//从通道中取值的方法2</span></span><br><span class="line">	<span class="keyword">for</span> ret := <span class="keyword">range</span> ch2 &#123;</span><br><span class="line">		fmt.Println(ret)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="worker-poolgiriytube池"><a class="markdownIt-Anchor" href="#worker-poolgiriytube池">#</a> worker pool (giriytube 池)</h2>
<p>工作中通常会使用 workerpool 模式，控制 goroutine 的数量，防止 goroutine 泄露和暴涨，简单示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="type">int</span>, results <span class="keyword">chan</span>&lt;- <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> job := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;worker:%d start job:%d\n&quot;</span>, id, job)</span><br><span class="line">		results &lt;- job * <span class="number">2</span></span><br><span class="line">		time.Sleep(time.Millisecond * <span class="number">500</span>)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;worker:%d stop job:%d\n&quot;</span>, id, job)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line">	results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开启3个goroutine</span></span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">		<span class="keyword">go</span> worker(j, jobs, results)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//发送5个任务</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		jobs &lt;- i</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">close</span>(jobs)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		ret := &lt;-results</span><br><span class="line">		fmt.Println(ret)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="select"><a class="markdownIt-Anchor" href="#select">#</a> select</h2>
<p>select 语句的使用类似于 switch，当匹配到其可以执行的操作时，则进行该操作。</p>
<p>需要注意的是，当有多个 case 都满足时，select 并不会顺序执行，而是从中随机抽一个进行执行，使用示例如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> x := &lt;-ch:</span><br><span class="line">			fmt.Println(x)</span><br><span class="line">		<span class="keyword">case</span> ch &lt;- i:</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;default&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并发同步和锁"><a class="markdownIt-Anchor" href="#并发同步和锁">#</a> 并发同步和锁</h2>
<p>有时候在 Go 代码中可能会存在多个 goroutine 同时操作一个资源 (临界区)，这种情况会发生竞态问题 (数据竞态)</p>
<h3 id="互斥锁"><a class="markdownIt-Anchor" href="#互斥锁">#</a> 互斥锁</h3>
<p>互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个 goroutine 可以访问共享资源</p>
<p>Go 语言中使用 sync 包的 Mutex 类型来实现互斥锁，使用方法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局变量x</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x    <span class="type">int64</span></span><br><span class="line">	wg   sync.WaitGroup</span><br><span class="line">	lock sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用两个goroutine，并行给x+50000，形成竞态问题</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++ &#123;</span><br><span class="line">		lock.Lock() <span class="comment">//加锁</span></span><br><span class="line">		x += <span class="number">1</span></span><br><span class="line">		lock.Unlock() <span class="comment">//释放锁</span></span><br><span class="line">	&#125;</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	wg.Add(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	<span class="keyword">go</span> add()</span><br><span class="line">	wg.Wait()</span><br><span class="line">	fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="读写互斥锁"><a class="markdownIt-Anchor" href="#读写互斥锁">#</a> 读写互斥锁</h3>
<p>互斥锁是完全互斥的，但有些时候有些资源仅被少量修改，大量读取时，可以尝试仅添加写锁，而不限制其访问。</p>
<p>使用 sync 包中的 RWMutex 类型实现读写锁，具体如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局变量x</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	x      <span class="type">int64</span></span><br><span class="line">	wg     sync.WaitGroup</span><br><span class="line">	rwLock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟读取操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//添加读锁</span></span><br><span class="line">	rwLock.RLock()</span><br><span class="line">	time.Sleep(time.Millisecond)</span><br><span class="line">	<span class="comment">//释放读锁</span></span><br><span class="line">	rwLock.RUnlock()</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟写入操作</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//添加读写锁</span></span><br><span class="line">	rwLock.Lock()</span><br><span class="line">	x += <span class="number">1</span></span><br><span class="line">	time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">	<span class="comment">//释放读写锁</span></span><br><span class="line">	rwLock.Unlock()</span><br><span class="line">	wg.Done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	start := time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//进行一千次读模拟</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> read()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//进行十次写模拟</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		wg.Add(<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">go</span> write()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	wg.Wait()</span><br><span class="line"></span><br><span class="line">	fmt.Println(time.Now().Sub(start))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="go语言-socket编程"><a class="markdownIt-Anchor" href="#go语言-socket编程">#</a> Go 语言 - socket 编程</h1>
<p>使用 Go 语言内置的 net 包来进行 tcp 或者 udp 通讯</p>
<p><strong>该包所提供的方法，可以查看 Go 语言标准库 -&gt;net 包</strong></p>
<h2 id="tcp样例"><a class="markdownIt-Anchor" href="#tcp样例">#</a> TCP 样例</h2>
<h3 id="server"><a class="markdownIt-Anchor" href="#server">#</a> server</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">	<span class="comment">//处理结束后关闭连接</span></span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//针对当前的连接做数据的发送和接收操作</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		reader := bufio.NewReader(conn)</span><br><span class="line">		<span class="keyword">var</span> buf [<span class="number">128</span>]<span class="type">byte</span></span><br><span class="line">		n, err := reader.Read(buf[:])</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read from conn failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		recv := <span class="type">string</span>(buf[:n])</span><br><span class="line">		fmt.Println(<span class="string">&quot;receive message:&quot;</span>, recv)</span><br><span class="line">		<span class="comment">//把收到的数据返回给客户端</span></span><br><span class="line">		conn.Write([]<span class="type">byte</span>(<span class="string">&quot;ok&quot;</span>))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//1.开启服务，监听端口</span></span><br><span class="line">	address := <span class="string">&quot;localhost:20000&quot;</span></span><br><span class="line">	listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, address)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;listen failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;listen success.&quot;</span>)</span><br><span class="line">		fmt.Println(<span class="string">&quot;Be listening &quot;</span>, address)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">//2.等待客户端来建立连接</span></span><br><span class="line">		conn, err := listen.Accept()</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;accept failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;connect success&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//3.启动一个单独的goroutine去处理连接</span></span><br><span class="line">		<span class="keyword">go</span> process(conn)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="client"><a class="markdownIt-Anchor" href="#client">#</a> client</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//1.与服务端建立连接</span></span><br><span class="line">	conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;localhost:20000&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;dial failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;dial success&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.利用该连接进行数据的发送和接收</span></span><br><span class="line">	input := bufio.NewReader(os.Stdin)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		s, _ := input.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		s = strings.TrimSpace(s)</span><br><span class="line">		<span class="keyword">if</span> strings.ToUpper(s) == <span class="string">&quot;Q&quot;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//给服务端发消息</span></span><br><span class="line">		_, err := conn.Write([]<span class="type">byte</span>(s))</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;send failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//从服务端接收回复的消息</span></span><br><span class="line">		<span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="type">byte</span></span><br><span class="line">		n, err := conn.Read(buf[:])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		fmt.Println(<span class="string">&quot;receive server respond:&quot;</span>, <span class="type">string</span>(buf[:n]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="udp样例"><a class="markdownIt-Anchor" href="#udp样例">#</a> UDP 样例</h2>
<h3 id="server-2"><a class="markdownIt-Anchor" href="#server-2">#</a> server</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	listen, err := net.ListenUDP(<span class="string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">		IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">		Port: <span class="number">30000</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;listen failed, err:&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Be listening 127.0.0.1:30000&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="type">byte</span></span><br><span class="line">		n, addr, err := listen.ReadFromUDP(buf[:])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read from udp failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;receive message:&quot;</span>, <span class="type">string</span>(buf[:n]))</span><br><span class="line">		_, err = listen.WriteToUDP(buf[:n], addr)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;write to&quot;</span>, addr, <span class="string">&quot;failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;send success&quot;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="client-2"><a class="markdownIt-Anchor" href="#client-2">#</a> client</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bufio&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	conn, err := net.DialUDP(<span class="string">&quot;udp&quot;</span>, <span class="literal">nil</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">		IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">		Port: <span class="number">30000</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;dial failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">	input := bufio.NewReader(os.Stdin)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		s, _ := input.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		_, err = conn.Write([]<span class="type">byte</span>(s))</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;send to server failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="type">byte</span></span><br><span class="line">		n, addr, err := conn.ReadFromUDP(buf[:])</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;recv from udp failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(<span class="string">&quot;read from&quot;</span>, addr, <span class="string">&quot;message:&quot;</span>, <span class="type">string</span>(buf[:n]))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>超星刷课脚本安装教程</title>
    <url>/2023/04/03/chaoXingCourse/</url>
    <content><![CDATA[<h1 id="注意"><a class="markdownIt-Anchor" href="#注意">#</a> 注意：</h1>
<ul>
<li>1. 此教程适用于超星学习通，本人并未在其他页面测试，其他学习网页请自行测试</li>
<li>2. 推荐使用浏览器为 chrome (也可以用 fire fox 或者 Microsoft Edge)</li>
<li>3. 此教程使用内容皆为免费内容</li>
<li>4. 此教程仅用于交流学习，用户个人行为与本人无关</li>
</ul>
<h1 id="安装使用"><a class="markdownIt-Anchor" href="#安装使用">#</a> 安装使用：</h1>
<h2 id="1安装油猴tampermonkey插件"><a class="markdownIt-Anchor" href="#1安装油猴tampermonkey插件">#</a> 1. 安装油猴 (Tampermonkey) 插件</h2>
<p>首先点击浏览器右上方扩展程序</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031249183.png" alt="image-20230403124927110"></p>
<p>点击管理扩展程序</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031250310.png" alt="image-20230403125029264"></p>
<p>点击左上角三条线，在侧边栏最下方点击打开 chrome 应用商店。</p>
<p><strong>注意：chrome 浏览器需要科学上网环境才可以使用 chrome 应用商店！</strong></p>
<p>搜索并安装插件 Tampermonkey：</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031252041.png" alt="image-20230403125205986"></p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031252190.png" alt="image-20230403125240143"></p>
<p>未安装用户会显示安装，点击安装即可。</p>
<h2 id="2安装ocs网课助手"><a class="markdownIt-Anchor" href="#2安装ocs网课助手">#</a> 2. 安装 OCS 网课助手</h2>
<p>点击右上方扩展程序，点击已经安装好的 Tampermonkey。</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031256022.png" alt="image-20230403125608979"></p>
<p>点击获取新脚本，点击打开 GreasyFork (油叉)</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031257385.png" alt="image-20230403125748285"></p>
<p>在网页右上角设置语言为简体中文</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031259856.png" alt="image-20230403125904825"></p>
<p>搜索 OCS，安装 OCS 网课助手</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031321073.png" alt="image-20230403130003585"></p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031300271.png" alt="image-20230403130044220"></p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031301489.png" alt="image-20230403130125437"></p>
<p>点击打开 Tampermonkey 菜单，选择管理面板，确认 OCS 为开启状态</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031303530.png" alt="image-20230403130322495"></p>
<p>打开超星学习通，点击要学习的课程，打开任务点，即可使用。</p>
<h2 id="3自动答题配置ocs题库"><a class="markdownIt-Anchor" href="#3自动答题配置ocs题库">#</a> 3. 自动答题，配置 OCS 题库</h2>
<p>打开超星学习通个人空间，找到 OCS 菜单</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031305905.png" alt="image-20230403130515868"></p>
<p>点击方框展开菜单</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031306617.png" alt="image-20230403130608583"></p>
<p>点击通用，点击全局设置</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031306340.png" alt="image-20230403130646296"></p>
<p>点击配置题库</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031321120.png" alt="image-20230403130706973"></p>
<p>点击自动答题教程，根据教程配置题库，配置完成后如下图：</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031322766.png" alt="image-20230403130837638"></p>
<p>其中言溪题库为收费题库，网课小工具题库为免费题库。收费题库有需要可以自行购买。</p>
<p>配置提交设置：</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031310694.png" alt="image-20230403131010647"></p>
<p>根据自己需要选择。</p>
<h2 id="4安装考试脚本"><a class="markdownIt-Anchor" href="#4安装考试脚本">#</a> 4. 安装考试脚本</h2>
<p>打开 GreasyFork (油叉)，搜索并安装脚本：【万能】全平台自动答题脚本</p>
<p><img src="https://raw.githubusercontent.com/roridayo/picBed/master/202304031317433.png" alt="image-20230403131757378"></p>
<p><strong>注意：OCS 和该脚本不能同时启动，使用时，请启用需要用的脚本，关闭另一个。</strong></p>
<p>安装完成即可使用，此脚本主要用于考试。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>chaoxing</tag>
      </tags>
  </entry>
  <entry>
    <title>go-web</title>
    <url>/2023/09/11/go-web/</url>
    <content><![CDATA[<p><strong>用于记录一些学习 Golang Web 开发用到的东西</strong></p>
<h1 id="用户"><a class="markdownIt-Anchor" href="#用户">#</a> 用户</h1>
<h2 id="用户注册-邮箱验证码与uuid"><a class="markdownIt-Anchor" href="#用户注册-邮箱验证码与uuid">#</a> 用户注册 - 邮箱验证码与 uuid</h2>
<h3 id="使用gouuid给用户生成uuid"><a class="markdownIt-Anchor" href="#使用gouuid给用户生成uuid">#</a> 使用 go.uuid 给用户生成 uuid：</h3>
<ol>
<li>
<p>获取 go.uuid</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get github.com/satori/go.uuid</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>生成 uuid</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid <span class="string">&quot;github.com/satori/go.uuid&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateUUID</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="comment">//使用uuid.NewV4().String()生成一个uuid，该uuid共有36位</span></span><br><span class="line">	<span class="keyword">return</span> uuid.NewV4().String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="使用email来发送邮件"><a class="markdownIt-Anchor" href="#使用email来发送邮件">#</a> 使用 email 来发送邮件：</h3>
<ol>
<li>
<p>获取 email</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get github.com/jordan-wright/email</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置发送信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line">	<span class="string">&quot;errors&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jordan-wright/email&quot;</span></span><br><span class="line">	<span class="string">&quot;net/smtp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendCode</span><span class="params">(toUserEmail, code <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="comment">//toUserEmail是接收者邮箱，code是生成的验证码</span></span><br><span class="line">	e := email.NewEmail()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用From填写发送者的信息</span></span><br><span class="line">	e.From = <span class="string">&quot;OnlineLearn &lt;发送者邮箱&gt;&quot;</span></span><br><span class="line">    <span class="comment">//To填写接收者邮箱</span></span><br><span class="line">	e.To = []<span class="type">string</span>&#123;toUserEmail&#125;</span><br><span class="line">    <span class="comment">//Subject为项目描述</span></span><br><span class="line">	e.Subject = <span class="string">&quot;验证码发送测试&quot;</span></span><br><span class="line">    <span class="comment">//发送内容</span></span><br><span class="line">	e.HTML = []<span class="type">byte</span>(<span class="string">&quot;您的验证码是：&lt;b&gt;&quot;</span> + code + <span class="string">&quot;&lt;/b&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里以163邮箱为例：</span></span><br><span class="line">	<span class="comment">//err := e.Send(&quot;smtp.163.com:465&quot;, smtp.PlainAuth(&quot;&quot;, &quot;Sender&#x27;s Email@example.com&quot;, &quot;SMTP授权码&quot;, &quot;smtp.163.com&quot;))</span></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//如果使用上面这条语句提示EOF，则使用下面的发送语句，跳过tls验证</span></span><br><span class="line">	err := e.SendWithTLS(<span class="string">&quot;smtp.163.com:465&quot;</span>, smtp.PlainAuth(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Sender&#x27;s Email@example.com&quot;</span>, <span class="string">&quot;SMTP授权码&quot;</span>, <span class="string">&quot;smtp.163.com&quot;</span>),</span><br><span class="line">		&amp;tls.Config&#123;InsecureSkipVerify: <span class="literal">true</span>, ServerName: <span class="string">&quot;smtp.163.com&quot;</span>&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		err := errors.New(<span class="string">&quot;Send Email Code Error!&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>生成验证码并发送，写入 redis 等待验证</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SendCode</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">//获取postform传来的email</span></span><br><span class="line">	email := c.PostForm(<span class="string">&quot;email&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> email == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;邮箱错误!&quot;</span>&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成6位随机验证码</span></span><br><span class="line">	rand.NewSource(time.Now().Unix())</span><br><span class="line">	number := []<span class="type">string</span>&#123;<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;0&quot;</span>&#125;</span><br><span class="line">	<span class="keyword">var</span> code <span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">6</span>; i++ &#123;</span><br><span class="line">		code += number[rand.Intn(<span class="built_in">len</span>(number))]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入到redis数据库中，redis如何使用可以查看：2、数据库</span></span><br><span class="line">	rdb.Set(ctx, email, code, time.Minute*<span class="number">5</span>)</span><br><span class="line">    <span class="comment">//使用上面配置好的SendCode函数发送验证码</span></span><br><span class="line">	err := util.SendCode(email, code)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(<span class="string">&quot;Code Send Error: &quot;</span> + err.Error())</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;验证码发送失败!&quot;</span>&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;code&quot;</span>: <span class="number">200</span>, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;验证码发送成功!&quot;</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="用户登录-token"><a class="markdownIt-Anchor" href="#用户登录-token">#</a> 用户登录 - token</h2>
<p><strong>使用 jwt 生成 token：</strong></p>
<ol>
<li>
<p>获取 jwt</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/golang-jwt/jwt/v5</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>定义 UserClaims</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserClaims <span class="keyword">struct</span> &#123;</span><br><span class="line">	Identity <span class="type">string</span> <span class="string">`json:&quot;identity&quot;`</span>	<span class="comment">//唯一标识</span></span><br><span class="line">	Name     <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span>		<span class="comment">//用户名</span></span><br><span class="line">	jwt.StandardClaims					<span class="comment">//jwt自带的标准Claims</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>生成 token</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myKey = []<span class="type">byte</span>(<span class="string">&quot;OnlineLearn-jwt-key&quot;</span>)</span><br><span class="line"><span class="comment">// 生成token</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateToken</span><span class="params">(identity, name <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	userClaims := &amp;UserClaims&#123;</span><br><span class="line">		Identity:       identity,</span><br><span class="line">		Name:           name,</span><br><span class="line">		StandardClaims: jwt.StandardClaims&#123;&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用SigningMethodHS256的加密方式进行加密，返回字节流token</span></span><br><span class="line">	token := jwt.NewWithClaims(jwt.SigningMethodHS256, userClaims)</span><br><span class="line">    <span class="comment">//将字节流转换为字符串</span></span><br><span class="line">	tokenString, err := token.SignedString(myKey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//fmt.Println(tokenString)</span></span><br><span class="line">	<span class="keyword">return</span> tokenString, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>解析 token</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AnalyseToken</span><span class="params">(tokenString <span class="type">string</span>)</span></span> (*UserClaims, <span class="type">error</span>) &#123;</span><br><span class="line">	userClaims := <span class="built_in">new</span>(UserClaims)</span><br><span class="line">    <span class="comment">//使用jwt提供给的ParseWithClaims函数解析token</span></span><br><span class="line">	claims, err := jwt.ParseWithClaims(tokenString, userClaims, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> myKey, <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !claims.Valid &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;analyse Token Error:%v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> userClaims, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="密码加密"><a class="markdownIt-Anchor" href="#密码加密">#</a> 密码加密</h2>
<p><strong>使用 md5 进行加密：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMd5</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%x&quot;</span>, md5.Sum([]<span class="type">byte</span>(s)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="数据库"><a class="markdownIt-Anchor" href="#数据库">#</a> 数据库</h1>
<h2 id="读取数据库配置信息"><a class="markdownIt-Anchor" href="#读取数据库配置信息">#</a> 读取数据库配置信息</h2>
<p>使用 viper 读取配置文件中的配置信息：</p>
<ol>
<li>
<p>获取 viper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get github.com/spf13/viper</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置 config.yml 文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例：</span></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">Mysql:</span></span><br><span class="line">  <span class="attr">driverName:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">ailzr</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.109</span><span class="number">.136</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">Test</span></span><br><span class="line">  <span class="attr">charset:</span> <span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">Redis:</span></span><br><span class="line">  <span class="attr">driverName:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">username:</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.109</span><span class="number">.136</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 viper 载入配置信息文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> conf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//载入配置信息文件</span></span><br><span class="line">	workDir, _ := os.Getwd()</span><br><span class="line">	viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">	viper.SetConfigType(<span class="string">&quot;yml&quot;</span>)</span><br><span class="line">	viper.AddConfigPath(workDir + <span class="string">&quot;/conf&quot;</span>)</span><br><span class="line">	err := viper.ReadInConfig()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;config load success ...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用init函数可以直接在main包里匿名导入</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>获取配置信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里以Mysql为例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDB</span><span class="params">()</span></span> *gorm.DB &#123;</span><br><span class="line">	<span class="comment">//获取配置文件参数</span></span><br><span class="line">	driverName := viper.GetString(<span class="string">&quot;Mysql.driverName&quot;</span>)</span><br><span class="line">	username := viper.GetString(<span class="string">&quot;Mysql.username&quot;</span>)</span><br><span class="line">	password := viper.GetString(<span class="string">&quot;Mysql.password&quot;</span>)</span><br><span class="line">	host := viper.GetString(<span class="string">&quot;Mysql.host&quot;</span>)</span><br><span class="line">	port := viper.GetString(<span class="string">&quot;Mysql.port&quot;</span>)</span><br><span class="line">	database := viper.GetString(<span class="string">&quot;Mysql.database&quot;</span>)</span><br><span class="line">	charset := viper.GetString(<span class="string">&quot;Mysql.charset&quot;</span>)</span><br><span class="line"></span><br><span class="line">	args := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s:%s)/%s?charset=%s&amp;parseTime=true&amp;loc=Local&quot;</span>, username, password, host, port, database, charset)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建数据库连接</span></span><br><span class="line">	db, err := gorm.Open(driverName, args)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	fmt.Println(<span class="string">&quot;database connect success ...&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="go-redis"><a class="markdownIt-Anchor" href="#go-redis">#</a> Go-Redis</h2>
<p><strong>使用 Go-Redis 操作 Redis 数据库：</strong></p>
<p>获取 Go-Redis：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get github.com/redis/go-redis/v9</span><br></pre></td></tr></table></figure>
<p>配置 Redis：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = context.Background()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rdb = redis.NewClient(&amp;redis.Options&#123;</span><br><span class="line">	Addr:     <span class="string">&quot;host:port&quot;</span>,</span><br><span class="line">	Password: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">	DB:       <span class="number">0</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Set 写入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cmdable)</span></span> Set(ctx context.Context, key <span class="type">string</span>, value <span class="keyword">interface</span>&#123;&#125;, expiration time.Duration) *StatusCmd</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用：</span></span><br><span class="line">ok, err := rdb.Set(ctx, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;mmc&quot;</span>, time.Second*<span class="number">10</span>).Result()</span><br><span class="line"><span class="comment">//写入成功ok会返回OK</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ok)</span><br></pre></td></tr></table></figure>
<p>Get 获取：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cmdable)</span></span> Get(ctx context.Context, key <span class="type">string</span>) *StringCmd</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用：</span></span><br><span class="line">v, err := rdb.Get(ctx, <span class="string">&quot;name&quot;</span>).Result()</span><br><span class="line"><span class="comment">//获取到的value返回给v</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(v)</span><br></pre></td></tr></table></figure>
<h1 id="go-swagger"><a class="markdownIt-Anchor" href="#go-swagger">#</a> Go-Swagger</h1>
<ol>
<li>
<p>获取 gin-swagger</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u github.com/swaggo/swag/cmd/swag</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Go 1.17版本之后不支持使用go get安装文件，所以1.17版本之后的Go使用如下指令获取gin-swagger</span></span><br><span class="line">go install github.com/swaggo/swag/cmd/swag@latest</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>下载 gin-swagger</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u github.com/swaggo/gin-swagger</span><br><span class="line">go get -u github.com/swaggo/files</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 gin 给 gin-swagger 添加路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/swagger/*any&quot;</span>, ginSwagger.WrapHandler(swaggerfiles.Handler))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>导入一些配置</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">&quot;项目/docs&quot;</span><span class="comment">//导入docs之前需要使用swag init生成docs文件夹</span></span><br><span class="line">	swaggerfiles <span class="string">&quot;github.com/swaggo/files&quot;</span></span><br><span class="line">	ginSwagger <span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置接口信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Register</span></span><br><span class="line"><span class="comment">// @Tags 公共方法</span></span><br><span class="line"><span class="comment">// @Summary 用户注册</span></span><br><span class="line"><span class="comment">// @Param mail formData string true &quot;mail&quot;</span></span><br><span class="line"><span class="comment">// @Param name formData string true &quot;name&quot;</span></span><br><span class="line"><span class="comment">// @Param password formData string true &quot;password&quot;</span></span><br><span class="line"><span class="comment">// @Param code formData string true &quot;code&quot;</span></span><br><span class="line"><span class="comment">// @Param phone formData string false &quot;phone&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;string&#125; json &quot;&#123;&quot;code&quot;:&quot;200&quot;,&quot;data&quot;:&quot;&quot;&#125;&quot;</span></span><br><span class="line"><span class="comment">// @Router /user/register [post]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(c *gin.Context)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//说明：</span></span><br><span class="line"><span class="comment">// 接口名：Register</span></span><br><span class="line"><span class="comment">// 接口标签：公共方法</span></span><br><span class="line"><span class="comment">// 接口描述：用户注册</span></span><br><span class="line"><span class="comment">// 接口参数：参数名为mail 发送形式为form 字符串类型 必须发送(false为可发可不发) &quot;对该参数的描述&quot;</span></span><br><span class="line"><span class="comment">// 接口参数：参数名name 同上</span></span><br><span class="line"><span class="comment">// Param都同上....</span></span><br><span class="line"><span class="comment">// 成功返还信息：http状态码 &#123;string&#125; json &quot;内容&quot;</span></span><br><span class="line"><span class="comment">// 路由路径：路径 [请求方式]</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Go Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin-and-Gorm</title>
    <url>/2023/08/15/gin-and-gorm/</url>
    <content><![CDATA[<h1 id="gin"><a class="markdownIt-Anchor" href="#gin">#</a> Gin</h1>
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍">#</a> 介绍</h2>
<p>Gin 是一个用 Go 语言 (Golang) 编写的 HTTP web 框架。它具有类似 Martini 的 API，但性能比 Martini 快 40 倍。如果你需要极好的性能，使用 Gin 吧。</p>
<p>Gin 的官方文档：<a href="https://gin-gonic.com/zh-cn/docs/">文档</a></p>
<h2 id="获取"><a class="markdownIt-Anchor" href="#获取">#</a> 获取</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>
<h2 id="使用样例"><a class="markdownIt-Anchor" href="#使用样例">#</a> 使用样例</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="comment">//导入gin包</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个http服务</span></span><br><span class="line">    r := gin.Default()</span><br><span class="line">    <span class="comment">//创建一个GET请求的响应</span></span><br><span class="line">    r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">        c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;Hello World!&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//运行http服务</span></span><br><span class="line">    _ = r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 go run 或者 go build 运行，打开地址 localhost:8080 即可</p>
<h2 id="常用函数介绍快速入门"><a class="markdownIt-Anchor" href="#常用函数介绍快速入门">#</a> 常用函数介绍 (快速入门)</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default</span><span class="params">()</span></span>(*Engine)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由组，其路径为path，可在后面添加中间件函数，返回该路由组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> Group(path <span class="type">string</span>, handlers ...HandlerFunc) *RouterGroup</span><br><span class="line"><span class="comment">//配置静态文件路径</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> Static(relativePath <span class="type">string</span>, root <span class="type">string</span>) IRoutes</span><br><span class="line"><span class="comment">//载入html文件</span></span><br><span class="line"><span class="comment">//载入pattern路径下的所有html文件，示例：r.LoadHTMLGlob(&quot;templates/*&quot;)，其中*为通配符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> LoadHTMLGlob(pattern <span class="type">string</span>)</span><br><span class="line"><span class="comment">//载入指定file，可以填入多个</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> LoadHTMLFiles(files ...<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个GET响应，响应函数为handlers(自己写)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> GET(path <span class="type">string</span>, handlers ...HandlerFunc) IRoutes</span><br><span class="line"><span class="comment">//创建一个POST响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> POST(path <span class="type">string</span>, handlers ...HandlerFunc) IRoutes</span><br><span class="line"><span class="comment">//创建一个PUT响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> PUT(path <span class="type">string</span>, handlers ...HandlerFunc) IRoutes</span><br><span class="line"><span class="comment">//创建一个DELETE响应</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> DELETE(path <span class="type">string</span>, handlers ...HandlerFunc) IRoutes</span><br><span class="line"><span class="comment">//创建一个NoRoute响应，当没有匹配的请求目录时，进入该响应，通常用于404</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> NoRoute(handlers ...HandlerFunc)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个HTML</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> HTML(code <span class="type">int</span>, name <span class="type">string</span>, obj any)</span><br><span class="line"><span class="comment">//返回JSON数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> JSON(code <span class="type">int</span>, obj any)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据，并与any中的成员自动匹配写入，需要传入一个指针以便于修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> BindJSON(obj any) <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过url获取数据，比如/index/18，设置路由路径为&quot;/index/:id&quot;，则可以使用c.Params(&quot;id&quot;)</span></span><br><span class="line"><span class="comment">//以string的形式返回获取到的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Param(key <span class="type">string</span>) <span class="type">string</span></span><br><span class="line"><span class="comment">//同上，但还会返回一个bool值用来标记是否获取到数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ps Params)</span></span> Get(name <span class="type">string</span>) (<span class="type">string</span>, <span class="type">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过url获取数据，比如/index?search=如何学习gin框架&amp;usrname=张三</span></span><br><span class="line"><span class="comment">//则可以使用search := c.Query(&quot;search&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Query(key <span class="type">string</span>) (value <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于获取前端表单提交，使用key进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostForm(key <span class="type">string</span>) (value <span class="type">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行服务，默认监听本地端口8080，可以输入addr指定监听</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr ...<span class="type">string</span>) (err <span class="type">error</span>)</span><br></pre></td></tr></table></figure>
<h2 id="响应样例"><a class="markdownIt-Anchor" href="#响应样例">#</a> 响应样例</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    <span class="comment">//POST响应:</span></span><br><span class="line">    r.POST(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">        c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;增&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//GET响应:</span></span><br><span class="line">    r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">        c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;查&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//PUT响应:</span></span><br><span class="line">    r.PUT(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">        c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;改&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//DELETE响应:</span></span><br><span class="line">    r.DELETE(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span>&#123;</span><br><span class="line">        c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;删&quot;</span>&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    _ = r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="gorm"><a class="markdownIt-Anchor" href="#gorm">#</a> Gorm</h1>
<h2 id="介绍-2"><a class="markdownIt-Anchor" href="#介绍-2">#</a> 介绍</h2>
<p>Golang 出色的 ORM 库，旨在对开发人员友好</p>
<p>gorm 是国人开发的一个 ORM 库，想学的话读文档更好一些，<a href="https://gorm.io/zh_CN/docs/">官方文档</a>。</p>
<h2 id="获取-2"><a class="markdownIt-Anchor" href="#获取-2">#</a> 获取</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go get -u github.com/jinzhu/gorm</span><br></pre></td></tr></table></figure>
<h2 id="使用样例-2"><a class="markdownIt-Anchor" href="#使用样例-2">#</a> 使用样例</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/jinzhu/gorm&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/jinzhu/gorm/dialects/mysql&quot;</span> <span class="comment">//导入mysql驱动，根据自己需要自行导入</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User Models</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">//嵌套gorm内置的Model结构体</span></span><br><span class="line">	<span class="comment">//该结构体包含ID(默认主键)，创建时间，修改时间，删除时间四个字段</span></span><br><span class="line">	gorm.Model</span><br><span class="line">	<span class="comment">//使用Tag给gorm建表添加参数，参数之间使用分号分隔</span></span><br><span class="line">	Name <span class="type">string</span> <span class="string">`gorm:&quot;default:&#x27;匿名用户&#x27;;type:varchar(20)&quot;`</span></span><br><span class="line">	Age  <span class="type">int32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//填写数据库信息</span></span><br><span class="line">	usrAndPwd := <span class="string">&quot;username:password&quot;</span></span><br><span class="line">	host := <span class="string">&quot;@(127.0.0.1:3306)&quot;</span></span><br><span class="line">	otherArgs := <span class="string">&quot;/database01?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用Open连接数据库，返回数据库db和错误信息err</span></span><br><span class="line">	db, err := gorm.Open(<span class="string">&quot;mysql&quot;</span>, usrAndPwd + host + otherArgs)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">//处理错误信息</span></span><br><span class="line">		fmt.Println(<span class="string">&quot;database connect failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//使用defer关闭数据库</span></span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将User模型进行绑定</span></span><br><span class="line">	db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//添加行，如果不存在表users则会自动创建users</span></span><br><span class="line">	db.Create(&amp;User&#123; <span class="comment">//传递指针节省空间</span></span><br><span class="line">		<span class="comment">//不填写Name，使用默认的&quot;匿名用户&quot;</span></span><br><span class="line">		Age: <span class="number">18</span>,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="常用函数介绍快速入门-2"><a class="markdownIt-Anchor" href="#常用函数介绍快速入门-2">#</a> 常用函数介绍 (快速入门)</h2>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个数据库连接，dialect为数据库类型，args为数据库参数，例如：</span></span><br><span class="line"><span class="comment">//Open(&quot;mysql&quot;, args)，args包括连接数据库用户名，密码，地址等，详细可见使用样例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(dialect <span class="type">string</span>, args ...<span class="keyword">interface</span>&#123;&#125;)</span></span> (db *DB, err <span class="type">error</span>)</span><br><span class="line"><span class="comment">//关闭数据库连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Close() <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在任意方法前添加Debug()，即可在命令行输出该语句所生产的SQL语句</span></span><br><span class="line"><span class="comment">//使用示例：db.Debug().Where(&quot;id=?&quot;, id).Find(&amp;user)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Debug() *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动匹配字段，绑定模型，传入一个模型的地址即可</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> AutoMigrate(values ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//CRUD</span></span><br><span class="line"><span class="comment">//根据传入的value创建一条记录，通常传入一个model的实例，可以传递指针来节省空间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Create(value <span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第一条记录（主键升序），通常传入一个model实例的指针，以便于函数内部修改其内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> First(out <span class="keyword">interface</span>&#123;&#125;, where ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"><span class="comment">// 获取一条记录，没有指定排序字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Take(out <span class="keyword">interface</span>&#123;&#125;, where ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"><span class="comment">// 获取最后一条记录（主键降序）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Last(out <span class="keyword">interface</span>&#123;&#125;, where ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//Save会更新所有字段的值，即使字段是零值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Save(value <span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"><span class="comment">//更新单字段，可以使用where进行行限定，传入更新参数以key,value形式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Update(attrs ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"><span class="comment">//更新多字段，可以使用where进行行限定，传入struct或者map[string]interface&#123;&#125;</span></span><br><span class="line"><span class="comment">//其中map[string]interface&#123;&#125;为key(string),value(interface&#123;&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Updates(values <span class="keyword">interface</span>&#123;&#125;, ignoreProtectedAttrs ...<span class="type">bool</span>) *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除记录，gorm默认为软删除，即并不进行物理上的删除，而是为记录添加删除时间</span></span><br><span class="line"><span class="comment">//当删除时间不为空，则查询时无视该记录，gorm.Model包含了删除时间字段</span></span><br><span class="line"><span class="comment">//如果使用自建Model，并且没有删除时间字段，则为物理删除</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Delete(value <span class="keyword">interface</span>&#123;&#125;, where ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//高级查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用给出的query语句进行查询，需要注意，Select并不是一个立即执行方法，所以通常配合Find使用</span></span><br><span class="line"><span class="comment">//使用示例：db.Select(&quot;name, age&quot;).Where(&quot;id=?&quot;, id).Find(&amp;user)</span></span><br><span class="line"><span class="comment">//SELECT name, age FROM `users`  WHERE `users`.`deleted_at` IS NULL AND ((id=1))</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Select(query <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//对给其的value(model的示例)进行操作，通常搭配Update进行修改</span></span><br><span class="line"><span class="comment">//使用示例：db.Model(&amp;user).Update(&quot;name&quot;, &quot;hello&quot;)</span></span><br><span class="line"><span class="comment">//则会自动根据user的id查询到其记录，然后把name改为hello，假设其id为111，则SQL语句为：</span></span><br><span class="line"><span class="comment">//UPDATE users SET name=&#x27;hello&#x27;, updated_at=&#x27;current time&#x27; WHERE id=111;</span></span><br><span class="line"><span class="comment">//如果仅传入Model，则对应整张表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Model(value <span class="keyword">interface</span>&#123;&#125;) *DB</span><br><span class="line"></span><br><span class="line"><span class="comment">//Where可以搭配查找(Find)或者修改(Update)使用，例如：</span></span><br><span class="line"><span class="comment">//使用示例：db.Where(&quot;id=?&quot;, id).Find(&amp;user)</span></span><br><span class="line"><span class="comment">//使用示例2：db.Model(&amp;User&#123;&#125;).Where(&quot;id=?&quot;, id).Update(&quot;name&quot;, &quot;hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *DB)</span></span> Where(query <span class="keyword">interface</span>&#123;&#125;, args ...<span class="keyword">interface</span>&#123;&#125;) *DB</span><br></pre></td></tr></table></figure>
<h2 id="立即执行方法"><a class="markdownIt-Anchor" href="#立即执行方法">#</a> 立即执行方法</h2>
<p>立即执行方法是指那些会立即生成 SQL 语句并发送到数据库的方法，他们一般是 CRUD 方法，比如：</p>
<p>Create，First，Find，Take，Save，Update，Delete，Scan，Row，Rows…</p>
<h2 id="对应关系"><a class="markdownIt-Anchor" href="#对应关系">#</a> 对应关系</h2>
<p>Gorm 中存在如下的对应关系：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Model</th>
<th style="text-align:center">table</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">object</td>
<td style="text-align:center">row</td>
</tr>
<tr>
<td style="text-align:center">filed</td>
<td style="text-align:center">filed</td>
</tr>
</tbody>
</table>
<p>模型对应整表，实例对应记录，字段对应字段</p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Java笔记</title>
    <url>/2023/02/26/java/</url>
    <content><![CDATA[<h1 id="注java的相当一部分语法可以参考c语言笔记"><a class="markdownIt-Anchor" href="#注java的相当一部分语法可以参考c语言笔记">#</a> 注：Java 的相当一部分语法可以参考 C 语言笔记</h1>
<h1 id="java环境搭建"><a class="markdownIt-Anchor" href="#java环境搭建">#</a> Java 环境搭建</h1>
<p>JDK (Java Development Kit 	Java 开发工具包)</p>
<p>JRE (Java Runtime Environment 	Java 运行环境)</p>
<p>JVM (Java Virtual Machine	 Java 虚拟机)</p>
<h2 id="linux"><a class="markdownIt-Anchor" href="#linux">#</a> Linux</h2>
<p>前往<a href="https://www.oracle.com/java/technologies/downloads/"> oracle</a> 下载 jdk 文件</p>
<p>使用指令将其解压：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要注意，这里的javaTarName根据java版本不同，名字也可能不同</span></span><br><span class="line">tar -zxvf javaTarName.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<p>使用 vim 编辑 profile 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果提示该文件为只读文件，则尝试使用管理员权限打开</span></span><br></pre></td></tr></table></figure>
<p>添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要注意，这里的javaPath根据java版本不同，名字也可能不同</span></span><br><span class="line">export JAVA_HOME=/usr/local/javaPath</span><br><span class="line">export PATH=$PATH:$JAVAHOME/bin</span><br></pre></td></tr></table></figure>
<p>然后保存退出，使用如下指令 (或者重启系统)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<p>使用如下指令检查 java 是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>如果弹出 java 版本信息则说明安装成功</p>
<h2 id="windows"><a class="markdownIt-Anchor" href="#windows">#</a> Windows</h2>
<p>前往<a href="https://www.oracle.com/java/technologies/downloads/"> oracle</a> 下载 jdk 文件</p>
<p>将 JDK 的 bin 文件目录加入到系统环境变量 path 中。</p>
<p><strong>具体操作：</strong></p>
<ol>
<li>右键此电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量</li>
<li>新建环境变量 JAVA_HOME，变量值为 jdk 的安装目录 (例如： <code>C:\Program Files\Java\jre1.8.0_341</code> )</li>
<li>编辑环境变量 Path，添加值： <code>%JAVA_HOME%\bin</code></li>
<li>保存退出，使用 windows+r 键，输入 cmd 打开命令窗口</li>
<li>使用 <code>java -version</code>  测试 java 是否安装成功 (注意，如果修改环境变量之前打开的 cmd，需要重开一下才行)</li>
</ol>
<p>对于 Windwos7 系统，环境变量 Path 并不直观，使用 Home 键到 Path 变量值的最前面，输入 <code>%JAVA_HOME%\bin</code>  然后使用 <code>;</code>  将后面的值分隔开 (注意不要删除 Path 里原来的任何内容，除非你理解你删除的是什么)</p>
<h2 id="使用"><a class="markdownIt-Anchor" href="#使用">#</a> 使用</h2>
<p>使用 <code>javac fileName.java</code>  对 java 文件进行编译</p>
<p>使用 <code>java ClassName</code>  对编译好的二进制文件进行执行，注意不要加 <code>.class</code></p>
<p>使用 <code>javac -encoding utf8 fileName.java</code>  可以对 utf8 的文件进行编译</p>
<h1 id="java语法"><a class="markdownIt-Anchor" href="#java语法">#</a> Java 语法</h1>
<h2 id="注释"><a class="markdownIt-Anchor" href="#注释">#</a> 注释</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">文档注释</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">这是java特有的文档注释的写法，这些注释内容可以被jdk自带的javadoc解析，生成一个网页，供人参考</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>java 源文件中可以声明多个类。但是最多只能有一个类声明为 public。</strong></p>
<p><strong>而且要求声明为 public 的类的类名必须与愿望呢简明相同。</strong></p>
<h2 id="类与方法函数"><a class="markdownIt-Anchor" href="#类与方法函数">#</a> <mark>类与方法 (函数)</mark></h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">import</td>
<td style="text-align:center">导入包，同 Python</td>
</tr>
<tr>
<td style="text-align:center">System.out.println(msg)</td>
<td style="text-align:center">控制窗口输出函数</td>
</tr>
<tr>
<td style="text-align:center"><a href="http://System.in">System.in</a></td>
<td style="text-align:center">从控制窗口读取</td>
</tr>
</tbody>
</table>
<h3 id="scanner类"><a class="markdownIt-Anchor" href="#scanner类">#</a> Scanner 类</h3>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">该类位于 java.util.Scanner 包中，需要先导入</td>
<td style="text-align:center">用法: Scanner scan = new Scanner (<a href="http://System.in">System.in</a>);</td>
</tr>
<tr>
<td style="text-align:center">next();</td>
<td style="text-align:center">该方法可以获取键入的字符串</td>
</tr>
<tr>
<td style="text-align:center">nextInt();</td>
<td style="text-align:center">获取键入的整形，double，long 等同理</td>
</tr>
</tbody>
</table>
<h3 id="string类"><a class="markdownIt-Anchor" href="#string类">#</a> String 类</h3>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">charAt(int index);</td>
<td style="text-align:center">从字符串中读取相应 index 的字符</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="运算符参考c语言"><a class="markdownIt-Anchor" href="#运算符参考c语言">#</a> 运算符 (参考 C 语言)</h2>
<p><mark><strong>参考 C 语言笔记，与 C 语言的运算符几乎完全相同</strong></mark></p>
<h2 id="if-while-switch等结构参考c语言"><a class="markdownIt-Anchor" href="#if-while-switch等结构参考c语言">#</a> if、while、switch 等结构 (参考 C 语言)</h2>
<p><mark><strong>参考 C 语言笔记，与 C 语言的运算符几乎完全相同</strong></mark></p>
<h2 id="数组"><a class="markdownIt-Anchor" href="#数组">#</a> <mark>数组</mark></h2>
<h3 id="创建数组"><a class="markdownIt-Anchor" href="#创建数组">#</a> 创建数组</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java创建一个数组的方法</span></span><br><span class="line"><span class="comment">//方法1：</span></span><br><span class="line">dataType[] arrayName;</span><br><span class="line">arrayName = <span class="keyword">new</span> <span class="title class_">dataType</span>[]&#123;data1, data2, data3&#125;;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line">dataType[] arrayName = <span class="keyword">new</span> <span class="title class_">dataType</span>[elementsNumber];</span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//创建一个长度为10的整型数组</span></span><br></pre></td></tr></table></figure>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他">#</a> 其他</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrayName.length;<span class="comment">//获取数组的长度</span></span><br><span class="line"><span class="comment">//遍历并初始化一个整型数组</span></span><br><span class="line"><span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; array.length;i++)&#123;</span><br><span class="line">    array[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2023/03/31/MySQL/</url>
    <content><![CDATA[<h1 id="mysql概述"><a class="markdownIt-Anchor" href="#mysql概述">#</a> MySQL 概述</h1>
<p>数据库概念：</p>
<p>数据库：<strong>存储数据的仓库，数据是有组织的进行存储</strong>，英文：DataBase (DB)</p>
<p>数据库管理系统：操纵和管理数据库的大型软件，英文：DataBase Management System (DBMS)</p>
<p>SQL：<strong>操作关系型数据库的编程语言，定义了一套操作关系型数据库的统一标准</strong>，英文：Structured Query Language (SQL)</p>
<p>启动与停止：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net start mysql80 #启动</span><br><span class="line">net stop mysql80 #停止</span><br></pre></td></tr></table></figure>
<p><strong>关系型数据库 (RDBMS):</strong></p>
<p>概念：建立在关系模型基础上，由多张相互链接的二维表组成的数据库。(类似于 excel 表格)</p>
<p>特点：</p>
<p>1. 使用表存储数据，格式统一，便于维护</p>
<p>2. 使用 SQL 语言操作，标准统一，使用方便</p>
<h1 id="sql语言"><a class="markdownIt-Anchor" href="#sql语言">#</a> <mark>SQL 语言</mark></h1>
<p>使用下面指令登录用户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u userName -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其中-u为指定user</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-p为password，使用密码登录</span></span><br></pre></td></tr></table></figure>
<h2 id="基础内容"><a class="markdownIt-Anchor" href="#基础内容">#</a> 基础内容</h2>
<p>SQL 语句可以单行或多行书写，以<strong>分号结尾</strong>。</p>
<p>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</p>
<p>注释：单行使用–或 #(MySQL 特有)，多行使用 /**/</p>
<h2 id="sql分类"><a class="markdownIt-Anchor" href="#sql分类">#</a> SQL 分类</h2>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">全称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DDL</td>
<td style="text-align:center">Data Definition Language</td>
<td style="text-align:center">数据定义语言，用来定义数据库对象 (数据库，表，字段)</td>
</tr>
<tr>
<td style="text-align:center">DML</td>
<td style="text-align:center">Data Manipulation Language</td>
<td style="text-align:center">数据操作语言，用来对数据库表种的数据进行增删改</td>
</tr>
<tr>
<td style="text-align:center">DQL</td>
<td style="text-align:center">Data Query Language</td>
<td style="text-align:center">数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr>
<td style="text-align:center">DCL</td>
<td style="text-align:center">Data Control Language</td>
<td style="text-align:center">数据控制语言，用来创建数据库用户、控制数据库的访问权限</td>
</tr>
</tbody>
</table>
<h2 id="ddl数据定义语言"><a class="markdownIt-Anchor" href="#ddl数据定义语言">#</a> DDL (数据定义语言)</h2>
<h3 id="ddl-数据库操作"><a class="markdownIt-Anchor" href="#ddl-数据库操作">#</a> DDL - 数据库操作</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#[]中是可写，可不写的内容 </span><br><span class="line">#查询</span><br><span class="line"><span class="keyword">show</span> databases; #查询所有数据库</span><br><span class="line"><span class="keyword">select</span> database(); #查询当前数据库</span><br><span class="line">#创建</span><br><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名 [<span class="keyword">default</span> charset 字符集] [<span class="keyword">collate</span> 排序规则];</span><br><span class="line">#删除</span><br><span class="line"><span class="keyword">drop</span> database [if <span class="keyword">exists</span>] 数据库名;</span><br><span class="line">#使用，切换数据库</span><br><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure>
<h3 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型">#</a> 数据类型</h3>
<p><strong>数值类型：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">大小</th>
<th style="text-align:center">有符号范围</th>
<th style="text-align:center">无符号范围</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">1byte</td>
<td style="text-align:center">-2^7,2^7-1</td>
<td style="text-align:center">0,2^8-1</td>
<td style="text-align:center">微整型</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">2bytes</td>
<td style="text-align:center">-2^15,2^15-1</td>
<td style="text-align:center">0,2^16-1</td>
<td style="text-align:center">小整型</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMINT</td>
<td style="text-align:center">3bytes</td>
<td style="text-align:center">-2^23,2^23-1</td>
<td style="text-align:center">0,2^24-1</td>
<td style="text-align:center">中整型</td>
</tr>
<tr>
<td style="text-align:center">INT 或 INTEGER</td>
<td style="text-align:center">4bytes</td>
<td style="text-align:center">-2^31,2^31-1</td>
<td style="text-align:center">0,2^32-1</td>
<td style="text-align:center">整型</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">8bytes</td>
<td style="text-align:center">-2^63,2^63-1</td>
<td style="text-align:center">0,2^64-1</td>
<td style="text-align:center">长整型</td>
</tr>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">4bytes</td>
<td style="text-align:center">-3.402823466 E+38,3.402823466351 E+38</td>
<td style="text-align:center">0 和 1.175494351 E-38, 3.402823466 E+38</td>
<td style="text-align:center">单精度浮点型</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">8bytes</td>
<td style="text-align:center">-1.7976931348623157 E+308, 1.7976931348623157 E+308</td>
<td style="text-align:center">0 和 2.2250738585072014 E-308, 1.7976931348623157 E+308</td>
<td style="text-align:center">双精度浮点型</td>
</tr>
<tr>
<td style="text-align:center">DECIMAL</td>
<td style="text-align:center"></td>
<td style="text-align:center">依赖于 M (精度) 和 D (标度) 的值</td>
<td style="text-align:center">依赖于 M (精度) 和 D (标度) 的值</td>
<td style="text-align:center">小数值 (精确定点数)</td>
</tr>
</tbody>
</table>
<p>M：指数值总位数，D：指小数位数</p>
<p><strong>字符串类型：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">大小</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CHAR</td>
<td style="text-align:center">0-255 bytes</td>
<td style="text-align:center">定长字符串</td>
</tr>
<tr>
<td style="text-align:center">VARCHAR</td>
<td style="text-align:center">0-65535 bytes</td>
<td style="text-align:center">变长字符串</td>
</tr>
<tr>
<td style="text-align:center">TINYBLOB</td>
<td style="text-align:center">0-255 bytes</td>
<td style="text-align:center">不超过 255 个字符的二进制数据</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center">0-255 bytes</td>
<td style="text-align:center">短文本字符串</td>
</tr>
<tr>
<td style="text-align:center">BLOB</td>
<td style="text-align:center">0-65535 bytes</td>
<td style="text-align:center">二进制形势的长文本数据</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center">0-65535 bytes</td>
<td style="text-align:center">长文本数据</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMBLOB</td>
<td style="text-align:center">0-2^24 - 1 bytes</td>
<td style="text-align:center">二进制形势的中等长度文本数据</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center">0-2^24 - 1 bytes</td>
<td style="text-align:center">中等长度文本数据</td>
</tr>
<tr>
<td style="text-align:center">LONGBLOB</td>
<td style="text-align:center">0-2^32 - 1 bytes</td>
<td style="text-align:center">二进制形势的极大文本数据</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center">0-2^32 - 1 bytes</td>
<td style="text-align:center">极大文本数据</td>
</tr>
</tbody>
</table>
<p><strong>日期类型：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">大小</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">格式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1000-01-01 至 9999-12-31</td>
<td style="text-align:center">YYYY-MM-DD</td>
<td style="text-align:center">日期值</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">3</td>
<td style="text-align:center">-838:59:59 至 838:59:59</td>
<td style="text-align:center">HH:MM:SS</td>
<td style="text-align:center">时间值或持续时间</td>
</tr>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1901 至 2155</td>
<td style="text-align:center">YYYY</td>
<td style="text-align:center">年份值</td>
</tr>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">8</td>
<td style="text-align:center">1000-01-01 00:00:00 至 9999-12-31 23:59:59</td>
<td style="text-align:center">YYYY-MM-DD HH:MM:SS</td>
<td style="text-align:center">混合日期和时间值</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">4</td>
<td style="text-align:center">1970-01-01 00:00:01 至 2038-01-19 03:14:07</td>
<td style="text-align:center">YYYY-MM-DD HH:MM:SS</td>
<td style="text-align:center">混合日期和时间值，时间戳</td>
</tr>
</tbody>
</table>
<h3 id="ddl-表查询"><a class="markdownIt-Anchor" href="#ddl-表查询">#</a> DDL - 表查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询当前数据库所有表</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line">#查询表结构</span><br><span class="line"><span class="keyword">desc</span> 表名;</span><br><span class="line">#查询指定表的建表语句</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<h3 id="ddl-表创建"><a class="markdownIt-Anchor" href="#ddl-表创建">#</a> DDL - 表创建</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    字段<span class="number">1</span> 字段<span class="number">1</span>类型[comment 字段<span class="number">1</span>注释],#<span class="keyword">sql</span>中的字符串类型是<span class="type">varchar</span>(size)</span><br><span class="line">    字段<span class="number">2</span> 字段<span class="number">2</span>类型[comment 字段<span class="number">2</span>注释],</span><br><span class="line">    字段<span class="number">3</span> 字段<span class="number">3</span>类型[comment 字段<span class="number">3</span>注释],</span><br><span class="line">    ...</span><br><span class="line">    字段n 字段n类型[comment 字段n注释]</span><br><span class="line">)[comment 表注释];</span><br><span class="line">#使用案例</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_usr(</span><br><span class="line">	id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="ddl-表修改"><a class="markdownIt-Anchor" href="#ddl-表修改">#</a> DDL - 表修改</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#添加字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 字段类型(长度) [comment 注释][约束];</span><br><span class="line">#修改数据类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段名 新数据类型(长度);</span><br><span class="line">#修改字段名和字段类型</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 change 旧字段名 新字段名 字段类型(长度) [comment 注释][约束];</span><br><span class="line">#删除字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br><span class="line">#修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;</span><br><span class="line">#删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br><span class="line">#清空表数据</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<h2 id="dml数据操作语言"><a class="markdownIt-Anchor" href="#dml数据操作语言">#</a> DML (数据操作语言)</h2>
<p>DML (Data Manipulation Language)，数据操作语言，用来对数据库中表的数据记录进行增删改操作</p>
<p>添加数据 (INSERT)</p>
<p>修改数据 (UPDATE)</p>
<p>删除数据 (DELETE)</p>
<h3 id="dml-添加数据"><a class="markdownIt-Anchor" href="#dml-添加数据">#</a> DML - 添加数据</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#给指定字段添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br><span class="line">#给全部字段添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br><span class="line">#批量添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...),(值<span class="number">1</span>,值<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure>
<h3 id="dml-修改数据"><a class="markdownIt-Anchor" href="#dml-修改数据">#</a> DML - 修改数据</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>, 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>, ...[<span class="keyword">WHERE</span> 条件]</span><br><span class="line">#如果不写<span class="keyword">where</span>条件，则修改作用于整张表</span><br></pre></td></tr></table></figure>
<h3 id="dml-删除数据"><a class="markdownIt-Anchor" href="#dml-删除数据">#</a> DML - 删除数据</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件]</span><br><span class="line">#如果不写<span class="keyword">where</span>条件，则删除整张表的所有数据</span><br></pre></td></tr></table></figure>
<h2 id="dql数据查询语言"><a class="markdownIt-Anchor" href="#dql数据查询语言">#</a> DQL (数据查询语言)</h2>
<p>DQL (Data Query Language) 数据查询语言，用来查询数据库中表的记录。</p>
<p>查询关键字 (SELECT)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#基础查询</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	表名列表</span><br><span class="line">#条件查询</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	条件列表</span><br><span class="line">#分组查询、通常配合聚合函数使用</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">	分组后条件列表</span><br><span class="line">#排序查询</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">	排序字段列表</span><br><span class="line">#分页查询</span><br><span class="line">LIMIT</span><br><span class="line">	分页参数</span><br><span class="line">#DQL的执行顺序为：</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">LIMIT</span><br></pre></td></tr></table></figure>
<h3 id="dql-基础查询"><a class="markdownIt-Anchor" href="#dql-基础查询">#</a> DQL - 基础查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询多个字段</span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3.</span>.. <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br><span class="line">#设置别名</span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [<span class="keyword">AS</span> 别名<span class="number">1</span>],字段<span class="number">2</span> [<span class="keyword">AS</span> 别名<span class="number">2</span>]... <span class="keyword">FROM</span> 表名;</span><br><span class="line">#去除返回结果中的重复记录</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<h3 id="dql-条件查询"><a class="markdownIt-Anchor" href="#dql-条件查询">#</a> DQL - 条件查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br><span class="line">#条件</span><br><span class="line">#可以使用比较运算符和逻辑运算符、比较运算符同C</span><br><span class="line">#MySQL特有：</span><br><span class="line"><span class="keyword">BETWEEN</span> ... <span class="keyword">AND</span> ...#在某个范围之内，包含最小值与最大值，<span class="keyword">between</span>后是最小值，不能互换</span><br><span class="line"><span class="keyword">IN</span>(...)#在<span class="keyword">in</span>之后的列表中的值，多选一</span><br><span class="line"><span class="keyword">LIKE</span> 占位符#模糊匹配（_匹配单个字符，<span class="operator">%</span>匹配任意字符）</span><br><span class="line"><span class="keyword">IS</span> <span class="keyword">NULL</span>#是<span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line">#mysql中判断等于的符号是<span class="operator">=</span>，而不是<span class="operator">=</span><span class="operator">=</span></span><br><span class="line"><span class="operator">&lt;&gt;</span> #相当于 <span class="operator">!=</span></span><br><span class="line"><span class="keyword">AND</span> #相当于 <span class="operator">&amp;&amp;</span></span><br><span class="line"><span class="keyword">OR</span> #相当于 <span class="operator">||</span></span><br><span class="line"><span class="keyword">NOT</span> #相当于 <span class="operator">!</span></span><br></pre></td></tr></table></figure>
<h3 id="dql-聚合函数"><a class="markdownIt-Anchor" href="#dql-聚合函数">#</a> DQL - 聚合函数</h3>
<p>聚合函数：将一列数据作为一个整体，进行纵向计算</p>
<p>常见聚合函数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">count</td>
<td style="text-align:center">统计数量</td>
</tr>
<tr>
<td style="text-align:center">max</td>
<td style="text-align:center">最大值</td>
</tr>
<tr>
<td style="text-align:center">min</td>
<td style="text-align:center">最小值</td>
</tr>
<tr>
<td style="text-align:center">avg</td>
<td style="text-align:center">平均值</td>
</tr>
<tr>
<td style="text-align:center">sum</td>
<td style="text-align:center">求和</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#注意：<span class="keyword">NULL</span>不参与聚合函数的计算</span><br><span class="line">#语法</span><br><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<h3 id="dql-分组查询"><a class="markdownIt-Anchor" href="#dql-分组查询">#</a> DQL - 分组查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后过滤条件];</span><br><span class="line">#<span class="keyword">where</span>和<span class="keyword">having</span>的区别</span><br><span class="line">#执行时机不同：<span class="keyword">where</span>是分组之前进行过滤，不满足<span class="keyword">where</span>条件，不参与分组，而<span class="keyword">having</span>是分组之后对结果过滤</span><br><span class="line">#判断条件不同：<span class="keyword">where</span>不能对聚合函数进行判断，而<span class="keyword">having</span>可以</span><br><span class="line">#执行顺序：<span class="keyword">where</span> <span class="operator">&gt;</span> 聚合函数 <span class="operator">&gt;</span> <span class="keyword">having</span></span><br></pre></td></tr></table></figure>
<h3 id="dql-排序查询"><a class="markdownIt-Anchor" href="#dql-排序查询">#</a> DQL - 排序查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>, 字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br><span class="line">#排序方式：</span><br><span class="line">#<span class="keyword">ASC</span>：升序(默认)</span><br><span class="line">#<span class="keyword">DESC</span>：降序</span><br></pre></td></tr></table></figure>
<h3 id="dql-分页查询"><a class="markdownIt-Anchor" href="#dql-分页查询">#</a> DQL - 分页查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引,查询记录数;</span><br><span class="line">#注意：</span><br><span class="line">#起始索引从<span class="number">0</span>开始，起始索引<span class="operator">=</span>(查询页码<span class="number">-1</span>) <span class="operator">*</span> 每页显示记录数。起始索引即起始数据的下标</span><br><span class="line">#分页查询是数据库的方言，不同数据库有不同的实现，MySQL中是LIMIT</span><br><span class="line">#如果查询的是第一页数据，起始索引可以省略，直接简写为LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2 id="dcl数据控制语言"><a class="markdownIt-Anchor" href="#dcl数据控制语言">#</a> DCL (数据控制语言)</h2>
<p>DCL (Data Control Language) 数据控制语言，用来管理数据库用户、控制数据库的访问权限</p>
<h3 id="dcl-管理用户"><a class="markdownIt-Anchor" href="#dcl-管理用户">#</a> DCL - 管理用户</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询用户</span><br><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line">#创建用户</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br><span class="line">#修改用户密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line">#删除用户</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="dcl-权限控制"><a class="markdownIt-Anchor" href="#dcl-权限控制">#</a> DCL - 权限控制</h3>
<table>
<thead>
<tr>
<th style="text-align:center">权限</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ALL, ALL PRIVILEGES</td>
<td style="text-align:center">所有权限</td>
</tr>
<tr>
<td style="text-align:center">SELECT</td>
<td style="text-align:center">查询数据</td>
</tr>
<tr>
<td style="text-align:center">INSERT</td>
<td style="text-align:center">插入数据</td>
</tr>
<tr>
<td style="text-align:center">UPDATE</td>
<td style="text-align:center">修改数据</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">删除数据</td>
</tr>
<tr>
<td style="text-align:center">ALTER</td>
<td style="text-align:center">修改表</td>
</tr>
<tr>
<td style="text-align:center">DROP</td>
<td style="text-align:center">删除数据库 / 表 / 视图</td>
</tr>
<tr>
<td style="text-align:center">CREATE</td>
<td style="text-align:center">创建数据库 / 表</td>
</tr>
</tbody>
</table>
<p>其他权限描述及含义，可以直接参考官方文档</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#查询权限</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line">#授予权限</span><br><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line">#撤销权限</span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="mysql内置函数"><a class="markdownIt-Anchor" href="#mysql内置函数">#</a> MySQL 内置函数</h1>
<h2 id="字符串函数"><a class="markdownIt-Anchor" href="#字符串函数">#</a> 字符串函数</h2>
<p>MySQL 中内置了许多字符串函数，常用的几个如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CONCAT(S1, S2, …, Sn)</td>
<td style="text-align:center">字符串拼接，将 S1，S2，…，Sn 拼接成一个字符串</td>
</tr>
<tr>
<td style="text-align:center">LOWER(str)</td>
<td style="text-align:center">将字符串 str 全部转为小写</td>
</tr>
<tr>
<td style="text-align:center">UPPER(str)</td>
<td style="text-align:center">将字符串 str 全部转为大写</td>
</tr>
<tr>
<td style="text-align:center">LPAD(str, n, pad)</td>
<td style="text-align:center">左填充，用字符串 pad 对 str 的左边进行填充，直到字符串长度为 n</td>
</tr>
<tr>
<td style="text-align:center">RPAD(str, n, pad)</td>
<td style="text-align:center">右填充，用字符串 pad 对 str 的右边进行填充，直到字符串长度为 n</td>
</tr>
<tr>
<td style="text-align:center">TRIM(str)</td>
<td style="text-align:center">去掉字符串头部和尾部的空格</td>
</tr>
<tr>
<td style="text-align:center">SUBSTRING(str, start, len)</td>
<td style="text-align:center">返回字符串 str 从 start 位置开始的 len 个长度的字符串 (索引从 1 开始)</td>
</tr>
</tbody>
</table>
<h2 id="数值函数"><a class="markdownIt-Anchor" href="#数值函数">#</a> 数值函数</h2>
<p>MySQL 中几个常用的数值函数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CEIL(x)</td>
<td style="text-align:center">向上取整</td>
</tr>
<tr>
<td style="text-align:center">FLOOR(x)</td>
<td style="text-align:center">向下取整</td>
</tr>
<tr>
<td style="text-align:center">MOD(x, y)</td>
<td style="text-align:center">返回 x/y 的模</td>
</tr>
<tr>
<td style="text-align:center">RAND()</td>
<td style="text-align:center">返回 0~1 内的随机数</td>
</tr>
<tr>
<td style="text-align:center">ROUND(x, y)</td>
<td style="text-align:center">求参数 x 的四舍五入的值，保留 y 位小数</td>
</tr>
</tbody>
</table>
<h2 id="日期函数"><a class="markdownIt-Anchor" href="#日期函数">#</a> 日期函数</h2>
<p>MySQL 中几个常用的日期函数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CURDATE()</td>
<td style="text-align:center">返回当前日期</td>
</tr>
<tr>
<td style="text-align:center">CURTIME()</td>
<td style="text-align:center">返回当前时间</td>
</tr>
<tr>
<td style="text-align:center">NOW()</td>
<td style="text-align:center">返回当前日期和时间</td>
</tr>
<tr>
<td style="text-align:center">YEAR(date)</td>
<td style="text-align:center">获取指定 date 的年份</td>
</tr>
<tr>
<td style="text-align:center">MONTH(date)</td>
<td style="text-align:center">获取指定 date 的月份</td>
</tr>
<tr>
<td style="text-align:center">DAY(date)</td>
<td style="text-align:center">获取指定 date 的日期</td>
</tr>
<tr>
<td style="text-align:center">DATE_ADD(data, INTERVAL expr type)</td>
<td style="text-align:center">返回一个日期 / 时间值加上一个时间间隔 expr 后的时间值</td>
</tr>
<tr>
<td style="text-align:center">DATEDIFF(date1, date2)</td>
<td style="text-align:center">返回起始时间 date1 和结束时间 date2 之间的天数</td>
</tr>
</tbody>
</table>
<h2 id="流程函数"><a class="markdownIt-Anchor" href="#流程函数">#</a> 流程函数</h2>
<p>MySQL 中几个常用的流程函数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IF(value, t, f)</td>
<td style="text-align:center">如果 value 为 true，则返回 t，否则返回 f</td>
</tr>
<tr>
<td style="text-align:center">IFNULL(value1, value2)</td>
<td style="text-align:center">如果 value1 不为空，返回 value1，否则返回 value2</td>
</tr>
<tr>
<td style="text-align:center">CASE WHEN [val1] THEN [res1] … ELSE [default] END</td>
<td style="text-align:center">如果 val1 为 true，返回 res1，… 否则返回 default 默认值</td>
</tr>
<tr>
<td style="text-align:center">CASE [expr] WHEN [val1] THEN [res1] … ELSE [default] END</td>
<td style="text-align:center">如果 expr 的值等于 val1，返回 res1，… 否则返回 default 默认值</td>
</tr>
</tbody>
</table>
<h1 id="约束"><a class="markdownIt-Anchor" href="#约束">#</a> 约束</h1>
<ul>
<li>概念：约束时作用域表中字段上的规则，用于限制存储在表中的数据</li>
<li>目的：保证数据库中数据的正确性、有效性和完整性</li>
<li>分类：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">约束</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">非空约束</td>
<td style="text-align:center">限制该字段的数据不能为 null</td>
<td style="text-align:center">NOT NULL</td>
</tr>
<tr>
<td style="text-align:center">唯一约束</td>
<td style="text-align:center">保证该字段的所有数据都是唯一、不重复的</td>
<td style="text-align:center">UNIQUE</td>
</tr>
<tr>
<td style="text-align:center">主键约束</td>
<td style="text-align:center">主键是一行数据的唯一标识，要求非空且唯一</td>
<td style="text-align:center">PRIMARY KEY</td>
</tr>
<tr>
<td style="text-align:center">默认约束</td>
<td style="text-align:center">保存数据时，如果未指定该字段的值，则采用默认值</td>
<td style="text-align:center">DEFAULT</td>
</tr>
<tr>
<td style="text-align:center">检查约束</td>
<td style="text-align:center">保证字段值满足某一个条件</td>
<td style="text-align:center">CHECK</td>
</tr>
<tr>
<td style="text-align:center">外键约束</td>
<td style="text-align:center">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>
<td style="text-align:center">FOREIGN KEY</td>
</tr>
</tbody>
</table>
<p><strong>使用案例：</strong></p>
<p>根据需求，完成如下表结构的创建</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段名</th>
<th style="text-align:center">字段含义</th>
<th style="text-align:center">字段类型</th>
<th style="text-align:center">约束条件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">ID 唯一标识</td>
<td style="text-align:center">int</td>
<td style="text-align:center">主键，并且自动增长</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">姓名</td>
<td style="text-align:center">varchar(10)</td>
<td style="text-align:center">不为空，并且唯一</td>
</tr>
<tr>
<td style="text-align:center">age</td>
<td style="text-align:center">年龄</td>
<td style="text-align:center">int</td>
<td style="text-align:center">大于 0，并且小于等于 120</td>
</tr>
<tr>
<td style="text-align:center">status</td>
<td style="text-align:center">状态</td>
<td style="text-align:center">char(1)</td>
<td style="text-align:center">如果没有指定该值，则默认为 1</td>
</tr>
<tr>
<td style="text-align:center">gender</td>
<td style="text-align:center">性别</td>
<td style="text-align:center">char(1)</td>
<td style="text-align:center">无</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user(</span><br><span class="line">    id int primary key auto_increment comment &#x27;id主键&#x27;,</span><br><span class="line">    name varchar(10) not null unique comment &#x27;姓名&#x27;,</span><br><span class="line">    age int check ( age &gt; 0 and age &lt;= 120 ) comment &#x27;年龄&#x27;,</span><br><span class="line">    status char(1) default &#x27;1&#x27; comment &#x27;状态&#x27;,</span><br><span class="line">    gender char(1)</span><br><span class="line">)comment &#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure>
<h2 id="外键约束"><a class="markdownIt-Anchor" href="#外键约束">#</a> 外键约束</h2>
<p>使用外键关联其他表时，具有外键的表被称为子表，被关联的表被称为父表。也称从表与主表。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1.创建表时直接添加外键</span><br><span class="line">create table 表名(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">    [CONSTRAINT] [外键名称] FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line">)</span><br><span class="line">#2.建表后再修改表，添加外键</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line">#删除外键</span><br><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br></pre></td></tr></table></figure>
<p><strong>删除 / 更新行为：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">行为</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NO ACTION</td>
<td style="text-align:center">当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新。(与 RESTRICT 一致)</td>
</tr>
<tr>
<td style="text-align:center">RESTRICT</td>
<td style="text-align:center">当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新。(与 NO ACTION 一致)</td>
</tr>
<tr>
<td style="text-align:center">CASCADE</td>
<td style="text-align:center">当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除 / 更新外键在子表中的记录。</td>
</tr>
<tr>
<td style="text-align:center">SET NULL</td>
<td style="text-align:center">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键的值为 null。(这就要求该外键允许取 null)</td>
</tr>
<tr>
<td style="text-align:center">SET DEFAULT</td>
<td style="text-align:center">父表有变更时，子表将外键列设置成一个默认的值 (innodb 不支持)</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#在创建外键时，指定外键的行为</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表列名) ON UPDATE CASCADE ON DELETE CASCADE;#ON UPDATE为更新时，ON DELETE为删除时</span><br></pre></td></tr></table></figure>
<h1 id="多表查询"><a class="markdownIt-Anchor" href="#多表查询">#</a> <mark>多表查询</mark></h1>
<p>多表关系：</p>
<p>一对多，多对多，一对一</p>
<p>一对多实现：在多的一方建立外键，指向一的一方的主键</p>
<p>多对多实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>
<p>一对一实现：在任意一方加入外键，关联另外一方的主键，并设置外键为唯一的 (UNIQUE)</p>
<h2 id="多表查询概述"><a class="markdownIt-Anchor" href="#多表查询概述">#</a> 多表查询概述</h2>
<h3 id="语法"><a class="markdownIt-Anchor" href="#语法">#</a> 语法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段名/通配符 from 表一, 表二 where 条件;</span><br><span class="line">#例如</span><br><span class="line">select * from emp, dept where emp.depe_id = dept.id;</span><br><span class="line">#如果不使用where关键字添加条件，则给出结果为笛卡尔积</span><br></pre></td></tr></table></figure>
<h3 id="多表查询分类"><a class="markdownIt-Anchor" href="#多表查询分类">#</a> 多表查询分类</h3>
<p><strong>连接查询：</strong></p>
<ul>
<li>
<p>内连接：查询 A 表与 B 表的交集部分</p>
</li>
<li>
<p>外连接：分为左外连接与右外连接</p>
</li>
</ul>
<ol>
<li>左外连接：查询左表所有数据，以及两张表交集部分数据</li>
<li>右外连接：查询右表所有数据，以及两张表交集部分数据</li>
</ol>
<ul>
<li>自连接：当前表与自身的连接查询，自连接必须使用表别名</li>
</ul>
<p><strong>子查询</strong></p>
<h2 id="连接查询"><a class="markdownIt-Anchor" href="#连接查询">#</a> 连接查询</h2>
<h3 id="内连接"><a class="markdownIt-Anchor" href="#内连接">#</a> 内连接</h3>
<p><strong>内连接查询语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#隐式内连接</span><br><span class="line">select 字段列表 from 表一, 表二 where 条件;</span><br><span class="line">#显式内连接</span><br><span class="line">select 字段列表 from 表一 [inner] join 表二 on 连接条件 ...;</span><br></pre></td></tr></table></figure>
<h3 id="外连接"><a class="markdownIt-Anchor" href="#外连接">#</a> 外连接</h3>
<p><strong>左外连接语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 from 表一 left [outer] join 表二 on 条件 ...;</span><br></pre></td></tr></table></figure>
<p><strong>右外连接语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 from 表二 right [outer] join 表二 on 条件 ...;</span><br></pre></td></tr></table></figure>
<h3 id="自连接"><a class="markdownIt-Anchor" href="#自连接">#</a> 自连接</h3>
<p><strong>自连接查询语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 from 表A 别名A join 表A 别名B on 条件 ...;</span><br></pre></td></tr></table></figure>
<h3 id="联合查询"><a class="markdownIt-Anchor" href="#联合查询">#</a> 联合查询</h3>
<p>关键字：union、union all</p>
<p>联合查询：把多次查询的结果合并起来，形成一个新的查询结果集。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 字段列表 表A ...</span><br><span class="line">union [all]</span><br><span class="line">select 字段列表 表B ...;</span><br><span class="line">#注意，这三行是一条语句</span><br><span class="line">#使用all关键字，会将两条查询结果直接拼接</span><br><span class="line">#若不使用all，则会去除重复值</span><br><span class="line">#联合查询时， 各表的列数需要相同，且字段类型也相同</span><br></pre></td></tr></table></figure>
<h3 id="子查询嵌套查询"><a class="markdownIt-Anchor" href="#子查询嵌套查询">#</a> 子查询 (嵌套查询)</h3>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t1 where column1 = (select column1 from t2);</span><br></pre></td></tr></table></figure>
<p>其中括号内部分被称为子查询，根据子查询返回结果的不同，可以分为：</p>
<ul>
<li>标量子查询 (子查询结果为单个值)</li>
<li>列子查询 (子查询结果为一列)</li>
<li>行子查询 (子查询结果为一行)</li>
<li>表子查询 (子查询结果为多行多列)</li>
</ul>
<p>根据子查询的位置，可以分为：where 之后、from 之后、select 之后</p>
<p><strong>列子查询常用操作符：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IN</td>
<td style="text-align:center">在指定的集合范围之内，多选一</td>
</tr>
<tr>
<td style="text-align:center">NOT IN</td>
<td style="text-align:center">不在指定的集合范围之内</td>
</tr>
<tr>
<td style="text-align:center">ANY</td>
<td style="text-align:center">子查询返回列表中，有任意一个满足即可</td>
</tr>
<tr>
<td style="text-align:center">SOME</td>
<td style="text-align:center">与 ANY 等同，使用 SOME 的地方都可以使用 ANY</td>
</tr>
<tr>
<td style="text-align:center">ALL</td>
<td style="text-align:center">子查询返回列表的所有值都必须满足</td>
</tr>
</tbody>
</table>
<h1 id="事务"><a class="markdownIt-Anchor" href="#事务">#</a> <mark>事务</mark></h1>
<p><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作<strong>要么同时成功，要么同时失败</strong>。</p>
<p>对于 mysql 来说，默认每一条一句都是一个事务，执行后都会默认提交。</p>
<h2 id="事务控制"><a class="markdownIt-Anchor" href="#事务控制">#</a> 事务控制</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select @@autocommit;#检查自动提交的状态，1为开启，0为关闭</span><br><span class="line">set @@autocommit = 0;#设置自动提交为0</span><br><span class="line">#在这样设置后每次提交事务都需要手动提交</span><br><span class="line"></span><br><span class="line">commit;#手动提交事务</span><br><span class="line"></span><br><span class="line">rollback;#事务提交失败时，使用该指令回滚事务</span><br></pre></td></tr></table></figure>
<p>设置自动提交的状态为 0 后，每次都需要手动提交，未免过于麻烦，所以还有其他方式使用事务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启事务</span><br><span class="line">start transaction;</span><br><span class="line">#或者：</span><br><span class="line">begin;</span><br><span class="line"></span><br><span class="line">#提交</span><br><span class="line">commit;</span><br><span class="line">#回滚</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure>
<p>事务控制用于操作一些必须同时完成的指令，比如银行转账时的 A 账户扣款与 B 账户加款。</p>
<h2 id="事务的四大特性"><a class="markdownIt-Anchor" href="#事务的四大特性">#</a> 事务的四大特性</h2>
<p>原子性 (Atomicity)：<strong>事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</strong></p>
<p>一致性 (Consistency)：<strong>事务完成时，必须使所有的数据都保持一直状态。</strong></p>
<p>隔离性 (Isolation)：<strong>数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</strong></p>
<p>持久性 (Durability)：<strong>事务一旦提交或回滚，它对数据库中的数据的改变是永久的。</strong></p>
<p>被缩写为：ACID</p>
<h2 id="并发事务问题"><a class="markdownIt-Anchor" href="#并发事务问题">#</a> 并发事务问题</h2>
<p>常见并发事务问题：</p>
<table>
<thead>
<tr>
<th style="text-align:center">问题</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">脏读</td>
<td style="text-align:center">一个事务读到另外一个事务还没有提交的数据</td>
</tr>
<tr>
<td style="text-align:center">不可重复读</td>
<td style="text-align:center">一个事务先后读取同一条记录，但两次读取的数据不同，称为不可重复读</td>
</tr>
<tr>
<td style="text-align:center">幻读</td>
<td style="text-align:center">一个事务按照条件查询数据时，没有对应的数据行，但插入时，又发现这行数据已经存在</td>
</tr>
</tbody>
</table>
<p>解决方式：<strong>事务的隔离级别</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">隔离级别</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:center">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Read uncommitted</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Read committed</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Repeatable Read (MySQL 默认)</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">Serializable</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
</tr>
</tbody>
</table>
<p>从上到下隔离级别逐渐提高，但运行效率逐渐下降。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看事务隔离级别</span><br><span class="line">select @@transaction_isolation;</span><br><span class="line"></span><br><span class="line">#设置事务的隔离级别</span><br><span class="line">set [session | global] transaction isolation level &#123;隔离级别&#125;;</span><br><span class="line">#session会话级别，仅对当前客户端生效</span><br><span class="line">#global，对所有客户端生效</span><br></pre></td></tr></table></figure>
<h1 id="-分割线-基础内容到此结束"><a class="markdownIt-Anchor" href="#-分割线-基础内容到此结束">#</a> ------ 分割线 ------(基础内容到此结束)</h1>
<h1 id="存储引擎"><a class="markdownIt-Anchor" href="#存储引擎">#</a> 存储引擎</h1>
<p>存储引擎就是存储数据、建立索引、更新 / 查询数据等技术的实现方式。</p>
<p>存储引擎是基于表的，而不是基于库的，所以存储引擎也可被称为表类型。</p>
<p>MySQL 默认的存储引擎是 InnoDB。</p>
<p>创建表时，可在括号后面写上<strong> ENGINE = INNODB</strong> 来指定存储引擎，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table table_name(</span><br><span class="line">	...</span><br><span class="line">)engine = InnoDB comment [注释];</span><br><span class="line">#使用show engines;可以查看所有的存储引擎</span><br></pre></td></tr></table></figure>
<h2 id="存储引擎特点"><a class="markdownIt-Anchor" href="#存储引擎特点">#</a> 存储引擎特点</h2>
<h3 id="innodb"><a class="markdownIt-Anchor" href="#innodb">#</a> InnoDB</h3>
<p>InnoDB 是一种兼顾高可靠性和高性能的通过用存储引擎，在 MySQL5.5 之后，InnoDB 是默认的 MySQL 存储引擎。</p>
<p>特点：</p>
<ul>
<li>DML 操作遵循 ACID 模型，支持事务</li>
<li>行级锁，提高并发访问性能</li>
<li>支持外键 FOREIGN KEY 约束，保证数据的完整性和正确性</li>
</ul>
<p>文件：</p>
<p>xxx.ibd：xxx 是表名，innoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构 (frm、sdi)、数据和索引。参数：innodb_file_per_table</p>
<p>InnoDB 中一个页 / 块，大小为 16kb</p>
<h3 id="myisam"><a class="markdownIt-Anchor" href="#myisam">#</a> MyISAM</h3>
<p>MyISAM 是 MySQL 早期的默认存储引擎。</p>
<p>特点：</p>
<ul>
<li>不支持事务，不支持外键</li>
<li>支持表锁，不支持行锁</li>
<li>访问速度快</li>
</ul>
<p>文件：</p>
<ul>
<li>xxx.sdi：存储表结构信息</li>
<li>xxx.MYD：存储数据</li>
<li>xxx.MYI：存储索引</li>
</ul>
<h3 id="memory"><a class="markdownIt-Anchor" href="#memory">#</a> Memory</h3>
<p>Memory 引擎的表数据是存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或者缓存使用</p>
<p>特点：</p>
<ul>
<li>内存释放</li>
<li>hash 索引 (默认)</li>
</ul>
<p>文件：</p>
<p>xxx.sdi：存储表结构信息</p>
<h3 id="特点对比"><a class="markdownIt-Anchor" href="#特点对比">#</a> 特点对比</h3>
<table>
<thead>
<tr>
<th style="text-align:center">特点</th>
<th style="text-align:center">InnoDB</th>
<th style="text-align:center">MyISAM</th>
<th style="text-align:center">Memory</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">存储限制</td>
<td style="text-align:center">64TB</td>
<td style="text-align:center">有</td>
<td style="text-align:center">有</td>
</tr>
<tr>
<td style="text-align:center">事务安全</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">锁机制</td>
<td style="text-align:center">行锁</td>
<td style="text-align:center">表锁</td>
<td style="text-align:center">表锁</td>
</tr>
<tr>
<td style="text-align:center">B+tree 索引</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">Hash 索引</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">全文索引</td>
<td style="text-align:center">支持 (5.6 版本后)</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">空间使用</td>
<td style="text-align:center">高</td>
<td style="text-align:center">低</td>
<td style="text-align:center">N/A</td>
</tr>
<tr>
<td style="text-align:center">内存使用</td>
<td style="text-align:center">高</td>
<td style="text-align:center">低</td>
<td style="text-align:center">中等</td>
</tr>
<tr>
<td style="text-align:center">批量插入速度</td>
<td style="text-align:center">低</td>
<td style="text-align:center">高</td>
<td style="text-align:center">高</td>
</tr>
<tr>
<td style="text-align:center">支持外键</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<h2 id="存储引擎选则"><a class="markdownIt-Anchor" href="#存储引擎选则">#</a> 存储引擎选则</h2>
<p>InnoDB：MySQL 的默认存储引擎。如果应用<strong>对事务的完整性有比较高</strong>的要求，在并<strong>发条件下要求数据的一致性</strong>，<strong>数据操作除了插入和查询之外，还包含很多的更新、删除操作</strong>，那么 InnoDB 引擎是比较合适的选择。</p>
<p>MyISAM：如果应用是以<strong>读操作和插入操作为主</strong>，只有<strong>很少的更新和删除操作</strong>，并且<strong>对事务的完整性、并发性要求不是很高</strong>，那么选择这个引擎是非常合适的。</p>
<p>Memory：将所有数据保存在内存中，访问速度快，<strong>通常用于临时表及缓存</strong>。Memory 的缺陷就是对表的大小有限制，<strong>太大的表无法缓存在内存中</strong>，而且<strong>无法保障数据的安全性</strong>。</p>
<h1 id="索引"><a class="markdownIt-Anchor" href="#索引">#</a> <mark>索引</mark></h1>
<h2 id="概述"><a class="markdownIt-Anchor" href="#概述">#</a> 概述</h2>
<p>索引 (index) 是帮助 MySQL 高效获取数据的数据结构 (有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用 (指向) 数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p>
<p><strong>优点：</strong></p>
<ul>
<li>提高数据检索的效率，降低数据库的 IO 成本</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>索引列也需要占用空间</li>
<li>索引大大的提高了查询效率，但同时也降低了增删改 (INSERT、DELETE、UPDATE) 的效率</li>
</ul>
<h2 id="索引结构"><a class="markdownIt-Anchor" href="#索引结构">#</a> 索引结构</h2>
<p>MySQL 的索引是在存储引擎层实现的，不同的存储引擎有不同的结构，主要包含以下几种：</p>
<table>
<thead>
<tr>
<th style="text-align:center">索引结构</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">B+Tree 索引</td>
<td style="text-align:center">最常见的索引类型，大部分引擎都支持</td>
</tr>
<tr>
<td style="text-align:center">Hash 索引</td>
<td style="text-align:center">底层数据结构是用哈希表实现的，只有精确匹配索引列的查询才有效，不支持范围查询</td>
</tr>
<tr>
<td style="text-align:center">R-tree (空间索引)</td>
<td style="text-align:center">空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>
</tr>
<tr>
<td style="text-align:center">Full-text (全文索引)</td>
<td style="text-align:center">是一种通过建立倒排索引，快速匹配文档的方式。类似于 Lucene，Solr，ES</td>
</tr>
</tbody>
<tbody>
<tr>
<td style="text-align:center">索引</td>
<td style="text-align:center">InnoDB</td>
<td>MyISAM</td>
<td>Memory</td>
</tr>
<tr>
<td style="text-align:center">:--------:</td>
<td style="text-align:center">:-------------:</td>
<td>:----:</td>
<td>:----:</td>
</tr>
<tr>
<td style="text-align:center">B+tree 索引</td>
<td style="text-align:center">支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td style="text-align:center">Hash 索引</td>
<td style="text-align:center">不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td style="text-align:center">R-tree 索引</td>
<td style="text-align:center">不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td style="text-align:center">Full-text</td>
<td style="text-align:center">5.6 版本之后支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<p><strong>B 树：</strong></p>
<p>对于 B 树，假设要存储下面一组数据：</p>
<p>234、345、23、899、1200、1234、1500、1000、123、245、12、1567、1800、1980、2000、1888、2456</p>
<p>若树的度为 5，则一个节点可以存储 4 份数据、5 个指针。</p>
<p>存储结果如下：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305061707434.png" alt="image-20230506170709350"></p>
<p>当一个节点的数据达到 5 时，会将其从中间数据分裂，然后向上存储，且存储时数据分布会排序好。</p>
<p><strong>B + 树：</strong></p>
<p>对于 B + 树，向上裂变的同时，叶子节点中仍保存数据，并在叶子节点处建立指向其下一个兄弟节点的索引，以形成一条链表，便于区域查找。</p>
<p>假设要插入下面一组数据：</p>
<p>1000、567、234、232、890、1234、2345</p>
<p>若树的度为 5，则存储结果如下：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305061711027.png" alt="image-20230506171133948"></p>
<p>B + 树的所有数据都会出现在叶子节点，非叶子节点仅仅起到索引数据的作用。</p>
<p>MySQL 索引数据结构对经典的 B + 树进行了优化，将原 B + 树叶子节点的单链表结构修改为了双向循环链表，示意图如下：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305061713810.png" alt="image-20230506171358693"></p>
<p>这样的修改提高了区间访问的性能。</p>
<h2 id="索引分类"><a class="markdownIt-Anchor" href="#索引分类">#</a> 索引分类</h2>
<p>在 InnoDB 存储引擎中，根据索引的存储形式，可以分为以下两种：</p>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">含义</th>
<th style="text-align:center">特点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">聚集索引 (Clustered Index)</td>
<td style="text-align:center"><strong>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据</strong></td>
<td style="text-align:center"><strong>必须有，而且只有一个</strong></td>
</tr>
<tr>
<td style="text-align:center">二级索引 (Secondary Index)</td>
<td style="text-align:center">将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>
<td style="text-align:center">可以存在多个</td>
</tr>
</tbody>
</table>
<p>剧集索引选取规则：</p>
<ul>
<li>如果存在主键，那么主键索引就是聚集索引。</li>
<li>如果不存在主键，将使用第一个唯一 (UNIQUE) 索引作为聚集索引。</li>
<li>如果表没有主键，或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引。</li>
</ul>
<p>回表查询：先通过二级索引进行查询，查询到对应的主键，然后再通过聚集索引查询到行数据。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305061657943.png" alt="image-20230506165754773"></p>
<h2 id="索引语法"><a class="markdownIt-Anchor" href="#索引语法">#</a> 索引语法</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建索引：</span><br><span class="line">CREATE [UNIQUE|FULLTEXT] INDEX index_name ON table_name (index_col_name, ...);</span><br><span class="line">#查看索引：</span><br><span class="line">SHOW INDEX FROM table_name;</span><br><span class="line">#删除索引：</span><br><span class="line">DROP INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure>
<p>创建索引时，通常使用如下命名方式：</p>
<p>idx_tableName_column</p>
<p>其中 idx 为 index 缩写，tableName 为表名，column 为索引字段。</p>
<h2 id="sql性能分析"><a class="markdownIt-Anchor" href="#sql性能分析">#</a> SQL 性能分析</h2>
<h3 id="sql执行频率"><a class="markdownIt-Anchor" href="#sql执行频率">#</a> SQL 执行频率</h3>
<p>MySQL 客户端连接成功后，通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show [session|global] status</span><br></pre></td></tr></table></figure>
<p>命令可以提供服务器状态信息。通过如下指令，可以查看当前数据库的增、删、改、查的访问频次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW GLOBAL STATUS LIKE &#x27;Com_______&#x27;;#共7个下划线</span><br></pre></td></tr></table></figure>
<p>通过该指令，可以知道该数据库使用哪些指令最频繁，可以对其进行优化。</p>
<h3 id="慢查询日志"><a class="markdownIt-Anchor" href="#慢查询日志">#</a> 慢查询日志</h3>
<p>慢查询日志记录了所有执行时间超过指定参数 (long_query_time, 单位：秒，默认 10 秒) 的所有 SQL 语句的日志</p>
<p>MySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件 (/etc/my.cnf) 中配置如下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启MySQL慢查询日志开关：</span><br><span class="line">slow_query_log=1</span><br><span class="line">#设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会被视为慢查询，记录到日志中</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure>
<p>配置完成之后，通过指令重启 MySQL 服务器进行测试，查看慢日志文件中记录的信息，</p>
<p>路径：/var/lib/mysql/ 本机名 - slow.log</p>
<p>也可以通过指令开启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启MySQL慢查询日志开关</span><br><span class="line">set global slow_query_log=ON;</span><br><span class="line">#设置慢查询日志的时间为2秒</span><br><span class="line">set long_query_time=2;</span><br></pre></td></tr></table></figure>
<p>在数据库中可以使用指令查看慢查询日志是否开启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;slow_query_log&#x27;;</span><br></pre></td></tr></table></figure>
<h3 id="profile详情"><a class="markdownIt-Anchor" href="#profile详情">#</a> profile 详情</h3>
<p>show profile 能够在做 SQL 优化时帮助了解时间消耗在哪里。</p>
<p>通过 have_profiling 参数，能够看到当前 M 有 SQL 是否支持 profile 操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看是否支持profile操作</span><br><span class="line">SELECT @@have_profiling;</span><br><span class="line">#查看是否开启</span><br><span class="line">SHOW VARIABLES LIKE &#x27;profiling&#x27;;</span><br><span class="line">#开启profile功能</span><br><span class="line">SET profiling=ON;</span><br><span class="line">#查看每一条SQL的耗时基本情况</span><br><span class="line">show profiles;</span><br><span class="line">#查看指定query_id的SQL语句各个阶段的耗时情况</span><br><span class="line">show profile for query query_id;</span><br><span class="line">#查看指定query_id的SQL语句CPU的使用情况</span><br><span class="line">show profile cpu for query query_id;</span><br></pre></td></tr></table></figure>
<h3 id="explain执行计划"><a class="markdownIt-Anchor" href="#explain执行计划">#</a> explain 执行计划</h3>
<p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#直接在select语句之前加上关键字explain/desc</span><br><span class="line">EXPLAIN SELECT 字段列表 FROM 表名 WHERE 条件;</span><br></pre></td></tr></table></figure>
<p>查询结果：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305061952536.png" alt="image-20230506195211376"></p>
<p>其中各个字段所表示的含义：</p>
<p>id：select 查询的序列号，表示查询中执行 select 子句或者是操作表的顺序 (id 相同，执行顺序从上到下；id 不同，值越大，越先执行)</p>
<p>select_type：表示 select 的类型，常见的取值有 SIMPLE (简单表，即不适用表连接或者子查询)、PRIMARY (主查询，即外层的查询)、UNION (UNION 中的第二个或者后面的查询语句)、SUBQUERY (SELECT/WHERE 之后包含了子查询) 等</p>
<p><strong>type：表示连接类型，性能由好到差的连接类型为：NULL、system、const、eq_ref、ref、range、index、all</strong></p>
<p><strong>possible_key：显示可能应用到这张表上的索引，一个或多个</strong></p>
<p><strong>key：实际使用的索引，如果为 NULL，则没有使用索引</strong></p>
<p><strong>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好。</strong></p>
<p>rows：MySQL 认为必须要执行查询的行数，在 innoDB 引擎中，是一个估计值，可能并不总是准确的</p>
<p>filtered：表示返回结果的行数占需读取行数的百分比，filtered 的值越大越好</p>
<h2 id="索引使用"><a class="markdownIt-Anchor" href="#索引使用">#</a> 索引使用</h2>
<ul>
<li>最左前缀法则：</li>
</ul>
<p>如果索引了多列 (联合索引)，要遵守最左前缀法则。即<strong>查询从索引的最左列开始</strong>，并且不跳过索引中的列。</p>
<p>如果跳跃某一列，<strong>索引将部分失效 (后面的字段索引失效)</strong>。</p>
<ul>
<li>范围查询：</li>
</ul>
<p>联合索引中，出现范围查询 (&gt;, &lt;)，<strong>范围查询右侧的列索引失效</strong>。</p>
<p>如果业务允许，使用范围查询时尽量使用 (&gt;=, &lt;=)，这样不会使范围查询右侧的列索引失效。</p>
<ul>
<li>索引列运算：</li>
</ul>
<p>如果在索引列上进行运算操作，<strong>索引将失效</strong>。</p>
<ul>
<li>字符串类型：</li>
</ul>
<p>字符串类型字段使用时，不加引号，<strong>索引将失效</strong>。</p>
<ul>
<li>模糊查询：</li>
</ul>
<p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p>
<ul>
<li>or 连接的条件：</li>
</ul>
<p>用 or 分割开的条件，<strong>如果仅其中一个有索引，则索引会失效</strong>，必须在 or 连接的所有条件都有索引时，才会使用索引。</p>
<ul>
<li>数据分布影响：</li>
</ul>
<p>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</p>
<ul>
<li><mark>SQL 提示：</mark></li>
</ul>
<p>SQL 提示是优化数据库的一个重要手段，简单来说，就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。</p>
<ol>
<li>use index (index_name)# 建议使用指定索引 (MySQL 会自己判断是否使用)</li>
<li>ignore index (index_name)# 忽略指定索引</li>
<li>force index (index_name)# 强制使用指定索引</li>
</ol>
<p>将其写在表名后面</p>
<ul>
<li><mark>覆盖索引：</mark></li>
</ul>
<p>尽量使用覆盖索引 (查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到)，减少 select *</p>
<ul>
<li><mark>前缀索引：</mark></li>
</ul>
<p>当字段类型为字符串 (varchar、text 等) 时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘 IO，影响查询效率。此时可以只将字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create index index_name on table_name(column(n));#n表示前缀长度</span><br></pre></td></tr></table></figure>
<p>前缀长度：</p>
<p>可以根据索引的选择性来决定，而选择性是指不重复的索引值 (基数) 和数据表的记录总数的比值，索引选择性越高则查询效率越高。</p>
<p>唯一索引的选择性是 1，这是最好的索引选择性，性能也是最好的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(distinct column) from table_name;#统计字段去重后的数量</span><br><span class="line">seselect count(distinct column)/count(*) from table_name;#计算索引选择性</span><br><span class="line"></span><br><span class="line">seselect count(distinct substring(column, 1, n))/count(*) from table_name;</span><br><span class="line">#将字段从第一个字符开始截取，截取n个字符，判断其索引选择性</span><br></pre></td></tr></table></figure>
<ul>
<li>单列索引与联合索引</li>
</ul>
<p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引</p>
<h2 id="索引设计原则"><a class="markdownIt-Anchor" href="#索引设计原则">#</a> 索引设计原则</h2>
<ol>
<li>针对于数据量较大，且查询比较频繁的表建立索引。</li>
<li>针对于常作为查询条件 (where) 、排序 (orderby)、分组 (group by) 操作的字段建立索引。</li>
<li>尽量选择区分度高的列作为索引， 尽量建立唯一索引，区分度越高，使用索引的效率越高。</li>
<li>如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</li>
<li>尽量使用联合索引， 减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</li>
<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</li>
<li>如果 索引列不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询。</li>
</ol>
<h1 id="sql优化"><a class="markdownIt-Anchor" href="#sql优化">#</a> SQL 优化</h1>
<h2 id="insert优化"><a class="markdownIt-Anchor" href="#insert优化">#</a> insert 优化</h2>
<ul>
<li>推荐使用批量插入</li>
<li>手动提交事务，避免因 mysql 自动提交造成的多次提交</li>
<li>主键顺序插入</li>
</ul>
<h2 id="大批量插入数据load"><a class="markdownIt-Anchor" href="#大批量插入数据load">#</a> 大批量插入数据 (load)</h2>
<ul>
<li>如果一次性需要插入大批量数据，使用 insert 语句插入性能较低，此时可以使用 MySQL 数据库提供的 load 指令进行插入。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#客户端连接服务端时，加上参数 --local-infile</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line">#这里的--local-infile表示需要加载本地文件</span><br><span class="line"></span><br><span class="line">#使用指令检查local_infile是否开启：</span><br><span class="line">select @@local_infile;</span><br><span class="line">#设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile=1;</span><br><span class="line"></span><br><span class="line">#执行load指令将准备好的数据，加载到表结构中：</span><br><span class="line">load data local infile &#x27;/file_name&#x27; into table table_name fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27;;</span><br><span class="line">#其中&#x27;file_name&#x27;处填写文件路径</span><br><span class="line">#第一个&#x27;,&#x27;为字段限制</span><br><span class="line">#第二个&#x27;\n&#x27;为行限制</span><br></pre></td></tr></table></figure>
<h2 id="主键优化"><a class="markdownIt-Anchor" href="#主键优化">#</a> 主键优化</h2>
<ul>
<li>数据组织方式</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081510662.png" alt="image-20230508151018455"></p>
<ul>
<li>页分裂</li>
</ul>
<p>页可以为空，也可以填充一半，也可以填充 100%。</p>
<p>每个页包含了 2-N 行数据 (如果一行数据过大，会行溢出)，根据主键排列。</p>
<p><strong>主键顺序插入示意图：</strong></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081513612.png" alt="image-20230508151340508"></p>
<p><strong>主键乱序插入导致页分裂示意图：</strong></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081514227.png" alt="image-20230508151458116"></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081514238.png" alt="image-20230508151416118"></p>
<ul>
<li>页合并</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081517141.png" alt="image-20230508151700027"></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081517874.png" alt="image-20230508151756743"></p>
<ul>
<li>主键设计原则：</li>
</ul>
<p>满足业务需求的情况下，尽量降低主键的长度。</p>
<p>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键。</p>
<p>尽量不要使用 UUID 作为主键或者其他自然主键，如身份证号 (因为它们不具备顺序性、且长度较长)。</p>
<p>业务操作时，避免对主键的修改。</p>
<h2 id="order-by优化"><a class="markdownIt-Anchor" href="#order-by优化">#</a> order by 优化</h2>
<ol>
<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</li>
<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081600442.png" alt="image-20230508160059268"></p>
<ul>
<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>
<li>尽量使用覆盖索引</li>
<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则 (ASC/DESC)</li>
<li>如果不可避免的出现 filesort，大量数据排序时，可以适当增大排序缓冲区大小 sort_buffer_size (默认 256k)</li>
</ul>
<h2 id="group-by优化"><a class="markdownIt-Anchor" href="#group-by优化">#</a> group by 优化</h2>
<p>与 order by 类似</p>
<h2 id="limit优化"><a class="markdownIt-Anchor" href="#limit优化">#</a> limit 优化</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081623188.png" alt="image-20230508162020948"></p>
<h2 id="count优化"><a class="markdownIt-Anchor" href="#count优化">#</a> count 优化</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305081629652.png" alt="image-20230508162925536"></p>
<p>count 的几种用法</p>
<ul>
<li>
<p>count () 是一个聚合函数，对于返回的结果集，一行行的判断，如果 count 函数的参数不是 null，累计值就加 1，否则不加，最后返回累计值。</p>
</li>
<li>
<p>用法：count (*)、count (主键)、count (字段)、count (1)</p>
</li>
<li>
<p>按效率排序：count (字段)&lt;count (主键)&lt;count (1) 约等于 count (*)</p>
</li>
</ul>
<h2 id="update优化"><a class="markdownIt-Anchor" href="#update优化">#</a> update 优化</h2>
<p>InnoDB 拥有行锁，通过事务对表进行更新时，可以仅锁定行。</p>
<p>但只有通过索引的修改才会使用行锁，<strong>如果未建立相应索引，则会导致表锁</strong>，从而降低并发性能。</p>
<p><strong>因此尽量使用有索引的字段进行 update</strong>。</p>
<h1 id="视图"><a class="markdownIt-Anchor" href="#视图">#</a> 视图</h1>
<h2 id="基础"><a class="markdownIt-Anchor" href="#基础">#</a> 基础</h2>
<p>介绍：视图 (View) 是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p>
<p>通俗的讲，视图只保存了查询的 SQL 逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条 SQL 查询语句上。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建</span><br><span class="line">CREATE [OR REPLACE] VIEW 视图名[(列名列表)] \</span><br><span class="line">AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION];</span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line">SHOW CREATE VIEW view_name;#查看创建视图语句</span><br><span class="line">SELECT * FROM view_name ...;#查看视图数据</span><br><span class="line"></span><br><span class="line">#修改</span><br><span class="line">#方式一：</span><br><span class="line">CREATE [OR REPLACE] VIEW view_name[(列名列表)] \</span><br><span class="line">AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION];</span><br><span class="line">#方式二：</span><br><span class="line">ALTER VIEW view_name[(列名列表)] AS SELECT语句 [WITH [CASCADED | LOCAL] CHECK OPTION];</span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">DROP VIEW [IF EXISTS] view_name [,view_name2 ...];</span><br></pre></td></tr></table></figure>
<h2 id="视图检查选项"><a class="markdownIt-Anchor" href="#视图检查选项">#</a> 视图检查选项</h2>
<p>当使用 WITH CHECK OPTION 子句创建视图时，MySQL 会通过视图检查正在更改的每个行，例如插入，更新，删除，以使其符合视图的定义。</p>
<p>MySQL 允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。</p>
<p>为了确定检查的范围，MySQL 提供了两个选项：CASCADED 和 LOCAL，默认值为 CASCADED。</p>
<p>CASCADED 会向上添加 CASCADED 进行检查。</p>
<p>LOCAL 仅会在该视图进行检查，并不会向上添加。</p>
<h2 id="更新及作用"><a class="markdownIt-Anchor" href="#更新及作用">#</a> 更新及作用</h2>
<p><strong>视图的更新：</strong></p>
<p>要使视图可更新，视图中的行与基础表中的行之间必须存在一对一的关系。</p>
<p>如果视图包含以下任何一项，即该视图不可更新：</p>
<ol>
<li>聚合函数或窗口函数 (SUM ()、MIN ()、MAX ()、COUNT () 等)</li>
<li>DISTINCT</li>
<li>GROUP BY</li>
<li>HAVING</li>
<li>UNION 或者 UNION ALL</li>
<li>其他导致视图行与基础表行不能一对一的操作</li>
</ol>
<p><strong>作用：</strong></p>
<ul>
<li>简单：视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。</li>
<li>安全：数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据。</li>
<li>数据独立：视图可以帮助用户屏蔽真实表结构变化带来的影响。</li>
</ul>
<h1 id="存储过程类似于函数"><a class="markdownIt-Anchor" href="#存储过程类似于函数">#</a> <mark>存储过程 (类似于函数)</mark></h1>
<ul>
<li>介绍</li>
</ul>
<p>存储过程是事先经过编译并存储再数据库中的一段 SQL 语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p>
<p>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用。</p>
<ul>
<li>特点</li>
</ul>
<p>封装、复用</p>
<p>可以接收参数，也可以返回数据</p>
<p>减少网络交互，效率提升</p>
<h2 id="语法-2"><a class="markdownIt-Anchor" href="#语法-2">#</a> 语法</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建</span><br><span class="line">CREATE PROCEDURE 存储过程名称([参数列表])</span><br><span class="line">BEGIN</span><br><span class="line">	--SQL语句</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL 名称([参数]);</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">#查询指定数据库的存储过程及状态信息</span><br><span class="line">SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_SCHEMA = &#x27;database_name&#x27;;</span><br><span class="line">#查询某个存储过程的定义</span><br><span class="line">SHOW CREATE PROCEDURE 存储过程名称;</span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">DROP PROCEDURE [IF EXISTS] 存储过程名称;</span><br></pre></td></tr></table></figure>
<p>在命令行中创建存储过程时，因为识别分号即语句结束，而 SQL 语句中也包含分号。</p>
<p>因此可能会导致代码产生错误，即不能读取到 END; 部分便结束了。</p>
<p>需要重新指定语句结束的符号，使用 delimiter 重新定义结束符号。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delimiter $$	#重新指定结束符为$$</span><br><span class="line">create procedure p_name()</span><br><span class="line">begin</span><br><span class="line">	select * from example_table;</span><br><span class="line">end$$	#$$标志着语句结束</span><br><span class="line">#注意，重新指定结束符后，不仅仅对存储过程创建有效，例如：</span><br><span class="line">call p_name()$$</span><br></pre></td></tr></table></figure>
<h2 id="变量"><a class="markdownIt-Anchor" href="#变量">#</a> 变量</h2>
<ul>
<li><strong>系统变量：</strong></li>
</ul>
<p>系统变量是 MySQL 服务器提供，不是用户定义的，属于服务器层面。</p>
<p>分为全局变量 (GLOBAL)、会话变量 (SESSION)。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看系统变量</span><br><span class="line">#默认为SESSION</span><br><span class="line">SHOW [SESSION | GLOBAL] VARIABLES;#显示所有系统变量</span><br><span class="line">SHOW [SESSION | GLOBAL] VARIABLES LIKE &#x27;...&#x27;;#通过like模糊匹配查找变量</span><br><span class="line">SELECT @@[SESSION | GLOBAL] 系统变量名;#查看指定变量的值</span><br><span class="line"></span><br><span class="line">#设置系统变量</span><br><span class="line">SET [SESSION | GLOBAL] 系统变量名=值;</span><br><span class="line">SET @@[SESSION | GLOBAL]系统变量名=值；</span><br></pre></td></tr></table></figure>
<p>注意：mysql 服务重新启动之后，所设置的全局参数会失效，如果不想失效，需要在 /etc/my.cnf 中配置。</p>
<ul>
<li><strong>用户自定义变量：</strong></li>
</ul>
<p>用户自定义变量是用户根据需要自己定义的变量，用户变量不用提前声明。</p>
<p>在使用的时候可以直接用 &quot;@变量名&quot; 使用就可以。<strong>其作用域为当前会话。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#赋值</span><br><span class="line">SET @var_name = expr [, @var_name2 = expr]...;</span><br><span class="line">SET @var_name := expr [, @var_name2 := expr]...;</span><br><span class="line">SELECT @var_name := expr [, @var_name2 := expr]...;</span><br><span class="line">SELECT 字段名 INTO @var_name FROM 表名;</span><br><span class="line"></span><br><span class="line">#使用</span><br><span class="line">SELECT @var_name;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>局部变量：</strong></li>
</ul>
<p>局部变量是根据需要定义的在局部生效的变量，访问之前，需要 DECLARE 声明。可用作存储过程中的局部变量和输入参数，局部变量的范围是在其内声明的 BEGIN…END 块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#声明</span><br><span class="line">DECLARE 变量名 变量类型[DEFAULT ...];</span><br><span class="line"></span><br><span class="line">#赋值</span><br><span class="line">SET 变量名=值;</span><br><span class="line">SET 变量名:=值;</span><br><span class="line">SELECT 字段名 INTO 变量名 FROM 表名 ...;</span><br></pre></td></tr></table></figure>
<h2 id="if语句"><a class="markdownIt-Anchor" href="#if语句">#</a> if 语句</h2>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IF 条件1 THEN</span><br><span class="line">	...</span><br><span class="line">ELSEIF 条件2 THEN</span><br><span class="line">	...</span><br><span class="line">ELSE</span><br><span class="line">	...</span><br><span class="line">END IF;</span><br><span class="line">#if语句，编程基础，没啥好说的</span><br></pre></td></tr></table></figure>
<h2 id="参数"><a class="markdownIt-Anchor" href="#参数">#</a> 参数</h2>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">IN</td>
<td style="text-align:center">该类参数作为输入，也就是需要调用时传入值 (默认为该类型)</td>
</tr>
<tr>
<td style="text-align:center">OUT</td>
<td style="text-align:center">该类型作为输出，也就是该参数可以作为返回值</td>
</tr>
<tr>
<td style="text-align:center">INOUT</td>
<td style="text-align:center">既可以作为输入参数，也可以作为输出参数</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure p_name(in score int, out result varchar(10))</span><br><span class="line">begin</span><br><span class="line">	if score &gt;= 85 then</span><br><span class="line">		set result := &#x27;You_Xiu&#x27;;</span><br><span class="line">	elseif score &gt;= 60 then</span><br><span class="line">		set result := &#x27;Ji_Ge&#x27;;</span><br><span class="line">	else</span><br><span class="line">		set result := &#x27;Bu_Ji_Ge&#x27;;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h2 id="case语句"><a class="markdownIt-Anchor" href="#case语句">#</a> case 语句</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#方式一：</span><br><span class="line">CASE case_value</span><br><span class="line">	WHEN when_value1 THEN statement_list1</span><br><span class="line">	[WHEN when_value2 THEN statement_list2]...</span><br><span class="line">	[ELSE statement_list]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line">#方式二：</span><br><span class="line">CASE</span><br><span class="line">	WHEN search_condition1 THEN statement_list1</span><br><span class="line">	[WHEN search_condition2 THEN statement_list2]...</span><br><span class="line">	[ELSE statement_list]</span><br><span class="line">END CASE;</span><br><span class="line">#switch语句，编程基础，没啥好说的</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create procedure p_name(in month int, out result varchar(20))</span><br><span class="line">begin</span><br><span class="line">	case</span><br><span class="line">		when month &gt;= 1 and month &lt;= 3 then</span><br><span class="line">			set result := &#x27;First_Quarter&#x27;;</span><br><span class="line">		when month &gt;= 4 and month &lt;= 6 then</span><br><span class="line">			set result := &#x27;Second_Quarter&#x27;;</span><br><span class="line">		when month &gt;= 7 and month &lt;= 9 then</span><br><span class="line">			set result := &#x27;Third_Quarter&#x27;;</span><br><span class="line">		when month &gt;= 10 and month &lt;= 12 then</span><br><span class="line">			set result := &#x27;Fourth_Quarter&#x27;;</span><br><span class="line">		else</span><br><span class="line">			set result := &#x27;illegal_Parameter&#x27;;</span><br><span class="line">	end case;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h2 id="循环whilerepeatloop"><a class="markdownIt-Anchor" href="#循环whilerepeatloop">#</a> 循环 (while/repeat/loop)</h2>
<p><strong>while：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WHILE condition DO</span><br><span class="line">	SQL...</span><br><span class="line">END WHILE;</span><br><span class="line">#while语句，示例：</span><br><span class="line">#统计0-n的和：</span><br><span class="line">create procedure p_example(in n int, out result int)</span><br><span class="line">begin</span><br><span class="line">	set result := 0;</span><br><span class="line">	while n &gt;= 0 do</span><br><span class="line">		set result := result + n;</span><br><span class="line">		set n := n - 1;</span><br><span class="line">	end while;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<p><strong>repeat：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">	SQL...</span><br><span class="line">	UNTIL 条件</span><br><span class="line">END REPEAT;</span><br><span class="line">#首先执行一次(类似do..while)，当满足条件时退出循环，这点不同于do...while</span><br><span class="line">#示例，统计0-n的值：</span><br><span class="line">create procedure p_example(in n int)</span><br><span class="line">begin</span><br><span class="line">	declare result int default 0;</span><br><span class="line">	</span><br><span class="line">	repeat</span><br><span class="line">		set result := result + n;</span><br><span class="line">		set n := n - 1;</span><br><span class="line">	until n &lt;= 0#注意该条件后无分号！</span><br><span class="line">	end repeat;</span><br><span class="line">	</span><br><span class="line">	select result;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<p><strong>loop：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#loop是一个仅由LEAVE(break)和ITERATE(continue)关键字控制的死循环</span><br><span class="line">[begin_label:] LOOP</span><br><span class="line">	SQL...</span><br><span class="line">END LOOP [end_label];</span><br><span class="line">LEAVE label; #退出指定标记的循环体</span><br><span class="line">ITERATE label; #直接进入下一次循环</span><br><span class="line"></span><br><span class="line">#示例，统计0到n的和：</span><br><span class="line">create procedure p_example(in n int, out result int)</span><br><span class="line">begin</span><br><span class="line">	set result := 0;</span><br><span class="line">	sum:loop</span><br><span class="line">		if n &lt;= 0 then</span><br><span class="line">			leave sum;</span><br><span class="line">		end if;</span><br><span class="line">		</span><br><span class="line">		set result := result + n;</span><br><span class="line">		set n := n - 1;</span><br><span class="line">	end loop sum;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h2 id="游标"><a class="markdownIt-Anchor" href="#游标">#</a> 游标</h2>
<p>游标 (CURSOR) 是用来存储查询结果集的数据类型，在存储过程和函数中可以使用游标对结果集进行循环和处理。游标的使用包括游标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#声明游标</span><br><span class="line">DECLARE CURSOR_NAME CURSOR FOR 查询语句;</span><br><span class="line"></span><br><span class="line">#打开游标</span><br><span class="line">OPEN CURSOR_NAME;</span><br><span class="line"></span><br><span class="line">#获取游标记录</span><br><span class="line">FETCH CURSOR_NAME INTO 变量 [, 变量];</span><br><span class="line"></span><br><span class="line">#关闭游标</span><br><span class="line">CLOSE CURSOR_NAME;</span><br></pre></td></tr></table></figure>
<p>使用案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#根据传入的参数uage，查询用户表tb_user中，所有年龄小于uage的用户姓名和专业</span><br><span class="line">#并将查询到的数据插入到一张新表(id,name,profession)中</span><br><span class="line">create procedure p_test(in uage int)</span><br><span class="line">begin</span><br><span class="line">	declare uname varchar(100);</span><br><span class="line">	declare upro varchar(100);</span><br><span class="line">	declare u_cursor cursor for select name, profession from tb_user where age &lt;= uage;#注意：游标的声明需要在普通变量之后</span><br><span class="line">	declare exit handler for SQLSTATE &#x27;02000&#x27; close u_cursor;</span><br><span class="line">	#这条语句看下面条件处理程序的解释</span><br><span class="line">	</span><br><span class="line">	create table if not exists tb_user_pro(</span><br><span class="line">    	id int primary key auto_increment,</span><br><span class="line">        name varchar(100),</span><br><span class="line">        profession varchar(100)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    open u_cursor;</span><br><span class="line">    while true do</span><br><span class="line">    	fetch u_cursor into uname,upro;</span><br><span class="line">    	insert into tb_user_pro values (null, uname, upro);</span><br><span class="line">    end while;</span><br><span class="line">    close u_cursor;</span><br><span class="line">    </span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h2 id="条件处理程序"><a class="markdownIt-Anchor" href="#条件处理程序">#</a> 条件处理程序</h2>
<p>条件处理程序 (Handler) 可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤，语法为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECLARE handler_action HANDLER FOR condition_value [, condition_value]... statement;</span><br><span class="line"></span><br><span class="line">handler_action</span><br><span class="line">	continue:#继续执行当前程序</span><br><span class="line">	exit:#终止执行当前程序</span><br><span class="line">condition_value</span><br><span class="line">	SQLSTATE sqlstate_value:#状态码，如02000</span><br><span class="line">	SQLWARNING:#所有以01开头的SQLSTATE代码的简写</span><br><span class="line">	NOT FOUND:#所有以02开头的SQLSTATE代码的简写</span><br><span class="line">	SQLEXCEPTION:#所有没有被SQLWARNING或者NOT FOUND捕获的SQLSTATE代码的简写</span><br></pre></td></tr></table></figure>
<p>示例：当游标为空时，退出循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">declare exit handler for SQLSTATE &#x27;02000&#x27; close u_cursor;</span><br><span class="line">#声明一个条件处理程序，当满足状态码为02000时触发退出操作，并关闭游标</span><br><span class="line">#02000处也可以写为NOT FOUND，对于状态码的细节，可以查询mysql官方文档</span><br></pre></td></tr></table></figure>
<h2 id="存储函数"><a class="markdownIt-Anchor" href="#存储函数">#</a> 存储函数</h2>
<p>存储函数是有返回值的存储过程，存储函数的参数只能是 IN 类型。语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION 存储函数名称([参数列表])</span><br><span class="line">RETURNS type [characteristic...]</span><br><span class="line">BEGIN</span><br><span class="line">	--SQL</span><br><span class="line">	RETURN ...;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">#characteristic说明：</span><br><span class="line">#DETERMINISTIC：相同的输入参数总是产生相同的结果</span><br><span class="line">#NO SQL：不包含SQL语句</span><br><span class="line">#READS SQL DATA：包含读取数据的语句，但不包含写入数据的语句</span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#累加1-n</span><br><span class="line">create function fun_example(n int)</span><br><span class="line">returns int deterministic</span><br><span class="line">begin</span><br><span class="line">    declare result int default 0;</span><br><span class="line"></span><br><span class="line">    while n &gt; 0 do</span><br><span class="line">        set result := result + n;</span><br><span class="line">        set n := n - 1;</span><br><span class="line">    end while;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h1 id="触发器"><a class="markdownIt-Anchor" href="#触发器">#</a> <mark>触发器</mark></h1>
<p>触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的 SQL 语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p>
<p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。</p>
<p>现在触发器还只支持行级触发，不支持语句级触发。</p>
<table>
<thead>
<tr>
<th style="text-align:center">触发器类型</th>
<th style="text-align:center">NEW 和 OLD</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">INSERT 型触发器</td>
<td style="text-align:center">NEW 表示将要或者已经新增的数据</td>
</tr>
<tr>
<td style="text-align:center">UPDATE 型触发器</td>
<td style="text-align:center">OLD 表示修改之前的数据，NEW 表示将要或已经修改后的数据</td>
</tr>
<tr>
<td style="text-align:center">DELETE 型触发器</td>
<td style="text-align:center">OLD 表示将要或者已经删除的数据</td>
</tr>
</tbody>
</table>
<p><strong>语法：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建</span><br><span class="line">CREATE TRIGGER trigger_name</span><br><span class="line">BEFORE/AFTER INSERT/UPDATE/DELETE</span><br><span class="line">ON tbl_name FOR EACH ROW #行级触发器</span><br><span class="line">BEGIN</span><br><span class="line">	trigger_stmt;</span><br><span class="line">END;</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">SHOW TRIGGERS;</span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">DROP TRIGGER [schema_name.] trigger_name;</span><br><span class="line">#如果没有指定schema_name，则默认为当前数据库</span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看触发器</span><br><span class="line">show triggers ;</span><br><span class="line">#插入数据</span><br><span class="line">create trigger tb_user_insert_trigger#创建插入触发器</span><br><span class="line">    after insert on tb_user for each row#触发器级别为行级</span><br><span class="line">begin</span><br><span class="line">	#向user_log表插入数据</span><br><span class="line">    insert into user_log(id, operation, operate_time, operate_id, operate_params) values</span><br><span class="line">    (null, &#x27;insert&#x27;, now(), new.id, concat(&#x27;insert data:id=&#x27;,new.id,&#x27;,name=&#x27;,new.name,&#x27;,phone&#x27;,new.phone,&#x27;,email=&#x27;,new.email,&#x27;,profession=&#x27;,new.profession));</span><br><span class="line">    #使用concat拼接字符串作为operate_params插入</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">#以下内容与插入触发器类似</span><br><span class="line">#修改数据</span><br><span class="line">create trigger tb_user_update_trigger</span><br><span class="line">    after update on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_log(id, operation, operate_time, operate_id, operate_params)</span><br><span class="line">    values (null, &#x27;update&#x27;, now(), new.id,</span><br><span class="line">            concat(&#x27;before update data:id=&#x27;,old.id,&#x27;,name=&#x27;,old.name,&#x27;,phone&#x27;,old.phone,&#x27;,email=&#x27;,old.email,&#x27;,profession=&#x27;,old.profession,</span><br><span class="line">                   &#x27;after update data:id=&#x27;,new.id,&#x27;,name=&#x27;,new.name,&#x27;,phone&#x27;,new.phone,&#x27;,email=&#x27;,new.email,&#x27;,profession=&#x27;,new.profession));</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">#删除数据</span><br><span class="line">create trigger tb_user_delete_trigger</span><br><span class="line">    after delete on tb_user for each row</span><br><span class="line">begin</span><br><span class="line">    insert into user_log(id, operation, operate_time, operate_id, operate_params)</span><br><span class="line">    values (null, &#x27;delete&#x27;, now(), old.id,</span><br><span class="line">            concat(&#x27;delete data:id=&#x27;,old.id,&#x27;,name=&#x27;,old.name,&#x27;,phone&#x27;,old.phone,&#x27;,email=&#x27;,old.email,&#x27;,profession=&#x27;,old.profession));</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<h1 id="锁"><a class="markdownIt-Anchor" href="#锁">#</a> 锁</h1>
<ul>
<li>介绍</li>
</ul>
<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p>
<p>在数据库中，除传统的计算资源 (CPU、RAM、I/O) 的争用以外，数据也是一种供许多用户共享的资源。</p>
<p>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</p>
<p>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<ul>
<li>分类</li>
</ul>
<p>MySQL 中的锁，按照锁的粒度划分，可以分为以下三类：</p>
<ol>
<li>全局锁：锁定数据库中的所有表</li>
<li>表级锁：每次操作锁住整张表</li>
<li>行级锁：每次操作锁住对应的行数据</li>
</ol>
<h2 id="全局锁"><a class="markdownIt-Anchor" href="#全局锁">#</a> 全局锁</h2>
<p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的 DML 的写语句，DDL 语句，已经更新操作的事务提交语句都将被阻塞。</p>
<p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加全局锁</span><br><span class="line">flush tables with read lock;</span><br><span class="line"></span><br><span class="line">#数据备份指令</span><br><span class="line">mysqldump -uroot -p密码 数据库&gt;存储文件.sql</span><br><span class="line"></span><br><span class="line">#解除全局锁</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure>
<p>特点：</p>
<p>数据库中加全局锁，是一个比较重要的操作，存在以下问题：</p>
<ol>
<li>如果在主库上备份，那么备份期间都不能执行更新，业务基本上就要停摆</li>
<li>如果在从库上备份，那么备份期间从库就不能执行主库同步过来的二进制日志 (binlog)，会导致主从延迟</li>
</ol>
<p>在 InnoDB 引擎中，我们可以在备份时加上参数–single-transaction 参数来完成不加锁的一致性数据备份。</p>
<h2 id="表级锁"><a class="markdownIt-Anchor" href="#表级锁">#</a> 表级锁</h2>
<p>表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。</p>
<p>应用在 MyISAM、InnoDB、BDB 等存储引擎中。</p>
<p>对于表级锁，主要分为以下三类：</p>
<ol>
<li>表锁</li>
<li>元数据锁 (meta data lock  MDL)</li>
<li>意向锁</li>
</ol>
<p><strong>对于表锁，分为以下两类：</strong></p>
<ol>
<li>表共享读锁 (read lock)，读锁只阻塞其他客户端的写入操作，不阻塞读取操作</li>
<li>表独占写锁 (write lock)，阻塞其他客户端的读写操作</li>
</ol>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#加锁</span><br><span class="line">lock tables 表名 ... read/write;</span><br><span class="line"></span><br><span class="line">#释放锁</span><br><span class="line">unlock tables; #或者客户端断开连接</span><br></pre></td></tr></table></figure>
<p><strong>元数据锁 (meta data lock)：</strong></p>
<p>MDL 加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动添加。</p>
<p>MDL 锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。</p>
<p>为了避免 DML 与 DDL 冲突，保证读写的正确性。</p>
<p>在 MySQL5.5 中引入了 MDL，当对一张表进行增删改查的时候，添加 MDL 读锁 (共享)。</p>
<p>当对表结构进行变更操作时，添加 MDL 写锁 (排他)</p>
<table>
<thead>
<tr>
<th style="text-align:center">对应 SQL</th>
<th style="text-align:center">锁类型</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">lock tables xxx read/write</td>
<td style="text-align:center">SHARED_READ_ONLY / SHARED_NO_READ_WRITE</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">select、select … lock in share mode</td>
<td style="text-align:center">SHARED_READ</td>
<td style="text-align:center">与 SHARED_READ、SHARED_WRITE 兼容，与 EXCLUSIVE 互斥</td>
</tr>
<tr>
<td style="text-align:center">insert、update、delete、select … for update</td>
<td style="text-align:center">SHARED_WRITE</td>
<td style="text-align:center">与 SHARED_READ、SHARED_WRITE 兼容，与 EXCLUSIVE 互斥</td>
</tr>
<tr>
<td style="text-align:center">alter table …</td>
<td style="text-align:center">EXCLUSIVE</td>
<td style="text-align:center">与其他 MDL 都互斥</td>
</tr>
</tbody>
</table>
<p><strong>意向锁：</strong></p>
<p>为了避免 DML 在执行时，加的行锁与表锁冲突，在 InnoDB 中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。</p>
<ol>
<li>意向共享锁 (IS)：由语句 select … lock in share mode 添加，与表锁共享锁 (read) 兼容，与表锁排它锁 (write) 互斥。</li>
<li>意向排他锁 (IX)：由 insert、update、delete、select … for update 添加，与表锁共享、排它锁都互斥。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#通过以下语句，查看意向锁及行锁的加锁情况：</span><br><span class="line">select obeject_schema,object_name,index_name,lock_type,lock_mode,lock_data </span><br><span class="line">from performance_schema.data_locks;</span><br></pre></td></tr></table></figure>
<h2 id="行级锁"><a class="markdownIt-Anchor" href="#行级锁">#</a> 行级锁</h2>
<p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生冲突的概率最低，并发度最高。应用在 InnoDB 存储引擎中。</p>
<p>InnoDB 的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加锁。</p>
<p><strong>对于行级锁，主要分为以下三类：</strong></p>
<ol>
<li>行锁 (Recored Lock)：锁定单个行记录的锁，防止其他事务对此行进行 update 和 delete。在 RC、RR 隔离级别下都支持。</li>
<li>间隙锁 (Gap Lock)：锁定索引记录间隙 (不包含该记录)，确保索引记录间隙不变，防止其他事务在这个间隙进行 insert，产生幻读。在 RR 隔离级别下都支持。</li>
<li>临键锁 (Next-Key Lock)：行锁和间隙锁的组合，同时锁住数据和间隙。在 RR 隔离级别下支持。</li>
</ol>
<p><strong>行锁</strong></p>
<p>InnoDB 实现了以下两种类型的行锁：</p>
<ol>
<li>共享锁 (S)：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁</li>
<li>排它锁 (X)：允许获取排它锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排它锁</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">SQL</th>
<th style="text-align:center">行锁类型</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">INSERT</td>
<td style="text-align:center">排它锁</td>
<td style="text-align:center">自动加锁</td>
</tr>
<tr>
<td style="text-align:center">UPDATE</td>
<td style="text-align:center">排它锁</td>
<td style="text-align:center">自动加锁</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">排它锁</td>
<td style="text-align:center">自动加锁</td>
</tr>
<tr>
<td style="text-align:center">SELECT (正常)</td>
<td style="text-align:center">不加锁</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">SELECT … LOCK IN SHARE MODE</td>
<td style="text-align:center">共享锁</td>
<td style="text-align:center">需要手动在 SELECT 之后加 LOCK IN SHARE MODE</td>
</tr>
<tr>
<td style="text-align:center">SELECT … FOR UPDATE</td>
<td style="text-align:center">排它锁</td>
<td style="text-align:center">需要手动在 SELECT 之后加 FOR UPDATE</td>
</tr>
</tbody>
</table>
<p>默认情况下，InnoDB 在 REPEATABLE READ 事务隔离级别运行，InnoDB 使用临键锁进行搜索和索引扫描，以防止幻读。</p>
<ol>
<li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁</li>
<li>InnoDB 的行锁是针对于索引加的锁，不通过索引条件检索数据，那么 InnoDB 将对表中的所有记录加锁，此时就会升级为表锁</li>
</ol>
<p><strong>间隙锁 / 临键锁</strong></p>
<p>默认情况下，InnoDB 在 REPEATABLE READ 事务隔离级别运行，InnoDB 使用临键锁进行搜索和索引扫描，以防止幻读。</p>
<ol>
<li>索引上的等值查询 (唯一索引)，给不存在的记录加锁时，优化为间隙锁</li>
<li>索引上的等值查询 (普通索引)，向右遍历时最后一个值不满足查询需求时，临键锁退化为间隙锁</li>
<li>索引上的范围查询 (唯一索引)–会访问到不满足条件的第一个值为止</li>
</ol>
<p>注意：间隙锁唯一目的是防止其他事务插入间隙。间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</p>
<h1 id="innodb引擎"><a class="markdownIt-Anchor" href="#innodb引擎">#</a> <mark>InnoDB 引擎</mark></h1>
<h2 id="逻辑存储结构"><a class="markdownIt-Anchor" href="#逻辑存储结构">#</a> 逻辑存储结构</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151521186.png" alt="image-20230515152114999"></p>
<ul>
<li>表空间 (ibd 文件)：一个 mysql 实例可以对应多个表空间，用于存储记录、索引等数据。</li>
</ul>
<p>Linux 系统下，mysql 的文件存放在 /var/lib/mysql 中</p>
<ul>
<li>
<p>段：分为数据段 (Leaf node segment)、索引段 (Non-leaf node segment)、回滚段 (Rollback segment)，InnoDB 是索引组织表，数据段就是 B + 树的叶子节点，索引段即为 B + 树的非叶子节点。段用来管理多个 Extent (区)。</p>
</li>
<li>
<p>区：表空间的单元结构，每个区的大小为 1M。默认情况下，InnoDB 存储引擎页大小为 16K，即一个区中一共有 64 个连续的页。</p>
</li>
<li>
<p>页：是 InnoDB 存储引擎磁盘管理的最小单元，每个页的默认大小为 16KB。为了保证页的连续性，InnoDB 存储引擎每次从磁盘申请 4-5 个区。</p>
</li>
<li>
<p>行：InnoDB 存储引擎数据是按行进行存放的</p>
</li>
</ul>
<h2 id="架构"><a class="markdownIt-Anchor" href="#架构">#</a> 架构</h2>
<p>MySQL5.5 版本开始，默认使用 InnoDB 存储引擎，它擅长事务处理，具有崩溃恢复特性，在日常开发中使用非常广泛。下面是 InnoDB 架构图，左侧为内存结构，右侧为磁盘结构。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151607051.png" alt="image-20230515152917476"></p>
<h3 id="内存结构"><a class="markdownIt-Anchor" href="#内存结构">#</a> 内存结构：</h3>
<p>缓冲池：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151635469.png" alt="image-20230515162031407"></p>
<p>更改缓冲区 (MySQL5.+ 时为插入缓冲区)</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151643491.png" alt="image-20230515164344372"></p>
<p>自适应哈希索引：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151646205.png" alt="image-20230515164615665"></p>
<p>日志缓冲区：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151650171.png" alt="image-20230515165058078"></p>
<h3 id="磁盘结构"><a class="markdownIt-Anchor" href="#磁盘结构">#</a> 磁盘结构：</h3>
<p>系统表空间，独立表空间：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151658088.png" alt="image-20230515165558615"></p>
<p>通用表空间，撤销表空间，临时表空间：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151700819.png" alt="image-20230515165917557"></p>
<p>双写缓冲区，重做日志：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151700555.png" alt="image-20230515170010703"></p>
<h3 id="后台线程"><a class="markdownIt-Anchor" href="#后台线程">#</a> 后台线程</h3>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151704570.png" alt="image-20230515170400461"></p>
<h2 id="事务原理"><a class="markdownIt-Anchor" href="#事务原理">#</a> 事务原理</h2>
<p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<p><mark><strong>事务四大特性：</strong></mark></p>
<p>原子性 (Atomicity)：<strong>事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</strong></p>
<p>一致性 (Consistency)：<strong>事务完成时，必须使所有的数据都保持一直状态。</strong></p>
<p>隔离性 (Isolation)：<strong>数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</strong></p>
<p>持久性 (Durability)：<strong>事务一旦提交或回滚，它对数据库中的数据的改变是永久的。</strong></p>
<p>被缩写为：ACID</p>
<h3 id="redo-log"><a class="markdownIt-Anchor" href="#redo-log">#</a> redo log</h3>
<p>重做日志，记录的是事务提交时数据页的物理修改，用来实现事务的持久性。</p>
<p>该日志文件由两部分组成：重做日志缓冲 (redo log buffer) 以及重做日志文件 (redo log file)，前者是在内存中，后者在磁盘中。当事务提交之后，会把所有修改信息都存储到该日志文件中，用于在刷新脏页到磁盘，发生错误时，进行数据恢复使用。</p>
<h3 id="undo-log"><a class="markdownIt-Anchor" href="#undo-log">#</a> undo log</h3>
<p>回滚日志，用于记录数据被修改钱的信息，作用包含两个：提供回滚和 MVCC (多版本并发控制)。</p>
<p>undo log 和 redo log 记录物理日志不一样，它是逻辑日志。</p>
<p>可以认为当 delete 一条记录时，undo log 中会记录一条对应的 insert 记录，反之亦然，当 update 一条记录时，它记录一条对应相反的 update 记录。当执行 rollback 时，就可以从 undo log 中的逻辑记录读取到相应的内容并进行回滚。</p>
<p>Undo log 销毁：undo log 在事务执行时产生，事务提交时，并不会立即删除，因为这些日志还可能用于 MVCC。</p>
<p>Undo log 存储：undo log 采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含 1024 个 undo log segment。</p>
<h2 id="mvccmulti-version-concurrency-control"><a class="markdownIt-Anchor" href="#mvccmulti-version-concurrency-control">#</a> MVCC(Multi-Version Concurrency Control)</h2>
<h3 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念">#</a> 基本概念</h3>
<p><strong>当前读：</strong></p>
<p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</p>
<p>对于日常的操作，如：</p>
<p>select … lock in share mode (共享锁)，select … for update、update、insert、delete (排它锁)</p>
<p>都是一种当前读。</p>
<p><strong>快照读：</strong></p>
<p>简单的 select (不加锁) 就是快照读，读取的时记录数据的可见版本。有可能是历史数据，不加锁，是非阻塞读</p>
<ul>
<li>Read Committed：每次 select，都生成一个快照读</li>
<li>Repeatable Read：开启事务后第一个 select 语句才是快照读的地方</li>
<li>Serializable：快照读会退化为当前读</li>
</ul>
<p><strong>MVCC</strong></p>
<p>全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为 MySQL 实现 MVCC 提供了一个非阻塞读功能。</p>
<p>MVCC 的具体实现，还需要依赖于数据库记录中的<strong>三个隐式字段、undo log 日志、readView</strong></p>
<h3 id="mvcc-隐藏字段"><a class="markdownIt-Anchor" href="#mvcc-隐藏字段">#</a> MVCC - 隐藏字段</h3>
<p>在 InnoDB 引擎中，创建一张表时，除了显示出来的字段外，还会自动创建两个 (三个) 隐藏字段：</p>
<table>
<thead>
<tr>
<th style="text-align:center">隐藏字段</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DB_TRX_ID</td>
<td style="text-align:center">最近修改事务 ID，记录插入这条记录或最后一次修改该记录的事务 ID</td>
</tr>
<tr>
<td style="text-align:center">DB_ROLL_PTR</td>
<td style="text-align:center">回滚指针，指向这条记录的上一个版本，用于配合 undo log，指向上一个版本</td>
</tr>
<tr>
<td style="text-align:center">DB_ROW_ID</td>
<td style="text-align:center">隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段</td>
</tr>
</tbody>
</table>
<h3 id="undo-log-2"><a class="markdownIt-Anchor" href="#undo-log-2">#</a> undo log</h3>
<p>回滚日志，在 insert、update、delete 的时候产生的便于数据回滚的日志。</p>
<p>当 insert 的时候，产生的 undo log 只在回滚时需要，在事务提交后，可被立即删除。</p>
<p>而 update、delete 的时候，产生的 undo log 不仅在回滚时需要，在快照读时也需要，不会被立即删除。</p>
<p><strong>undo log 版本链</strong></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151820199.png" alt="image-20230515182051063"></p>
<h3 id="readview"><a class="markdownIt-Anchor" href="#readview">#</a> readView</h3>
<p>ReadView (读视图) 是快照读 SQL 执行时 MVCC 提取数据的依据，记录并维护系统当前活跃的事务 id。</p>
<p>ReadView 中包含了四个核心字段：</p>
<table>
<thead>
<tr>
<th style="text-align:center">字段</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">m_ids</td>
<td style="text-align:center">当前活跃的事务 ID 集合</td>
</tr>
<tr>
<td style="text-align:center">min_trx_id</td>
<td style="text-align:center">最小活跃事务 ID</td>
</tr>
<tr>
<td style="text-align:center">max_trx_id</td>
<td style="text-align:center">预分配事务 ID，当前最大事务 ID+1 (因为事务 ID 是自增的)</td>
</tr>
<tr>
<td style="text-align:center">creator_trx_id</td>
<td style="text-align:center">ReadView 创建者的事务 ID</td>
</tr>
</tbody>
</table>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305151826538.png" alt="image-20230515182618412"></p>
<h1 id="mysql管理"><a class="markdownIt-Anchor" href="#mysql管理">#</a> MySQL 管理</h1>
<h2 id="系统数据库"><a class="markdownIt-Anchor" href="#系统数据库">#</a> 系统数据库</h2>
<p>MySQL 数据库安装完成后，自带了以下四个数据库，具体作用如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据库</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">mysql</td>
<td style="text-align:center">存储 MySQL 服务器正常运行所需要的各种信息 (时区、主从、用户、权限等)</td>
</tr>
<tr>
<td style="text-align:center">information_schema</td>
<td style="text-align:center">提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</td>
</tr>
<tr>
<td style="text-align:center">performance_schema</td>
<td style="text-align:center">为 MySQL 服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数</td>
</tr>
<tr>
<td style="text-align:center">sys</td>
<td style="text-align:center">包含一系列方便 DBA 和开发人员利用的 performance_schema 性能数据库进行性能调优和诊断的视图</td>
</tr>
</tbody>
</table>
<h2 id="常用工具"><a class="markdownIt-Anchor" href="#常用工具">#</a> 常用工具</h2>
<h3 id="mysql"><a class="markdownIt-Anchor" href="#mysql">#</a> mysql</h3>
<p>该 mysql 不是指 mysql 服务，而是指 mysql 的客户端工具</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql [option] [database]</span><br><span class="line">#option:</span><br><span class="line">-u,--user=name #指定用户名</span><br><span class="line">-p,--password[=name] #指定密码</span><br><span class="line">-h,--host=name #指定服务器ip或域名</span><br><span class="line">-P,--port=port #指定连接端口，这里的P是大写的</span><br><span class="line">-e,--execute=name #执行SQL语句并退出</span><br><span class="line"></span><br><span class="line">#-e选项可以在MySQL客户端执行SQL语句，而不用连接到MySQL数据库再执行。</span><br><span class="line">#对于一些批处理脚本，这种方式尤其方便。</span><br><span class="line">#示例：</span><br><span class="line">mysql -uroot -p123456 db01 -e &quot;select * from stu&quot;;</span><br></pre></td></tr></table></figure>
<h3 id="mysqladmin"><a class="markdownIt-Anchor" href="#mysqladmin">#</a> mysqladmin</h3>
<p>mysqladmin 是一个执行管理操作的客户端程序。</p>
<p>可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#通过帮助文档查看选项：</span><br><span class="line">mysqladmin --help</span><br><span class="line"></span><br><span class="line">#示例：</span><br><span class="line">mysqladmin -uroot -p123456 drop &#x27;test01&#x27;</span><br><span class="line">mysqladmin -uroot -p123456 version</span><br></pre></td></tr></table></figure>
<h3 id="mysqlbinlog"><a class="markdownIt-Anchor" href="#mysqlbinlog">#</a> mysqlbinlog</h3>
<p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到 mysqlbinlog 日志管理工具。</p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlbinlog [option] log-files1 log-files2 ...</span><br><span class="line"></span><br><span class="line">#option：</span><br><span class="line">-d,--database=name #指定数据库名称，只列出指定的数据库相关操作</span><br><span class="line">-o,--offset=# #忽略掉日志中前n行命令</span><br><span class="line">-r,--result-file=name #将输出的文本格式日志输出到指定文件</span><br><span class="line">-s,--short-form #显示简单格式，省略掉一些信息</span><br><span class="line">--start-datatime=date1 --stop-datatime=date2 #指定日期间隔内的所有日志</span><br><span class="line">--start-position=pos1 --stop-position=pos2 #指定位置间隔内的所有日志</span><br></pre></td></tr></table></figure>
<h3 id="mysqlshow"><a class="markdownIt-Anchor" href="#mysqlshow">#</a> mysqlshow</h3>
<p>mysqlshow 客户端对象查找工具，用来很快的查找存在哪些数据库、数据库中的表、表中的列或者索引。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#语法：</span><br><span class="line">mysqlshow [option] [db_name[table_name[col_name]]]</span><br><span class="line"></span><br><span class="line">#选项：</span><br><span class="line">--count #显示数据库及表的统计信息(数据库，表 均可以不指定)</span><br><span class="line">-i #显示指定数据库或者指定表的状态信息</span><br><span class="line"></span><br><span class="line">#示例：</span><br><span class="line">#查询每个数据库的表的数量及表中记录的数量</span><br><span class="line">mysqlshow -uroot -p123456 --count</span><br><span class="line"></span><br><span class="line">#查询test库中每个表中的字段数及行数</span><br><span class="line">mysqlshow -uroot -p123456 test --count</span><br><span class="line"></span><br><span class="line">#查询test库中book表的详细情况</span><br><span class="line">mysqlshow -uroot -p123456 test book --count</span><br></pre></td></tr></table></figure>
<h3 id="mysqldump"><a class="markdownIt-Anchor" href="#mysqldump">#</a> mysqldump</h3>
<p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。</p>
<p>备份内容包含建表，及插入表的 SQL 语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#语法：</span><br><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line">mysqldump [options] --database/-B db1 [db2 db3 ...]</span><br><span class="line">mysqldump [options] --all-databases/-A</span><br><span class="line"></span><br><span class="line">#连接选项：</span><br><span class="line">-u,--user=name #指定用户名</span><br><span class="line">-p,--password[=name] #指定密码</span><br><span class="line">-h,--host=name #指定服务器ip或域名</span><br><span class="line">-P,--port=# #指定连接端口</span><br><span class="line"></span><br><span class="line">#输出选项：</span><br><span class="line">--add-drop-database</span><br><span class="line">--add-drop-table #在每个表创建语句前加上drop table语句，默认开启;</span><br><span class="line">#若要不开启(--skip-add-drop--table)</span><br><span class="line"></span><br><span class="line">-n,--no-create-db #不包含数据库的创建语句</span><br><span class="line">-t,--no-create-info #不包含数据表的创建语句</span><br><span class="line">-d,--no-data #不包含数据</span><br><span class="line">-T,--tab=name #自动生成两个文件：一个.sql文件，创建表结构的语句;一个.txt文件，数据文件</span><br></pre></td></tr></table></figure>
<h3 id="mysqlimportsource"><a class="markdownIt-Anchor" href="#mysqlimportsource">#</a> mysqlimport/source</h3>
<p>mysqlimport 是客户端数据导入工具，用来导入 mysqldump 加 - T 参数后到处的文本 (txt) 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#语法：</span><br><span class="line">mysqlimport [options] db_name textfile1 [textfile2...]</span><br><span class="line">#注意，需要在文件名前使用绝对路径(mysql信任的文件路径)，否则会失败</span><br><span class="line"></span><br><span class="line">#示例：</span><br><span class="line">mysqlimport -uroot -p1234 test /var/lib/mysql-files/file_name.txt</span><br></pre></td></tr></table></figure>
<p>如果需要导入 sql 文件，可以使用 mysql 中的 source 指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /root/xxxx.sql</span><br></pre></td></tr></table></figure>
<h1 id="-分割线-进阶内容到此结束"><a class="markdownIt-Anchor" href="#-分割线-进阶内容到此结束">#</a> ------ 分割线 ------(进阶内容到此结束)</h1>
<h1 id="日志"><a class="markdownIt-Anchor" href="#日志">#</a> 日志</h1>
<h2 id="错误日志"><a class="markdownIt-Anchor" href="#错误日志">#</a> 错误日志</h2>
<p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。</p>
<p>当数据库出现任何故障导致无法正常使用时，建议首先查看此日志。</p>
<p>该日志是默认开启的，默认存放目录 /var/log/，默认的日志文件名为 mysqld.log，查看日志位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%log_error%&#x27;;</span><br></pre></td></tr></table></figure>
<h2 id="二进制日志"><a class="markdownIt-Anchor" href="#二进制日志">#</a> 二进制日志</h2>
<p>二进制日志 (BINLOG) 记录了所有的 DDL (数据定义语言) 语句和 DML (数据操纵语言) 语句，但不包含数据查询 (SELECT、SHOW) 语句。</p>
<p>作用：</p>
<ol>
<li>灾难时的数据恢复；</li>
<li>MySQL 的主从复制。</li>
</ol>
<p>在 MySQL8 版本中，默认二进制日志是开启着的，涉及到的参数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%log_bin%&#x27;;</span><br></pre></td></tr></table></figure>
<p>MySQL 服务器中提供了多种格式来记录二进制日志，具体格式及特点如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">日志格式</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">STATEMENT</td>
<td style="text-align:center">基于 SQL 语句的日志记录，记录的是 SQL 语句，对数据进行修改的 SQL 都会记录在日志文件中</td>
</tr>
<tr>
<td style="text-align:center">ROW</td>
<td style="text-align:center">基于行的日志记录，记录的是每一行的数据变更。(默认)</td>
</tr>
<tr>
<td style="text-align:center">MIXED</td>
<td style="text-align:center">混合了 STATEMENT 和 ROW 两种格式，默认采用 STATEMENT，在某些特殊情况下会自动切换为 ROW 进行记录。</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%binlog_format%&#x27;;</span><br></pre></td></tr></table></figure>
<p><strong>日志查看：</strong></p>
<p>由于日志是以二进制方式存储的，不能直接读取，需要通过二进制日志查询工具 mysqlbinlog 来查看。</p>
<p>具体语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqlbinlog [option] logfilename</span><br><span class="line"></span><br><span class="line">#option:</span><br><span class="line">-d #指定数据库名称，只列出指定的数据库相关操作</span><br><span class="line">-o #忽略掉日志中的前n行命令</span><br><span class="line">-v #将行事件(数据变更)重构为SQL语句</span><br><span class="line">-vv #将行时间(数据变更)重构为SQL语句，并输出注释信息</span><br></pre></td></tr></table></figure>
<p><strong>日志删除：</strong></p>
<p>对于比较繁忙的业务系统，每天生成的 binlog 数据巨大，如果长时间不清除，将会占用大量的磁盘空间。</p>
<p>可以通过以下几种方式清理日志：</p>
<table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">reset master</td>
<td style="text-align:center">删除全部 binlog 日志，删除之后，日志编号从 binlog.000001 重新开始</td>
</tr>
<tr>
<td style="text-align:center">purge master logs to ‘binlog.******’</td>
<td style="text-align:center">删除 ****** 编号之前的所有日志</td>
</tr>
<tr>
<td style="text-align:center">purge master logs before ‘yyyy-mm-dd hh:min:ss’</td>
<td style="text-align:center">删除日志为 &quot;yyyy-mm-dd hh:min:ss&quot; 之前产生的所有日志，其中 hh 为 24 小时制</td>
</tr>
</tbody>
</table>
<p>也可以在 mysql 的配置文件中配置二进制日志的过期时间，设置了之后，二进制日志过期会自动删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%binlog_expire_logs_seconds%&#x27;;</span><br><span class="line">#该变量的值的单位是秒，默认为30天</span><br></pre></td></tr></table></figure>
<h2 id="查询日志"><a class="markdownIt-Anchor" href="#查询日志">#</a> 查询日志</h2>
<p>查询日志记录了客户端的所有操作语句，而二进制日志不包含查询数据的 SQL 语句。</p>
<p>默认情况下，查询日志是关闭的。通过下面这个语句查询其是否关闭，及其配置文件路径：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;</span><br></pre></td></tr></table></figure>
<p>修改 MySQL 的配置文件 /etc/my.cnf 文件，添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#该选项用来开启查询日志：</span><br><span class="line">general_log=1</span><br><span class="line">#设置日志的路径和文件名，如果未指定，则默认为host_name.log</span><br><span class="line">general_log_file=/var/lib/mysql/mysql_query.log</span><br></pre></td></tr></table></figure>
<h2 id="慢查询日志-2"><a class="markdownIt-Anchor" href="#慢查询日志-2">#</a> 慢查询日志</h2>
<p>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录不小于 min_examined_row_limit 的所有的 SQL 语句的日志，默认关闭。</p>
<p>long_query_time 默认为 10 秒，最小为 0，精度可以到微妙。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#慢查询日志</span><br><span class="line">slow_query_log=1</span><br><span class="line">#执行时间参数</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure>
<p>默认情况下，不会记录管理语句，也不会记录不使用索引进行查找的查询。</p>
<p>可以使用 log_slow_admin_statements 和 log_queries_not_using_indexes 更改此行为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#记录执行较慢的管理语句</span><br><span class="line">log_slow_admin_statements=1</span><br><span class="line">#记录执行较慢的未使用索引的语句</span><br><span class="line">log_queries_not_using_indexes=1</span><br></pre></td></tr></table></figure>
<h1 id="主从复制"><a class="markdownIt-Anchor" href="#主从复制">#</a> 主从复制</h1>
<h2 id="概述-2"><a class="markdownIt-Anchor" href="#概述-2">#</a> 概述</h2>
<p>主从复制是指将主数据库的 DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行 (也叫重做)，从而使得从库和主库的数据保持同步。</p>
<p>MySQL 支持一台主库同时向多台从库进行复制，从库同时也可以作为其他从服务器的主库，实现链状复制。</p>
<p>MySQL 复制的要点主要包含以下三个方面：</p>
<ol>
<li>主库出现问题，可以快速切换到从库提供服务</li>
<li>实现读写分离，降低主库的访问压力</li>
<li>可以在从库中执行备份，以避免备份期间影响主库服务</li>
</ol>
<h2 id="原理"><a class="markdownIt-Anchor" href="#原理">#</a> 原理</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305221644937.png" alt="image-20230522164437823"></p>
<p>从上图来看，复制分成三步：</p>
<ol>
<li>Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中</li>
<li>从库读取主库的二进制日志文件 Binlog，写入到从库的中继日志 RelayLog</li>
<li>从库重做中继日志中的事件，将改变反应到它自己的数据</li>
</ol>
<h2 id="搭建"><a class="markdownIt-Anchor" href="#搭建">#</a> 搭建</h2>
<p><strong>服务器准备：</strong></p>
<p>首先需要准备主库与从库两台服务器，并且都安装 mysql 服务，然后开放其 3306 端口 (mysql 服务提供端口)。</p>
<p><strong>主库配置：</strong></p>
<p>1. 修改主库配置文件 /etc/my.cnf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mysql服务ID，保证整个集群环境中唯一，取值范围：1~2^32-1，默认为1</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line">#是否只读，1代表只读，0代表读写</span><br><span class="line">read-only=0</span><br><span class="line"></span><br><span class="line">#忽略的数据，指不需要同步的数据库</span><br><span class="line">#binlog-ignore-db=mysql</span><br><span class="line"></span><br><span class="line">#指定同步的数据库</span><br><span class="line">#binlog-do-db=db01</span><br></pre></td></tr></table></figure>
<p>2. 重启 mysql 服务</p>
<p>3. 登录 mysql，创建远程连接的账号，并授予主从复制权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建itcast用户，并设置密码，该用户可在任意主机连接该MySQL服务</span><br><span class="line">CREATE USER &#x27;itcast&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;Set_Password&#x27;；</span><br><span class="line"></span><br><span class="line">#为&#x27;itcast&#x27;@&#x27;%&#x27;用户分配主从复制权限</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO &#x27;itcast&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>
<p>4. 通过指令，查看二进制日志坐标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>
<p>字段含义说明：</p>
<p>file：从哪个日志文件开始推送日志文件</p>
<p>position：从哪个位置开始推送日志</p>
<p>binlog_ignore_db：指定不需要同步的数据库</p>
<p><strong>从库配置：</strong></p>
<p>1. 修改配置文件 /etc/my.cnf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#mysql服务ID，保证整个集群环境中唯一，取值范围1~2^32-1，和主库不一样即可</span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line">#是否只读，1代表只读，0代表读写</span><br><span class="line">read-only=1</span><br><span class="line">#该参数的只读权限仅作用于普通用户，对于超级管理员无效</span><br><span class="line"></span><br><span class="line">super-read-only=1</span><br><span class="line">#该指令可将超级管理员的权限也修改为仅只读</span><br></pre></td></tr></table></figure>
<p>2. 重启 mysql 服务</p>
<p>3. 登录 mysql，设置主库配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE REPLICATION SOURCE TO SOURCE_HOST=&#x27;XXX.XXX&#x27;, SOURCE_USER=&#x27;XXX&#x27;, SOURCE_PASSWORD=&#x27;XXX&#x27;, SOURCE_LOG_FILE=&#x27;XXX&#x27;, SOURCE_LOG_POS=XXX;</span><br><span class="line">#该语句为8.0.23版本的语法，如果是之前的版本，执行如下SQL：</span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;XXX.XXX.XXX.XXX&#x27;, MASTER_USER=&#x27;XXX&#x27;, MASTER_PASSWORD=&#x27;XXX&#x27;, MASTER_LOG_FILE=&#x27;XXX&#x27;, MASTER_LOG_POS=XXX;</span><br></pre></td></tr></table></figure>
<p>4. 开启同步操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start replica;#8.0.22之后</span><br><span class="line">start slave;#8.0.22之前</span><br></pre></td></tr></table></figure>
<p>5. 查看主从同步状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show replica status;#8.0.22之后</span><br><span class="line">show slave status;#8.0.22之前</span><br></pre></td></tr></table></figure>
<h1 id="分库分表"><a class="markdownIt-Anchor" href="#分库分表">#</a> 分库分表</h1>
<p>分库分表的中心思想是将数据分散存储，使得单一数据库 / 表的数据量变小。</p>
<p>以此来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。</p>
<h2 id="拆分策略"><a class="markdownIt-Anchor" href="#拆分策略">#</a> 拆分策略</h2>
<p>有两种拆分策略：垂直拆分、水平拆分</p>
<p><strong>垂直分库：以表为依据，根据业务将不同表拆分到不同库中</strong></p>
<ol>
<li>每个库的表结构都不一样</li>
<li>每个库的数据也不一样</li>
<li>所有库的并集是全量数据</li>
</ol>
<p><strong>垂直分表：以字段为依据，根据字段属性将不同字段拆分到不同表中</strong></p>
<ol>
<li>每个表的结构都不一样</li>
<li>每个表的数据也不一样，一般通过一列 (主键 / 外键) 关联</li>
<li>所有表的并集是全量数据</li>
</ol>
<p>水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中</p>
<ol>
<li>每个库的表结构都一样</li>
<li>每个库的数据都不一样</li>
<li>所有库的并集是全量数据</li>
</ol>
<p>水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个表中</p>
<ol>
<li>每个表的表结构都一样</li>
<li>每个表的数据都不一样</li>
<li>所有表的并集是全量数据</li>
</ol>
<p><strong>实现技术：</strong></p>
<ul>
<li>shardingJDBC：基于 AOP 原理，在应用程序中堆本地执行的 SQL 进行拦截、解析、改写、路由处理。需要自行编码配置实现，只支持 java 语言，性能较高。</li>
<li>MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。</li>
</ul>
<h2 id="mycat"><a class="markdownIt-Anchor" href="#mycat">#</a> MyCat</h2>
<h3 id="mycat基础及部署"><a class="markdownIt-Anchor" href="#mycat基础及部署">#</a> Mycat 基础及部署</h3>
<p>MyCat 是开源的、活跃的、基于 java 语言编写的 MySQL 数据库中间件。</p>
<p>可以向使用 mysql 一样来使用 mycat，对于开发人员来说根本感觉不到 mycat 的存在。</p>
<p>优势：</p>
<ul>
<li>性能可靠稳定</li>
<li>强大的技术团队</li>
<li>体系完善</li>
<li>社区活跃</li>
</ul>
<p><strong>安装</strong></p>
<p>MyCat 是采用 java 语言开发的开源的数据库中间件，支持 Windows 和 Linux 运行环境。</p>
<p>在 Linux 中安装 MyCat 需要在服务器中提前安装如下软件：</p>
<ul>
<li>MySQL</li>
<li>JDK</li>
<li>MyCat</li>
</ul>
<p>安装 JDK：</p>
<p>下载并解压 JDK 压缩包，将其置于指定目录 /usr/local</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk...... -C /usr/local</span><br></pre></td></tr></table></figure>
<p>配置环境变量：</p>
<p>使用 vim 命令修改 /etc/profile 文件，在文件末尾加入如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/jdk....</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>安装 MyCat：</p>
<p>下载并解压 MyCat 压缩包，将其置于指定目录 /usr/local</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf Mycat-server-1.6.7.3-release-20210913163959-linux.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<p>MyCat 目录结构：</p>
<ul>
<li>bin：存放可执行文件，用于启动或停止 mycat</li>
<li>conf：存放 mycat 的配置文件</li>
<li>lib：存放 mycat 的项目依赖包 (jar)</li>
<li>logs：存放 mycat 的日志文件</li>
</ul>
<h3 id="mycat概述"><a class="markdownIt-Anchor" href="#mycat概述">#</a> Mycat 概述</h3>
<p>Mycat 并不存储数据，它仅作逻辑分片，数据仍存储在底层的 MySQL 上</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305291546696.png" alt="image-20230529154658572"></p>
<h3 id="mycat入门"><a class="markdownIt-Anchor" href="#mycat入门">#</a> Mycat 入门</h3>
<p><strong>分片配置 (schema.xml)：</strong></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305291744742.png" alt="image-20230529174439452"></p>
<p>配置示例：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305291745419.png" alt="image-20230529174503332"></p>
<p><strong>配置 server.xml</strong></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305291746593.png" alt="image-20230529174609492"></p>
<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到Mycat的安装目录，执行如下指令，启动Mycat：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line">bin/mycat start</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止</span></span><br><span class="line">bin/mycat stop</span><br></pre></td></tr></table></figure>
<p>Mycat 启动之后，占用端口号 8066</p>
<h3 id="mycat配置"><a class="markdownIt-Anchor" href="#mycat配置">#</a> Mycat 配置</h3>
<p>schema.xml：配置逻辑库，逻辑表等相关信息</p>
<p>server.xml：配置 mycat 运行的服务相关的信息</p>
<p>rule.xml：配置分片规则的相关信息</p>
<h4 id="schemaxml"><a class="markdownIt-Anchor" href="#schemaxml">#</a> schema.xml</h4>
<p>schema.xml 作为 Mycat 中最重要的配置文件之一，涵盖了 Mycat 的逻辑库、逻辑表、分片规则、分片节点及数据源的配置。</p>
<p>主要包含以下三组标签：</p>
<ul>
<li>schema 标签</li>
<li>datanode 标签</li>
<li>datahost 标签</li>
</ul>
<p><strong>schema 标签：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;DB01&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;true&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;TB_ORDER&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>schema 标签用于定义 Mycat 实例中的逻辑库，一个 Mycat 实例中，可以有多个逻辑库，可以通过 schema 标签来划分不同的逻辑库。</p>
<p>Mycat 中的逻辑库的概念，等同于 MySQL 中的 database 概念，需要操作某个逻辑库下的表时，也需要切换逻辑库 (use xxx)。</p>
<p>核心属性：</p>
<ul>
<li>name：指定自定义的逻辑库库名</li>
<li>checkSQLschema：在 SQL 语句操作时指定了数据库名称，执行时是否自动去除；true 自动去除，false 不自动去除。</li>
<li>sqlMaxLimit：如果未指定 limit 进行查询，列表查询模式查询多少条记录</li>
</ul>
<p><strong>dataNode 标签：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost1&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db01&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost2&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db01&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn3&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;dhost3&quot;</span> <span class="attr">database</span>=<span class="string">&quot;db01&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>dataNode 标签中定义了 Mycat 中的数据节点，也就是我们通常说的数据分片。</p>
<p>一个 dataNode 标签就是一个独立的数据分片。</p>
<p>核心属性：</p>
<ul>
<li>name：定义数据节点名称</li>
<li>dataHost：数据库实例主机名称，引用自 dataHost 标签中 name 属性</li>
<li>database：定义分片所属数据库</li>
</ul>
<p><strong>dataHost 标签：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;dhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;0&quot;</span> <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span> <span class="attr">dbDriver</span>=<span class="string">&quot;jdbc&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;master&quot;</span> <span class="attr">url</span>=<span class="string">&quot;jdbc:mysql://192.168.200.210:3306?useSSL=faluse<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该标签在 Mycat 逻辑库中作为底层标签存在，直接定义了具体的数据库实例、读写分离、心跳语句。</p>
<p>核心属性：</p>
<ul>
<li>name：唯一表示，供上层标签使用</li>
<li>maxCon/minCon：最大连接数 / 最小连接数</li>
<li>balance：负载均衡策略，取值 0，1，2，3</li>
<li>writeType：写操作分发方式 (0：写操作转发到第一个 writeHost，第一个挂了，切换到第二个；1：写操作随机分发到配置的 writeHost)</li>
<li>dbDriver：数据库驱动，支持 native、jdbc</li>
</ul>
<h4 id="rulexml"><a class="markdownIt-Anchor" href="#rulexml">#</a> rule.xml</h4>
<p>rule.xml 中定义所有拆分表的规则，在使用过程中可以灵活的使用分片算法，或者对同一个分片算法使用不同的参数，它让分片过程可配置化。</p>
<p>主要包含两类标签：</p>
<ul>
<li>tableRule</li>
<li>Function</li>
</ul>
<h4 id="serverxml"><a class="markdownIt-Anchor" href="#serverxml">#</a> server.xml</h4>
<p>server.xml 配置文件包含了 Mycat 的系统配置信息，主要有两个重要的标签：system、user。</p>
<p><strong>system 标签：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nonePasswordLgoin&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useHandshakeV10&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useSql&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>user 标签：</strong></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202305291859326.png" alt="image-20230529185949146"></p>
<p>若 privileges check 不做更改，则表示允许所有权限。</p>
<h3 id="mycat分片规则"><a class="markdownIt-Anchor" href="#mycat分片规则">#</a> Mycat 分片规则</h3>
<ul>
<li>分片规则 - 范围：</li>
</ul>
<p>根据指定的字段及配置的范围与数据节点的对应情况，来决定该数据属于哪一个分片。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051237470.png" alt="image-20230605123712301"></p>
<ul>
<li>分片规则 - 取模</li>
</ul>
<p>根据指定的字段值与节点数量进行求模运算，根据运算结果，决定该数据属于哪一个分片。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051239514.png" alt="image-20230605123935430"></p>
<ul>
<li>分片规则 - 一致性 hash</li>
</ul>
<p>所谓一致性 hash，指相同的 hash 因子计算值总是被划分到相同的分区表中，不会因为分区节点的增加而改变原来数据的分区位置。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051241163.png" alt="image-20230605124147060"></p>
<ul>
<li>分片规则 - 枚举</li>
</ul>
<p>通过再配置文件中配置可能的枚举值，指定数据分布到不同的数据节点上，本规则适用于按照省份、性别、状态拆分数据等业务。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051245233.png" alt="image-20230605124548131"></p>
<ul>
<li>分片规则 - 应用指定</li>
</ul>
<p>运行阶段由应用自主决定路由到哪个分片，直接根据字符子串 (必须是数字) 计算分片号。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051329016.png" alt="image-20230605132920909"></p>
<ul>
<li>分片规则 - 固定分片 hash 算法</li>
</ul>
<p>该算法类似于十进制的求模运算，但是为二进制的操作，例如，取 id 的二进制第 10 位与 1111111111 进行位 &amp; 运算。(计算出来的结果必在 0-1023 之间)</p>
<p>特点：</p>
<ol>
<li>如果是求模，连续的值，分别分配到各个不同的分片。但是此算法会将连续的值可能分配到相同的分片，降低事务处理的难度。</li>
<li>可以均匀分配，也可以非均匀分配。</li>
<li>分片字段必须是数字类型。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051336485.png" alt="image-20230605133633383"></p>
<ul>
<li>分片规则 - 字符串 hash 解析</li>
</ul>
<p>截取字符串中的指定位置的子字符串，进行 hash 算法，算出分片。</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051339173.png" alt="image-20230605133945078"></p>
<ul>
<li>分片规则 - 按 (天) 日期分片</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051343281.png" alt="image-20230605134346176"></p>
<ul>
<li>分片规则 - 按月分片</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051345593.png" alt="image-20230605134505489"></p>
<h3 id="mycat的管理及监控"><a class="markdownIt-Anchor" href="#mycat的管理及监控">#</a> Mycat 的管理及监控</h3>
<h4 id="mycat管理"><a class="markdownIt-Anchor" href="#mycat管理">#</a> Mycat 管理：</h4>
<p>Mycat 默认开通 2 个端口，可以再 server.xml 中进行修改。</p>
<ol>
<li>8066 数据访问端口，即进行 DML 和 DDL 操作</li>
<li>9066 数据库管理端口，即 mycat 服务管理控制功能，用于管理 mycat 的整个集群状态</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h ip -P port -u user -p password;</span><br></pre></td></tr></table></figure>
<p>部分基础指令：</p>
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">show @@help</td>
<td style="text-align:center">查看 Mycat 管理工具帮助文档</td>
</tr>
<tr>
<td style="text-align:center">show @@version</td>
<td style="text-align:center">查看 Mycat 的版本</td>
</tr>
<tr>
<td style="text-align:center">reload @@config</td>
<td style="text-align:center">重新加载 Mycat 的配置文件</td>
</tr>
<tr>
<td style="text-align:center">show @@datasource</td>
<td style="text-align:center">查看 Mycat 的数据源信息</td>
</tr>
<tr>
<td style="text-align:center">show @@datanode</td>
<td style="text-align:center">查看 Mycat 现有的分片节点信息</td>
</tr>
<tr>
<td style="text-align:center">show @@threadpool</td>
<td style="text-align:center">查看 Mycat 的线程池信息</td>
</tr>
<tr>
<td style="text-align:center">show @@sql</td>
<td style="text-align:center">查看执行的 SQL</td>
</tr>
<tr>
<td style="text-align:center">show @@sql.sum</td>
<td style="text-align:center">查看执行的 SQL 统计</td>
</tr>
</tbody>
</table>
<h4 id="mycat-eye"><a class="markdownIt-Anchor" href="#mycat-eye">#</a> Mycat-eye</h4>
<p>Mycat-web (Mycat-eye) 是对 mycat-server 提供的监控服务，功能不局限于对 mycat-server 使用。</p>
<p>它通过 JDBC 连接对 Mycat、Mysql 监控，监控远程服务器 (目前仅限于 linux 系统) 的 CPU、内存、网络、磁盘。</p>
<p>Mycat-eye 运行过程中需要依赖 zookeeper，因此需要先安装 zookeeper。</p>
<h1 id="读写分离"><a class="markdownIt-Anchor" href="#读写分离">#</a> 读写分离</h1>
<p>读写分离，简单的说是把对数据库的读和写操作分开，以应对不同的数据库服务器。</p>
<p>主数据库提供写操作，从数据库提供读操作，这样能有效的减轻单台数据库的压力。</p>
<p>通过 Mycat 可以轻易实现上述功能，不仅支持 Mysql，也支持 Oracle 和 Sql Server。</p>
<h2 id="一主一从"><a class="markdownIt-Anchor" href="#一主一从">#</a> 一主一从</h2>
<p>Mycat 配置：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051424450.png" alt="image-20230605142407341"></p>
<p>关于 balance：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051424794.png" alt="image-20230605142440690"></p>
<h2 id="双主双从"><a class="markdownIt-Anchor" href="#双主双从">#</a> 双主双从</h2>
<p>Mycat 配置：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051435414.png" alt="image-20230605143506281"></p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202306051436533.png" alt="image-20230605143617423"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统设置systemctl自动启动</title>
    <url>/2023/09/02/linux-systemctl/</url>
    <content><![CDATA[<h1 id="linux系统设置systemctl"><a class="markdownIt-Anchor" href="#linux系统设置systemctl">#</a> Linux 系统设置 systemctl</h1>
<h2 id="文件配置"><a class="markdownIt-Anchor" href="#文件配置">#</a> 文件配置</h2>
<p>这里以设置 redis 为例，其他的也是一样的</p>
<ol>
<li>
<p>打开路径 /etc/systemd/system</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/systemd/system</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用 vim 编辑 redis.service，添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/redis-stable/src/redis-server /usr/local/redis-stable/redis.conf</span><br><span class="line">ExecReload=/usr/local/redis-stable/src/redis-server -s reload</span><br><span class="line">ExecStop=/usr/local/redis-stable/src/redis-server -s stop</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重新读取 systemctl 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用指令查看是否配置成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果正常显示，那么就配置完成了，可以使用 start，stop，enable 等命令进行控制</p>
<h2 id="文件内容解读"><a class="markdownIt-Anchor" href="#文件内容解读">#</a> 文件内容解读</h2>
<h3 id="unit"><a class="markdownIt-Anchor" href="#unit">#</a> Unit</h3>
<p>Unit 主要是对该服务的说明，以及配置与其他服务的关系：</p>
<ul>
<li>Description：对 Unit 的描述，通常为简短的一句话</li>
<li>After：指在什么运行之后执行，设置为 network.target 表示网络运行后启动</li>
<li>Before：与 After 相反</li>
<li>Documentation：指定服务的文档</li>
<li>Requires：依赖的其他 Unit 列表，列在其中的 Unit 模块会在这个服务启动的同时被启动，如果其中任意一个启动失败，则该服务也将被终止</li>
<li>Wants：与 Requires 类似，但只是在启动时调用其他 Unit 模块，不考虑被调用的模块是否启动成功</li>
<li>Conflicts：冲突模块，如果列出的模块已经运行，则该模块不能运行</li>
<li>OnFailure：当该模块启动失败时，启动 OnFailure 列出的模块</li>
<li>PartOf：该参数仅作用于单元的停止或重启。当停止或重启列出的某个 Unit 时，该 Unit 也会被停止。反之，当该 Unit 被停止时，并不影响该参数中的 Unit</li>
</ul>
<h3 id="service"><a class="markdownIt-Anchor" href="#service">#</a> Service</h3>
<p>Service 是服务 (Service) 类型的 Unit 文件 (后缀为.service) 特有的，用于定义服务的具体管理和执行操作：</p>
<ul>
<li>Type：设置进程的启动类型。必须设置为 simple、exec、forking、oneshot、dbus、notify、idle 之一，默认为 simple 类型，适用于大多数场景。如果服务程序启动后会通过 fork 系统调用创建子进程，然后关闭应用程序本身进程的情况，则应该将 Type 的值设置为 forking，否则 systemd 将不会跟踪子进程的行为，而是认为服务已经退出。</li>
<li>Environment：为服务添加环境变量</li>
<li>EnvironmenFile：指定加载一个包含服务所需的环境参数的文件，文件中每一行都是一个环境变量的定义</li>
<li>ExecStart：指定服务启动的主要命令，每个配置文件中只能使用一次。<strong>需要使用绝对路径</strong></li>
<li>ExecStartPre：指定在启动执行 ExecStart 的命令前的准备工作，可以有多个，所有命令会按照书写顺序依次执行</li>
<li>ExecStartPost：指定在启动执行 ExecStart 的命令后的收尾工作，也可以有多个</li>
<li>ExecStop：停止服务所需要执行的主要命令。<strong>需要使用绝对路径</strong></li>
<li>ExecStopPost：指定在 ExecStop 命令执行后的收尾工作，也可以有多个</li>
<li>ExecReload：重新加载服务文件所需要执行的主要命令。<strong>需要使用绝对路径</strong></li>
<li>Restart：这个值用于指定在什么情况下需要重启服务进程，如下表所示：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">退出原因</th>
<th style="text-align:center">no</th>
<th style="text-align:center">always</th>
<th style="text-align:center">on-success</th>
<th style="text-align:center">on-failure</th>
<th style="text-align:center">on-abnormal</th>
<th style="text-align:center">on-abort</th>
<th style="text-align:center">on-watchdog</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">正常退出</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">退出码不为 &quot;0&quot;</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">进程被强制杀死</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">systemd 操作超时</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">看门狗超时</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
<td style="text-align:center">X</td>
<td style="text-align:center"></td>
<td style="text-align:center">X</td>
</tr>
</tbody>
</table>
<ul>
<li>RestartSec：如果服务需要被重启，这个参数的值为服务被重启前的等待秒数。该参数仅在上述 Restart 自动重启的情况有效，如果是手动执行 <code>systemctl restart</code>  命令，则该参数无效。</li>
<li>Nice：服务的进程优先级，值越小优先级越高，默认为 0、-20 为最高优先级、19 为最低优先级</li>
<li>WorkingDirectory：指定服务的工作目录</li>
<li>RootDirectory：指定服务进程的根目录，如果配置了该参数，服务将无法访问指定目录以外的任何文件</li>
<li>User：指定运行服务的用户，会影响服务对本地文件系统的访问权限</li>
<li>Group：指定运行服务的用户组，会影响服务对本地文件系统的访问权限</li>
<li>PrivateTmp：是否给服务分配独立的临时空间（true/false)</li>
</ul>
<h3 id="install"><a class="markdownIt-Anchor" href="#install">#</a> Install</h3>
<p>Install 是服务的安装信息，它不再 systemd 的运行期间使用，只在使用 <code>systemctl enable</code>  和 <code>systemctl disable</code>  命令启用 / 禁用服务时有用，所有 Unit 文件通用，用来定义如何启动，以及是否开机启动：</p>
<ul>
<li>WantedBy：它的值时一个或多个 target，执行 enable 命令时，符号链接会放入 <code>/etc/systemd/system</code>  目录下以 target 名 +.wants 后缀构成的子目录。 <code>WantedBy=multi-user.target</code>  表示当系统以多用户方式 (默认的运行级别) 启动时，这个服务需要被自动运行。需要用 <code>systemctl enable</code>  激活</li>
<li>RequireBy：依赖当前服务的模块。它的值时一个或多个 target，执行 enable 命令时，符号链接会放入 <code>/etc/systemd/system</code>  目录下以 target 名 +.required 后缀构成的子目录中</li>
<li>Alias：当前 Unit 可用于启动的别名</li>
<li>Also：当前 Unit 被 <code>enable/disable</code>  时，会被同时操作的其他 Unit</li>
</ul>
]]></content>
      <categories>
        <category>Linux系统</category>
      </categories>
      <tags>
        <tag>Linux systemctl</tag>
      </tags>
  </entry>
  <entry>
    <title>office tool plus安装office工具</title>
    <url>/2024/09/10/office-install/</url>
    <content><![CDATA[<h1 id="安装office-tool-plus"><a class="markdownIt-Anchor" href="#安装office-tool-plus">#</a> 安装 Office Tool Plus：</h1>
<p>Office Tool Plus 安装网址：<br>
 <code>https://otp.landian.vip/zh-cn/</code> <br>
<img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202409101124906.png" alt=""><br>
<br><br>
根据自己的网络情况选择合适的下载路线：<br>
<img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202409101130415.png" alt=""><br>
<br><br>
解压并运行 office tool plus</p>
<h1 id="安装office"><a class="markdownIt-Anchor" href="#安装office">#</a> 安装 office</h1>
<h2 id="部署office"><a class="markdownIt-Anchor" href="#部署office">#</a> 部署 office：</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202409101152007.png" alt=""></p>
<p>根据自己的需要选择版本，选择后面带有批量许可证的版本，这里以 office 标准版 2019 - 批量许可证版本为例：</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202409101153503.png" alt=""></p>
<p>确定后点击开始部署，等待部署完成</p>
<h1 id="激活office"><a class="markdownIt-Anchor" href="#激活office">#</a> 激活 office</h1>
<h2 id="安装许可证"><a class="markdownIt-Anchor" href="#安装许可证">#</a> 安装许可证</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202409101214619.png" alt=""></p>
<p>选择自己部署的同版本 office 的许可证，确定</p>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202409101215721.png" alt=""></p>
<h2 id="kms主机设置"><a class="markdownIt-Anchor" href="#kms主机设置">#</a> KMS 主机设置</h2>
<p><img src="https://raw.githubusercontent.com/Ailzr/picBed/master/202409101218250.png" alt=""></p>
<p>可以参考下面网址获取 KMS 主机网址：<br>
 <code>https://www.coolhub.top/tech-articles/kms_list.html</code></p>
<p>设置好后点击激活，等待激活成功即可</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>office tool plus</tag>
      </tags>
  </entry>
</search>
